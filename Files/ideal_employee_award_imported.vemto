{"tables":{"basicrelationships":{"basicrelationships":{"count":16,"lastPrimaryKey":16,"index":{"1":{"hasMany":{"basicrelationships.inverseId":[2],"inputs.relationshipId":[36]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"2":{"hasMany":{"basicrelationships.inverseId":[1]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"3":{"hasMany":{"basicrelationships.inverseId":[4],"inputs.relationshipId":[31]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"4":{"hasMany":{"basicrelationships.inverseId":[3]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"5":{"hasMany":{"basicrelationships.inverseId":[6]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"6":{"hasMany":{"basicrelationships.inverseId":[5],"inputs.relationshipId":[3]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"7":{"hasMany":{"basicrelationships.inverseId":[8],"inputs.relationshipId":[4]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"8":{"hasMany":{"basicrelationships.inverseId":[7]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"9":{"hasMany":{"basicrelationships.inverseId":[10]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"10":{"hasMany":{"basicrelationships.inverseId":[9],"inputs.relationshipId":[2]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"11":{"hasMany":{"basicrelationships.inverseId":[12],"inputs.relationshipId":[37]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"12":{"hasMany":{"basicrelationships.inverseId":[11]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"13":{"hasMany":{"basicrelationships.inverseId":[14],"inputs.relationshipId":[5]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"14":{"hasMany":{"basicrelationships.inverseId":[13]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"15":{"hasMany":{"basicrelationships.inverseId":[16],"inputs.relationshipId":[1]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"16":{"hasMany":{"basicrelationships.inverseId":[15]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_15":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":8,"inverseId":16,"localModelId":7,"parentKeyId":37,"foreignKeyId":27,"name":"directBoss","type":"belongsTo","foreignOriginalName":"direct_boss_id","hasApi":true,"defaultName":"directBoss","usingFirstDefaultName":true,"id":15,"createdAt":"2023-03-11 01:51:17","updatedAt":"2023-03-11 02:49:21"},"item_16":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":7,"inverseId":15,"localModelId":8,"parentKeyId":37,"foreignKeyId":27,"name":"applications","type":"hasMany","foreignOriginalName":"direct_boss_id","hasApi":true,"defaultName":"applications","usingFirstDefaultName":true,"id":16,"createdAt":"2023-03-11 01:51:17","updatedAt":"2023-03-11 02:49:21"},"item_9":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":7,"inverseId":10,"localModelId":5,"parentKeyId":16,"foreignKeyId":28,"name":"application","type":"hasOne","foreignOriginalName":"employee_id","hasApi":true,"defaultName":"application","usingFirstDefaultName":true,"id":9,"createdAt":"2023-03-11 01:52:00","updatedAt":"2023-03-11 02:49:21"},"item_10":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":5,"inverseId":9,"localModelId":7,"parentKeyId":16,"foreignKeyId":28,"name":"employee","type":"belongsTo","foreignOriginalName":"employee_id","hasApi":true,"defaultName":"employee","usingFirstDefaultName":true,"id":10,"createdAt":"2023-03-11 01:52:00","updatedAt":"2023-03-11 02:49:21"},"item_5":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":7,"inverseId":6,"localModelId":3,"parentKeyId":14,"foreignKeyId":29,"name":"applications","type":"hasMany","foreignOriginalName":"supervisor_committee_id","hasApi":true,"defaultName":"applications","usingFirstDefaultName":true,"id":5,"createdAt":"2023-03-11 01:54:49","updatedAt":"2023-03-11 02:49:21"},"item_6":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":3,"inverseId":5,"localModelId":7,"parentKeyId":14,"foreignKeyId":29,"name":"supervisorCommittee","type":"belongsTo","foreignOriginalName":"supervisor_committee_id","hasApi":true,"defaultName":"supervisorCommittee","usingFirstDefaultName":true,"id":6,"createdAt":"2023-03-11 01:54:49","updatedAt":"2023-03-11 02:49:21"},"item_7":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":4,"inverseId":8,"localModelId":7,"parentKeyId":15,"foreignKeyId":30,"name":"technicalCommittee","type":"belongsTo","foreignOriginalName":"technical_committee_id","hasApi":true,"defaultName":"technicalCommittee","usingFirstDefaultName":true,"id":7,"createdAt":"2023-03-11 01:56:11","updatedAt":"2023-03-11 02:49:21"},"item_8":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":7,"inverseId":7,"localModelId":4,"parentKeyId":15,"foreignKeyId":30,"name":"applications","type":"hasMany","foreignOriginalName":"technical_committee_id","hasApi":true,"defaultName":"applications","usingFirstDefaultName":true,"id":8,"createdAt":"2023-03-11 01:56:11","updatedAt":"2023-03-11 02:49:21"},"item_13":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":6,"inverseId":14,"localModelId":7,"parentKeyId":23,"foreignKeyId":31,"name":"award","type":"belongsTo","foreignOriginalName":"award_id","hasApi":true,"defaultName":"award","usingFirstDefaultName":true,"id":13,"createdAt":"2023-03-11 01:59:11","updatedAt":"2023-03-11 02:49:21"},"item_14":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":7,"inverseId":13,"localModelId":6,"parentKeyId":23,"foreignKeyId":31,"name":"applications","type":"hasMany","foreignOriginalName":"award_id","hasApi":true,"defaultName":"applications","usingFirstDefaultName":true,"id":14,"createdAt":"2023-03-11 01:59:11","updatedAt":"2023-03-11 02:49:21"},"item_11":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":8,"inverseId":12,"localModelId":5,"parentKeyId":37,"foreignKeyId":22,"name":"directBoss","type":"belongsTo","foreignOriginalName":"direct_boss_id","hasApi":true,"defaultName":"directBoss","usingFirstDefaultName":true,"id":11,"createdAt":"2023-03-11 01:50:38","updatedAt":"2023-03-11 02:49:21"},"item_12":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":5,"inverseId":11,"localModelId":8,"parentKeyId":37,"foreignKeyId":22,"name":"employees","type":"hasMany","foreignOriginalName":"direct_boss_id","hasApi":true,"defaultName":"employees","usingFirstDefaultName":true,"id":12,"createdAt":"2023-03-11 01:50:38","updatedAt":"2023-03-11 02:49:21"},"item_3":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":2,"inverseId":4,"localModelId":8,"parentKeyId":12,"foreignKeyId":41,"name":"position","type":"belongsTo","foreignOriginalName":"position_id","hasApi":true,"defaultName":"position","usingFirstDefaultName":true,"id":3,"createdAt":"2023-03-11 01:50:08","updatedAt":"2023-03-11 02:49:21"},"item_4":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":8,"inverseId":3,"localModelId":2,"parentKeyId":12,"foreignKeyId":41,"name":"directBosses","type":"hasMany","foreignOriginalName":"position_id","hasApi":true,"defaultName":"directBosses","usingFirstDefaultName":true,"id":4,"createdAt":"2023-03-11 01:50:08","updatedAt":"2023-03-11 02:49:21"},"item_1":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":2,"inverseId":2,"localModelId":5,"parentKeyId":12,"foreignKeyId":21,"name":"position","type":"belongsTo","foreignOriginalName":"position_id","hasApi":true,"defaultName":"position","usingFirstDefaultName":true,"id":1,"createdAt":"2023-03-11 01:48:05","updatedAt":"2023-03-11 02:49:21"},"item_2":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"modelId":5,"inverseId":1,"localModelId":2,"parentKeyId":12,"foreignKeyId":21,"name":"employees","type":"hasMany","foreignOriginalName":"position_id","hasApi":true,"defaultName":"employees","usingFirstDefaultName":true,"id":2,"createdAt":"2023-03-11 01:48:05","updatedAt":"2023-03-11 02:49:21"}},"cruds":{"cruds":{"count":8,"lastPrimaryKey":12,"index":{"1":{"hasMany":{"inputs.crudId":[1,2,3,4,5,6,7,8,9,10]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"2":{"hasMany":{"inputs.crudId":[11,12]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"5":{"hasMany":{"inputs.crudId":[23]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"8":{"hasMany":{"inputs.crudId":[24,25,26]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"9":{"hasMany":{"inputs.crudId":[27,28,29,30,31]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"10":{"hasMany":{"inputs.crudId":[32,33,34,35,36,37]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"11":{"hasMany":{"inputs.crudId":[38,39,40,41]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"12":{"hasMany":{"inputs.crudId":[42,43,44,45]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_1":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Applications","url":"applications","modelId":7,"projectId":1,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Applications List","create":"Create Application","edit":"Edit Application","update":"Update Application","show":"Show Application","new":"New Application"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":1,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_2":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Awards","url":"awards","modelId":6,"projectId":1,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Awards List","create":"Create Award","edit":"Edit Award","update":"Update Award","show":"Show Award","new":"New Award"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":2,"createdAt":"2023-03-11 02:49:30","updatedAt":"2023-03-11 02:49:30"},"item_5":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Positions","url":"positions","modelId":2,"projectId":1,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Positions List","create":"Create Position","edit":"Edit Position","update":"Update Position","show":"Show Position","new":"New Position"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":5,"createdAt":"2023-03-11 02:49:40","updatedAt":"2023-03-11 02:49:40"},"item_8":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Users","url":"users","modelId":1,"projectId":1,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Users List","create":"Create User","edit":"Edit User","update":"Update User","show":"Show User","new":"New User"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":8,"createdAt":"2023-03-11 02:49:49","updatedAt":"2023-03-11 02:49:49"},"item_9":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Direct Bosses","url":"direct-bosses","modelId":8,"projectId":1,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"DirectBosses List","create":"Create DirectBoss","edit":"Edit DirectBoss","update":"Update DirectBoss","show":"Show DirectBoss","new":"New Direct boss"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":9,"createdAt":"2023-03-11 02:53:26","updatedAt":"2023-03-11 02:53:26"},"item_10":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Employees","url":"employees","modelId":5,"projectId":1,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"Employees List","create":"Create Employee","edit":"Edit Employee","update":"Update Employee","show":"Show Employee","new":"New Employee"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":10,"createdAt":"2023-03-11 02:53:28","updatedAt":"2023-03-11 02:53:28"},"item_11":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Supervisor Committees","url":"supervisor-committees","modelId":3,"projectId":1,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"SupervisorCommittees List","create":"Create SupervisorCommittee","edit":"Edit SupervisorCommittee","update":"Update SupervisorCommittee","show":"Show SupervisorCommittee","new":"New Supervisor committee"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":11,"createdAt":"2023-03-11 02:53:32","updatedAt":"2023-03-11 02:53:32"},"item_12":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Technical Committees","url":"technical-committees","modelId":4,"projectId":1,"hasManyDetailId":null,"manyToManyDetailId":null,"titles":{"index":"TechnicalCommittees List","create":"Create TechnicalCommittee","edit":"Edit TechnicalCommittee","update":"Update TechnicalCommittee","show":"Show TechnicalCommittee","new":"New Technical committee"},"hasApi":true,"isHasManyDetail":false,"isManyToManyDetail":false,"isForLivewire":false,"id":12,"createdAt":"2023-03-11 02:53:34","updatedAt":"2023-03-11 02:53:34"}},"entities":{"entities":{"count":8,"lastPrimaryKey":8,"index":{"1":{"hasMany":{"fields.entityId":[1,2,3,4,5,6,7,8,9,10,11],"projects.authModelId":[1],"cruds.modelId":[8]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"2":{"hasMany":{"fields.entityId":[12,13],"foreigns.relatedEntityId":[2,1],"basicrelationships.localModelId":[2,4],"basicrelationships.modelId":[1,3],"cruds.modelId":[5]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"3":{"hasMany":{"fields.entityId":[14,42,43,45,46],"foreigns.relatedEntityId":[3],"basicrelationships.modelId":[6],"basicrelationships.localModelId":[5],"cruds.modelId":[11]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"4":{"hasMany":{"fields.entityId":[15,48,49,50,51],"foreigns.relatedEntityId":[4],"basicrelationships.localModelId":[8],"basicrelationships.modelId":[7],"cruds.modelId":[12]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"5":{"hasMany":{"fields.entityId":[16,17,18,19,20,21,22],"basicrelationships.modelId":[2,12,10],"basicrelationships.localModelId":[1,11,9],"foreigns.relatedEntityId":[5],"cruds.modelId":[10]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"6":{"hasMany":{"fields.entityId":[23,24,25],"foreigns.relatedEntityId":[7],"basicrelationships.localModelId":[14],"basicrelationships.modelId":[13],"cruds.modelId":[2]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"7":{"hasMany":{"fields.entityId":[26,27,28,29,30,31,32,33,34,35,36],"basicrelationships.modelId":[16,9,5,8,14],"basicrelationships.localModelId":[15,10,6,7,13],"cruds.modelId":[1]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"8":{"hasMany":{"fields.entityId":[37,38,40,47,41,39],"basicrelationships.modelId":[4,11,15],"basicrelationships.localModelId":[3,12,16],"foreigns.relatedEntityId":[8,6],"cruds.modelId":[9]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_7":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Application","type":"model","plural":"Applications","pluralAndSingularAreSame":false,"table":"applications","projectId":1,"top":"-47px","left":"292px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_03_11_000008_create_applications_table.php","foreignsMigrationName":"2023_03_11_009004_add_foreigns_to_applications_table.php","generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":7,"createdAt":"2023-03-11 01:51:02","updatedAt":"2023-03-11 03:05:38"},"item_6":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Award","type":"model","plural":"Awards","pluralAndSingularAreSame":false,"table":"awards","projectId":1,"top":"-378px","left":"531px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_03_11_000009_create_awards_table.php","foreignsMigrationName":null,"generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":6,"createdAt":"2023-03-11 01:57:39","updatedAt":"2023-03-11 03:05:38"},"item_8":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"DirectBoss","type":"model","plural":"DirectBosses","pluralAndSingularAreSame":false,"table":"direct_bosses","projectId":1,"top":"-308px","left":"1062px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_03_11_000010_create_direct_bosses_table.php","foreignsMigrationName":"2023_03_11_009005_add_foreigns_to_direct_bosses_table.php","generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":8,"createdAt":"2023-03-11 01:49:16","updatedAt":"2023-03-11 03:05:39"},"item_5":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Employee","type":"model","plural":"Employees","pluralAndSingularAreSame":false,"table":"employees","projectId":1,"top":"-137px","left":"-364px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_03_11_000011_create_employees_table.php","foreignsMigrationName":"2023_03_11_009006_add_foreigns_to_employees_table.php","generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":5,"createdAt":"2023-03-11 01:44:46","updatedAt":"2023-03-11 03:05:39"},"item_2":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Position","type":"model","plural":"Positions","pluralAndSingularAreSame":false,"table":"positions","projectId":1,"top":"521px","left":"691px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_03_11_000012_create_positions_table.php","foreignsMigrationName":null,"generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":2,"createdAt":"2023-03-11 01:47:35","updatedAt":"2023-03-11 03:05:38"},"item_3":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"SupervisorCommittee","type":"model","plural":"SupervisorCommittees","pluralAndSingularAreSame":false,"table":"supervisor_committees","projectId":1,"top":"-393px","left":"2px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_03_11_000013_create_supervisor_committees_table.php","foreignsMigrationName":null,"generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":3,"createdAt":"2023-03-11 01:53:06","updatedAt":"2023-03-11 03:05:38"},"item_4":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"TechnicalCommittee","type":"model","plural":"TechnicalCommittees","pluralAndSingularAreSame":false,"table":"technical_committees","projectId":1,"top":"389px","left":"-294px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"migrationName":"2023_03_11_000014_create_technical_committees_table.php","foreignsMigrationName":null,"generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":4,"createdAt":"2023-03-11 01:55:53","updatedAt":"2023-03-11 03:05:38"},"item_1":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"projectId":1,"name":"User","type":"model","table":"users","plural":"Users","top":"268px","left":"1530px","pivot":false,"softDeletes":false,"timestamps":true,"needsCentralization":false,"pluralAndSingularAreSame":false,"migrationName":"2014_10_12_000000_create_users_table.php","foreignsMigrationName":null,"generatesMigration":true,"oldMigrationName":null,"oldForeignsMigrationName":null,"id":1,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 03:05:38"}},"fields":{"fields":{"count":50,"lastPrimaryKey":51,"index":{"1":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"2":{"hasMany":{"inputs.fieldId":[24]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"3":{"hasMany":{"inputs.fieldId":[25]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"4":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"5":{"hasMany":{"inputs.fieldId":[26]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"6":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"7":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"8":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"9":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"10":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"11":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"12":{"hasMany":{"foreigns.relatedFieldId":[2,1],"basicrelationships.parentKeyId":[1,2,3,4]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"13":{"hasMany":{"inputs.fieldId":[23]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"14":{"hasMany":{"foreigns.relatedFieldId":[3],"basicrelationships.parentKeyId":[5,6]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"15":{"hasMany":{"foreigns.relatedFieldId":[4],"basicrelationships.parentKeyId":[7,8]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"16":{"hasMany":{"foreigns.relatedFieldId":[5],"basicrelationships.parentKeyId":[9,10]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"17":{"hasMany":{"inputs.fieldId":[32]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"18":{"hasMany":{"inputs.fieldId":[33]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"19":{"hasMany":{"inputs.fieldId":[34]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"20":{"hasMany":{"inputs.fieldId":[35]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"21":{"hasMany":{"foreigns.fieldId":[1],"basicrelationships.foreignKeyId":[1,2],"inputs.fieldId":[36]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"22":{"hasMany":{"foreigns.fieldId":[6],"basicrelationships.foreignKeyId":[11,12],"inputs.fieldId":[37]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"23":{"hasMany":{"foreigns.relatedFieldId":[7],"basicrelationships.parentKeyId":[13,14]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"24":{"hasMany":{"inputs.fieldId":[11]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"25":{"hasMany":{"inputs.fieldId":[12]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"26":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"27":{"hasMany":{"foreigns.fieldId":[8],"basicrelationships.foreignKeyId":[15,16],"inputs.fieldId":[1]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"28":{"hasMany":{"foreigns.fieldId":[5],"basicrelationships.foreignKeyId":[9,10],"inputs.fieldId":[2]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"29":{"hasMany":{"foreigns.fieldId":[3],"basicrelationships.foreignKeyId":[5,6],"inputs.fieldId":[3]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"30":{"hasMany":{"foreigns.fieldId":[4],"basicrelationships.foreignKeyId":[7,8],"inputs.fieldId":[4]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"31":{"hasMany":{"foreigns.fieldId":[7],"basicrelationships.foreignKeyId":[13,14],"inputs.fieldId":[5]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"32":{"hasMany":{"inputs.fieldId":[6]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"33":{"hasMany":{"inputs.fieldId":[7]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"34":{"hasMany":{"inputs.fieldId":[8]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"35":{"hasMany":{"inputs.fieldId":[9]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"36":{"hasMany":{"inputs.fieldId":[10]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"37":{"hasMany":{"foreigns.relatedFieldId":[8,6],"basicrelationships.parentKeyId":[11,12,15,16]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"38":{"hasMany":{"inputs.fieldId":[27]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"39":{"hasMany":{"inputs.fieldId":[28]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"40":{"hasMany":{"inputs.fieldId":[29]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"41":{"hasMany":{"foreigns.fieldId":[2],"basicrelationships.foreignKeyId":[3,4],"inputs.fieldId":[31]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"42":{"hasMany":{"inputs.fieldId":[38]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"43":{"hasMany":{"inputs.fieldId":[39]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"45":{"hasMany":{"inputs.fieldId":[40]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"46":{"hasMany":{"inputs.fieldId":[41]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"47":{"hasMany":{"inputs.fieldId":[30]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"48":{"hasMany":{"inputs.fieldId":[42]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"49":{"hasMany":{"inputs.fieldId":[43]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"50":{"hasMany":{"inputs.fieldId":[44]},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"51":{"hasMany":{"inputs.fieldId":[45]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_26":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":7,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":26,"createdAt":"2023-03-11 01:51:02","updatedAt":"2023-03-11 02:49:21","order":0},"item_27":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"direct_boss_id","entityId":7,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":27,"createdAt":"2023-03-11 01:51:17","updatedAt":"2023-03-11 02:49:21","order":1},"item_28":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"employee_id","entityId":7,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":28,"createdAt":"2023-03-11 01:52:00","updatedAt":"2023-03-11 02:49:21","order":2},"item_29":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"supervisor_committee_id","entityId":7,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":29,"createdAt":"2023-03-11 01:54:48","updatedAt":"2023-03-11 02:49:21","order":3},"item_30":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"technical_committee_id","entityId":7,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":30,"createdAt":"2023-03-11 01:56:11","updatedAt":"2023-03-11 02:49:21","order":4},"item_31":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"award_id","entityId":7,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":31,"createdAt":"2023-03-11 01:59:11","updatedAt":"2023-03-11 02:49:21","order":5},"item_32":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"rank","entityId":7,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->randomNumber","nullable":true,"hidden":false,"fillable":true,"defaultValue":"0","index":false,"unique":false,"order":6,"id":32,"createdAt":"2023-03-11 01:58:37","updatedAt":"2023-03-11 02:49:21"},"item_33":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"direct_boss_points","entityId":7,"type":"unsignedInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->randomNumber","nullable":true,"hidden":false,"fillable":true,"defaultValue":"0","index":false,"unique":false,"order":7,"id":33,"createdAt":"2023-03-11 02:03:53","updatedAt":"2023-03-11 02:49:21"},"item_34":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"supervisor_committee_points","entityId":7,"type":"unsignedInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->randomNumber","nullable":true,"hidden":false,"fillable":true,"defaultValue":"0","index":false,"unique":false,"order":8,"id":34,"createdAt":"2023-03-11 02:04:23","updatedAt":"2023-03-11 02:49:21"},"item_35":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"technical_committee_points","entityId":7,"type":"unsignedInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->randomNumber","nullable":true,"hidden":false,"fillable":true,"defaultValue":"0","index":false,"unique":false,"order":9,"id":35,"createdAt":"2023-03-11 02:04:39","updatedAt":"2023-03-11 02:49:21"},"item_36":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"employee_points","entityId":7,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->randomNumber","nullable":true,"hidden":false,"fillable":true,"defaultValue":"0","index":false,"unique":false,"order":10,"id":36,"createdAt":"2023-03-11 02:17:39","updatedAt":"2023-03-11 02:49:21"},"item_23":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":6,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":23,"createdAt":"2023-03-11 01:57:39","updatedAt":"2023-03-11 02:49:21","order":0},"item_24":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"type","entityId":6,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->word","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":1,"id":24,"createdAt":"2023-03-11 01:57:43","updatedAt":"2023-03-11 02:49:21"},"item_25":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"max_employee_points","entityId":6,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->randomNumber","nullable":true,"hidden":false,"fillable":true,"defaultValue":"0","index":false,"unique":false,"order":2,"id":25,"createdAt":"2023-03-11 02:08:26","updatedAt":"2023-03-11 02:49:21"},"item_37":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":8,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":37,"createdAt":"2023-03-11 01:49:16","updatedAt":"2023-03-11 02:51:58","order":0},"item_38":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"name","entityId":8,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->name()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":1,"id":38,"createdAt":"2023-03-11 01:49:20","updatedAt":"2023-03-11 02:51:58"},"item_39":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"email","entityId":8,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->unique->email","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":true,"order":2,"id":39,"createdAt":"2023-03-11 01:49:26","updatedAt":"2023-03-11 02:52:03"},"item_40":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"employee_number","entityId":8,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->unique->randomNumber","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":true,"order":3,"id":40,"createdAt":"2023-03-11 01:49:45","updatedAt":"2023-03-11 02:51:58"},"item_47":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"phone","entityId":8,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->phoneNumber","nullable":true,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":4,"id":47,"createdAt":"2023-03-11 02:51:50","updatedAt":"2023-03-11 02:51:58"},"item_41":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"position_id","entityId":8,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":41,"createdAt":"2023-03-11 01:50:08","updatedAt":"2023-03-11 02:51:58","order":5},"item_16":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":5,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":16,"createdAt":"2023-03-11 01:44:46","updatedAt":"2023-03-11 02:49:20","order":0},"item_17":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"name","entityId":5,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->name()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":1,"id":17,"createdAt":"2023-03-11 01:44:50","updatedAt":"2023-03-11 02:49:20"},"item_18":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"phone","entityId":5,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->phoneNumber","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":2,"id":18,"createdAt":"2023-03-11 01:45:06","updatedAt":"2023-03-11 02:49:20"},"item_19":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"email","entityId":5,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->email","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":3,"id":19,"createdAt":"2023-03-11 01:45:18","updatedAt":"2023-03-11 02:49:20"},"item_20":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"employee_number","entityId":5,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->unique->randomNumber","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":true,"order":4,"id":20,"createdAt":"2023-03-11 01:45:30","updatedAt":"2023-03-11 02:49:20"},"item_21":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"position_id","entityId":5,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":21,"createdAt":"2023-03-11 01:48:05","updatedAt":"2023-03-11 02:49:20","order":5},"item_22":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"direct_boss_id","entityId":5,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":22,"createdAt":"2023-03-11 01:50:38","updatedAt":"2023-03-11 02:49:21","order":6},"item_12":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":2,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":12,"createdAt":"2023-03-11 01:47:35","updatedAt":"2023-03-11 02:49:20","order":0},"item_13":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"name","entityId":2,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->name()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":1,"id":13,"createdAt":"2023-03-11 01:47:38","updatedAt":"2023-03-11 02:49:20"},"item_14":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":3,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":14,"createdAt":"2023-03-11 01:53:06","updatedAt":"2023-03-11 02:49:20","order":0},"item_42":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"name","entityId":3,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->name()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":1,"id":42,"createdAt":"2023-03-11 02:50:51","updatedAt":"2023-03-11 02:50:52"},"item_43":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"email","entityId":3,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->unique->email","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":true,"order":2,"id":43,"createdAt":"2023-03-11 02:50:53","updatedAt":"2023-03-11 02:51:03"},"item_45":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"employee_number","entityId":3,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->unique->randomNumber","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":true,"order":3,"id":45,"createdAt":"2023-03-11 02:51:30","updatedAt":"2023-03-11 02:51:36"},"item_46":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"phone","entityId":3,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->phoneNumber","nullable":true,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":4,"id":46,"createdAt":"2023-03-11 02:51:42","updatedAt":"2023-03-11 02:51:45"},"item_15":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":4,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":15,"createdAt":"2023-03-11 01:55:53","updatedAt":"2023-03-11 02:49:20","order":0},"item_48":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"name","entityId":4,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->name()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":1,"id":48,"createdAt":"2023-03-11 02:52:14","updatedAt":"2023-03-11 02:52:16"},"item_49":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"email","entityId":4,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->unique->email","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":true,"order":2,"id":49,"createdAt":"2023-03-11 02:52:17","updatedAt":"2023-03-11 02:52:21"},"item_50":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"employee_number","entityId":4,"type":"unsignedBigInteger","pk":false,"fk":false,"params":{"options":null},"faker":"$faker->unique->randomNumber","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":true,"order":3,"id":50,"createdAt":"2023-03-11 02:52:25","updatedAt":"2023-03-11 02:52:34"},"item_51":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"phone","entityId":4,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->phoneNumber","nullable":true,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"order":4,"id":51,"createdAt":"2023-03-11 02:52:44","updatedAt":"2023-03-11 02:52:49"},"item_1":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"id","entityId":1,"type":"bigIncrements","pk":true,"fk":false,"params":{},"faker":"","nullable":false,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":1,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":0},"item_2":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"name","entityId":1,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->name()","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":2,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":1},"item_3":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"email","entityId":1,"type":"string","pk":false,"fk":false,"params":{},"faker":"$faker->unique->email","nullable":false,"hidden":false,"fillable":true,"defaultValue":null,"index":false,"unique":true,"id":3,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":2},"item_4":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"email_verified_at","entityId":1,"type":"timestamp","pk":false,"fk":false,"params":{},"faker":"now()","nullable":true,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":4,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":3},"item_5":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"password","entityId":1,"type":"string","pk":false,"fk":false,"params":{},"faker":"\\Hash::make('password')","nullable":false,"hidden":true,"fillable":true,"defaultValue":null,"index":false,"unique":false,"id":5,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":4},"item_6":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"remember_token","entityId":1,"type":"string","pk":false,"fk":false,"params":{"size":100},"faker":"Str::random(10)","nullable":true,"hidden":true,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":6,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":5},"item_7":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"two_factor_secret","entityId":1,"type":"text","pk":false,"fk":false,"params":{},"faker":"","nullable":true,"hidden":true,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":7,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":6},"item_8":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"two_factor_recovery_codes","entityId":1,"type":"text","pk":false,"fk":false,"params":{},"faker":"","nullable":true,"hidden":true,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":8,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":7},"item_9":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"two_factor_confirmed_at","entityId":1,"type":"timestamp","pk":false,"fk":false,"params":{},"faker":"","nullable":true,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":9,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":8},"item_10":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"current_team_id","entityId":1,"type":"foreignId","pk":false,"fk":false,"params":{},"faker":"","nullable":true,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":10,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":9},"item_11":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"profile_photo_path","entityId":1,"type":"text","pk":false,"fk":false,"params":{},"faker":"","nullable":true,"hidden":false,"fillable":false,"defaultValue":null,"index":false,"unique":false,"id":11,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 02:49:20","order":10}},"foreigns":{"foreigns":{"count":8,"lastPrimaryKey":8,"index":{"1":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"2":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"3":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"4":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"5":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"6":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"7":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"8":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_8":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":27,"relatedEntityId":8,"relatedFieldId":37,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"application_direct_boss_id_foreign","defaultIndexName":"application_direct_boss_id_foreign","id":8,"createdAt":"2023-03-11 01:51:17","updatedAt":"2023-03-11 02:49:22"},"item_5":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":28,"relatedEntityId":5,"relatedFieldId":16,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"application_employee_id_foreign","defaultIndexName":"application_employee_id_foreign","id":5,"createdAt":"2023-03-11 01:52:00","updatedAt":"2023-03-11 02:49:22"},"item_3":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":29,"relatedEntityId":3,"relatedFieldId":14,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"application_supervisor_committee_id_foreign","defaultIndexName":"application_supervisor_committee_id_foreign","id":3,"createdAt":"2023-03-11 01:54:49","updatedAt":"2023-03-11 02:49:22"},"item_4":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":30,"relatedEntityId":4,"relatedFieldId":15,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"application_technical_committee_id_foreign","defaultIndexName":"application_technical_committee_id_foreign","id":4,"createdAt":"2023-03-11 01:56:11","updatedAt":"2023-03-11 02:49:22"},"item_7":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":31,"relatedEntityId":6,"relatedFieldId":23,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"application_award_id_foreign","defaultIndexName":"application_award_id_foreign","id":7,"createdAt":"2023-03-11 01:59:11","updatedAt":"2023-03-11 02:49:22"},"item_6":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":22,"relatedEntityId":8,"relatedFieldId":37,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"employee_direct_boss_id_foreign","defaultIndexName":"employee_direct_boss_id_foreign","id":6,"createdAt":"2023-03-11 01:50:38","updatedAt":"2023-03-11 02:49:22"},"item_2":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":41,"relatedEntityId":2,"relatedFieldId":12,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"direct_boss_position_id_foreign","defaultIndexName":"direct_boss_position_id_foreign","id":2,"createdAt":"2023-03-11 01:50:08","updatedAt":"2023-03-11 02:49:22"},"item_1":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"","fieldId":21,"relatedEntityId":2,"relatedFieldId":12,"basicRelationshipId":null,"on":"","onTableDelete":"CASCADE","onTableUpdate":"CASCADE","indexName":"employee_position_id_foreign","defaultIndexName":"employee_position_id_foreign","id":1,"createdAt":"2023-03-11 01:48:05","updatedAt":"2023-03-11 02:49:22"}},"inputs":{"inputs":{"count":35,"lastPrimaryKey":45,"index":{"1":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"2":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"3":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"4":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"5":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"6":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"7":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"8":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"9":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"10":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"11":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"12":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"23":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"24":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"25":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"26":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"27":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"28":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"29":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"30":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"31":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"32":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"33":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"34":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"35":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"36":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"37":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"38":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"39":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"40":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"41":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"42":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"43":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"44":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}},"45":{"hasMany":{},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_1":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":27,"relationshipId":15,"relationshipCollectionName":"directBosses","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"directBossesForSelect","name":"direct_boss_id","label":"Direct Boss","placeholder":"Direct Boss","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Direct Boss","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:direct_bosses,id"],"updateValidation":["required","exists:direct_bosses,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":1,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_2":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":28,"relationshipId":10,"relationshipCollectionName":"employees","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"employeesForSelect","name":"employee_id","label":"Employee","placeholder":"Employee","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Employee","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:employees,id"],"updateValidation":["required","exists:employees,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":2,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_3":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":29,"relationshipId":6,"relationshipCollectionName":"supervisorCommittees","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"supervisorCommitteesForSelect","name":"supervisor_committee_id","label":"Supervisor Committee","placeholder":"Supervisor Committee","order":3,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Supervisor Committee","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:supervisor_committees,id"],"updateValidation":["required","exists:supervisor_committees,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":3,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_4":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":30,"relationshipId":7,"relationshipCollectionName":"technicalCommittees","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"technicalCommitteesForSelect","name":"technical_committee_id","label":"Technical Committee","placeholder":"Technical Committee","order":4,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Technical Committee","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:technical_committees,id"],"updateValidation":["required","exists:technical_committees,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":4,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_5":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":31,"relationshipId":13,"relationshipCollectionName":"awards","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"awardsForSelect","name":"award_id","label":"Award","placeholder":"Award","order":5,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Award","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:awards,id"],"updateValidation":["required","exists:awards,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":5,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_6":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":32,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"rank","label":"Rank","placeholder":"Rank","order":6,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":"0","starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","max:255"],"updateValidation":["nullable","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":6,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_7":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":33,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"direct_boss_points","label":"Direct Boss Points","placeholder":"Direct Boss Points","order":7,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":"0","starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","max:255"],"updateValidation":["nullable","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":7,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_8":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":34,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"supervisor_committee_points","label":"Supervisor Committee Points","placeholder":"Supervisor Committee Points","order":8,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":"0","starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","max:255"],"updateValidation":["nullable","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":8,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_9":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":35,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"technical_committee_points","label":"Technical Committee Points","placeholder":"Technical Committee Points","order":9,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":"0","starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","max:255"],"updateValidation":["nullable","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":9,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_10":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":1,"fieldId":36,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"employee_points","label":"Employee Points","placeholder":"Employee Points","order":10,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":"0","starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","max:255"],"updateValidation":["nullable","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":10,"createdAt":"2023-03-11 02:49:27","updatedAt":"2023-03-11 02:49:27"},"item_11":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":2,"fieldId":24,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"type","label":"Type","placeholder":"Type","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":11,"createdAt":"2023-03-11 02:49:30","updatedAt":"2023-03-11 02:49:30"},"item_12":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":2,"fieldId":25,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"max_employee_points","label":"Max Employee Points","placeholder":"Max Employee Points","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":"0","starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","max:255"],"updateValidation":["nullable","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":12,"createdAt":"2023-03-11 02:49:30","updatedAt":"2023-03-11 02:49:30"},"item_23":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":5,"fieldId":13,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"name","label":"Name","placeholder":"Name","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":23,"createdAt":"2023-03-11 02:49:40","updatedAt":"2023-03-11 02:49:40"},"item_24":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":8,"fieldId":2,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"name","label":"Name","placeholder":"Name","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":24,"createdAt":"2023-03-11 02:49:49","updatedAt":"2023-03-11 02:49:49"},"item_25":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":8,"fieldId":3,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"email","label":"Email","placeholder":"Email","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"email","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","unique:users,email","email"],"updateValidation":["required","unique:users,email","email"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":25,"createdAt":"2023-03-11 02:49:49","updatedAt":"2023-03-11 02:49:49"},"item_26":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":8,"fieldId":5,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"password","label":"Password","placeholder":"Password","order":3,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"password","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required"],"updateValidation":["nullable"],"onCreate":true,"onUpdate":true,"onShow":false,"onIndex":false,"onForms":true,"dependentSelectId":null,"id":26,"createdAt":"2023-03-11 02:49:49","updatedAt":"2023-03-11 02:49:49"},"item_27":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":9,"fieldId":38,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"name","label":"Name","placeholder":"Name","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":27,"createdAt":"2023-03-11 02:53:26","updatedAt":"2023-03-11 02:53:26"},"item_28":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":9,"fieldId":39,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"email","label":"Email","placeholder":"Email","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"email","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","unique:direct_bosses,email","email"],"updateValidation":["required","unique:direct_bosses,email","email"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":28,"createdAt":"2023-03-11 02:53:26","updatedAt":"2023-03-11 02:53:26"},"item_29":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":9,"fieldId":40,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"employee_number","label":"Employee Number","placeholder":"Employee Number","order":3,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","unique:direct_bosses,employee_number","max:255"],"updateValidation":["required","unique:direct_bosses,employee_number","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":29,"createdAt":"2023-03-11 02:53:26","updatedAt":"2023-03-11 02:53:26"},"item_30":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":9,"fieldId":47,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"phone","label":"Phone","placeholder":"Phone","order":4,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","max:255","string"],"updateValidation":["nullable","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":30,"createdAt":"2023-03-11 02:53:26","updatedAt":"2023-03-11 02:53:26"},"item_31":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":9,"fieldId":41,"relationshipId":3,"relationshipCollectionName":"positions","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"positionsForSelect","name":"position_id","label":"Position","placeholder":"Position","order":5,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Position","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:positions,id"],"updateValidation":["required","exists:positions,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":31,"createdAt":"2023-03-11 02:53:26","updatedAt":"2023-03-11 02:53:26"},"item_32":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":10,"fieldId":17,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"name","label":"Name","placeholder":"Name","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":32,"createdAt":"2023-03-11 02:53:28","updatedAt":"2023-03-11 02:53:28"},"item_33":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":10,"fieldId":18,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"phone","label":"Phone","placeholder":"Phone","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":33,"createdAt":"2023-03-11 02:53:28","updatedAt":"2023-03-11 02:53:28"},"item_34":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":10,"fieldId":19,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"email","label":"Email","placeholder":"Email","order":3,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"email","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","email"],"updateValidation":["required","email"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":34,"createdAt":"2023-03-11 02:53:28","updatedAt":"2023-03-11 02:53:28"},"item_35":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":10,"fieldId":20,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"employee_number","label":"Employee Number","placeholder":"Employee Number","order":4,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","unique:employees,employee_number","max:255"],"updateValidation":["required","unique:employees,employee_number","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":35,"createdAt":"2023-03-11 02:53:28","updatedAt":"2023-03-11 02:53:28"},"item_36":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":10,"fieldId":21,"relationshipId":1,"relationshipCollectionName":"positions","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"positionsForSelect","name":"position_id","label":"Position","placeholder":"Position","order":5,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Position","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:positions,id"],"updateValidation":["required","exists:positions,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":36,"createdAt":"2023-03-11 02:53:28","updatedAt":"2023-03-11 02:53:28"},"item_37":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":10,"fieldId":22,"relationshipId":11,"relationshipCollectionName":"directBosses","foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":"directBossesForSelect","name":"direct_boss_id","label":"Direct Boss","placeholder":"Direct Boss","order":6,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"Please select the Direct Boss","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"select","checked":false,"max":null,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","exists:direct_bosses,id"],"updateValidation":["required","exists:direct_bosses,id"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":37,"createdAt":"2023-03-11 02:53:28","updatedAt":"2023-03-11 02:53:28"},"item_38":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":11,"fieldId":42,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"name","label":"Name","placeholder":"Name","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":38,"createdAt":"2023-03-11 02:53:32","updatedAt":"2023-03-11 02:53:32"},"item_39":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":11,"fieldId":43,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"email","label":"Email","placeholder":"Email","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"email","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","unique:supervisor_committees,email","email"],"updateValidation":["required","unique:supervisor_committees,email","email"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":39,"createdAt":"2023-03-11 02:53:32","updatedAt":"2023-03-11 02:53:32"},"item_40":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":11,"fieldId":45,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"employee_number","label":"Employee Number","placeholder":"Employee Number","order":3,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","unique:supervisor_committees,employee_number","max:255"],"updateValidation":["required","unique:supervisor_committees,employee_number","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":40,"createdAt":"2023-03-11 02:53:32","updatedAt":"2023-03-11 02:53:32"},"item_41":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":11,"fieldId":46,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"phone","label":"Phone","placeholder":"Phone","order":4,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","max:255","string"],"updateValidation":["nullable","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":41,"createdAt":"2023-03-11 02:53:32","updatedAt":"2023-03-11 02:53:32"},"item_42":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":12,"fieldId":48,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"name","label":"Name","placeholder":"Name","order":1,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","max:255","string"],"updateValidation":["required","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":42,"createdAt":"2023-03-11 02:53:34","updatedAt":"2023-03-11 02:53:34"},"item_43":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":12,"fieldId":49,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"email","label":"Email","placeholder":"Email","order":2,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"email","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","unique:technical_committees,email","email"],"updateValidation":["required","unique:technical_committees,email","email"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":43,"createdAt":"2023-03-11 02:53:34","updatedAt":"2023-03-11 02:53:34"},"item_44":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":12,"fieldId":50,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"employee_number","label":"Employee Number","placeholder":"Employee Number","order":3,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["required","unique:technical_committees,employee_number","max:255"],"updateValidation":["required","unique:technical_committees,employee_number","max:255"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":44,"createdAt":"2023-03-11 02:53:34","updatedAt":"2023-03-11 02:53:34"},"item_45":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"crudId":12,"fieldId":51,"relationshipId":null,"relationshipCollectionName":null,"foreignId":null,"foreignCollectionName":null,"livewireSelectVariableName":null,"name":"phone","label":"Phone","placeholder":"Phone","order":4,"cols":12,"colsMedium":12,"colsLarge":12,"readOnly":false,"required":true,"defaultValue":null,"starterOptionText":"","isComputed":false,"computedFormula":null,"showComputedOnLivewireForm":false,"livewireInputReference":null,"type":"text","checked":false,"max":255,"min":null,"step":null,"items":[],"dependentSelectItems":{},"validation":["nullable","max:255","string"],"updateValidation":["nullable","max:255","string"],"onCreate":true,"onUpdate":true,"onShow":true,"onIndex":true,"onForms":true,"dependentSelectId":null,"id":45,"createdAt":"2023-03-11 02:53:34","updatedAt":"2023-03-11 02:53:34"}},"projects":{"projects":{"count":1,"lastPrimaryKey":1,"index":{"1":{"hasMany":{"entities.projectId":[6,2,3,4,1,7,8,5],"cruds.projectId":[1,2,5,8,9,10,11,12]},"hasOne":{},"belongsTo":{},"belongsToMany":{}}},"additionalIndexes":{},"items":[],"relations":[],"reladbVersion":"0.3.1"},"item_1":{"__returnRelationsAutomatically":true,"__saveDataToStorage":true,"__onUpdateListener":null,"__customEventsEnabled":false,"name":"Ideal employee award [Imported]","url":"http://localhost:8000","mode":"draft","folder":"/var/www/tmp-idol","authModelId":1,"tenancyModelId":null,"settings":{"cssFramework":"bootstrap","theme":"default","uiTemplate":"laravel_ui","mutateDatesToCarbon":true,"authModel":null,"massAssignment":"fillable","validationMode":"array","routesMode":"resource","viewsFormMode":"blade","modelsFolder":"/Models","policiesFolder":"/Policies","servicesFolder":"/Services","requestsFolder":"/Http/Requests","controllersFolder":"/Http/Controllers","apiControllersFolder":"/Http/Controllers/Api","viewsFolder":"/resources/views/app","controllerNameMode":"singular","schemaZoom":0.6000000000000001,"schemaScrollTop":4398.4619140625,"schemaScrollLeft":4404.61572265625,"turbolinks":true,"modules":[]},"codeSettings":{"options":{"forceGeneration":false,"deleteRemovedModules":true},"base":{"migrations":true,"models":true,"policies":true,"factories":true,"seeders":true,"routes":true,"apiRoutes":true,"apiSanctumAuth":true},"cruds":{"1":{"crudId":1,"name":"Applications","requests":true,"controller":true,"views":true,"tests":true,"api":true},"2":{"crudId":2,"name":"Awards","requests":true,"controller":true,"views":true,"tests":true,"api":true},"5":{"crudId":5,"name":"Positions","requests":true,"controller":true,"views":true,"tests":true,"api":true},"8":{"crudId":8,"name":"Users","requests":true,"controller":true,"views":true,"tests":true,"api":true},"9":{"crudId":9,"name":"Direct Bosses","requests":true,"controller":true,"views":true,"tests":true,"api":true},"10":{"crudId":10,"name":"Employees","requests":true,"controller":true,"views":true,"tests":true,"api":true},"11":{"crudId":11,"name":"Supervisor Committees","requests":true,"controller":true,"views":true,"tests":true,"api":true},"12":{"crudId":12,"name":"Technical Committees","requests":true,"controller":true,"views":true,"tests":true,"api":true}},"modules":{"permissionsApi":true,"permissions":true,"uiTemplate":true},"generationCommands":{"checkDependencies":false,"gitClone":true,"composerInstall":true,"storageLink":true,"npmInstall":false,"compileAssets":false},"runCommands":{"compileAssets":true,"migrate":false,"serve":true,"openBrowser":true}},"connection":{"type":"mysql","host":"127.0.0.1","port":3306,"database":"ideal-employee-award","username":"user","password":"User@123"},"modules":["auth","permissions","multiTenancy"],"version":"1.2.2","laravelVersion":9,"repositoryUrl":null,"repositoryBranch":null,"files":{".env":{"deleteOnGeneration":true,"content":"APP_NAME=\"Ideal employee award [Imported]\"\nAPP_ENV=local\nAPP_KEY=base64:pzwiQV2Q0O3VZ/vKbYrCOX9/hGBh5R2m6ESMnlorVXY=\nAPP_DEBUG=true\nAPP_URL=http://localhost:8000\n\nLOG_CHANNEL=stack\nLOG_DEPRECATIONS_CHANNEL=null\nLOG_LEVEL=debug\n\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=ideal-employee-award\nDB_USERNAME=user\nDB_PASSWORD=\"User@123\"\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=file\nFILESYSTEM_DISK=local\nQUEUE_CONNECTION=sync\nSESSION_DRIVER=database\nSESSION_LIFETIME=120\nMEMCACHED_HOST=127.0.0.1\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_MAILER=smtp\nMAIL_HOST=mailpit\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\nMAIL_FROM_ADDRESS=\"hello@example.com\"\nMAIL_FROM_NAME=\"${APP_NAME}\"\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\nAWS_USE_PATH_STYLE_ENDPOINT=false\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\nPUSHER_HOST=\nPUSHER_PORT=443\nPUSHER_SCHEME=https\nPUSHER_APP_CLUSTER=mt1\nVITE_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\"\nVITE_PUSHER_HOST=\"${PUSHER_HOST}\"\nVITE_PUSHER_PORT=\"${PUSHER_PORT}\"\nVITE_PUSHER_SCHEME=\"${PUSHER_SCHEME}\"\nVITE_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\"\n","module":"base","path":".env"},"/app/Providers/AuthServiceProvider.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n     * The policy mappings for the application.\n     *\n     * @var array\n     */\n    protected $policies = [\n        // 'App\\Models\\Model' => 'App\\Policies\\ModelPolicy',\n    ];\n\n    /**\n     * Register any authentication / authorization services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        // Automatically finding the Policies\n        Gate::guessPolicyNamesUsing(function ($modelClass) {\n            return 'App\\\\Policies\\\\' . class_basename($modelClass) . 'Policy';\n        });\n\n        $this->registerPolicies();\n\n        // Implicitly grant \"Super Admin\" role all permission checks using can()\n        Gate::before(function ($user, $ability) {\n            if ($user->isSuperAdmin()) {\n                return true;\n            }\n        });\n    }\n}\n","module":"base","path":"/app/Providers/AuthServiceProvider.php"},"/app/Providers/AppServiceProvider.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Pagination\\Paginator;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        Paginator::useBootstrap();\n    }\n\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        //\n    }\n}\n","module":"base","path":"/app/Providers/AppServiceProvider.php"},"/config/auth.php":{"deleteOnGeneration":true,"content":"<?php\n\nreturn [\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Defaults\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default authentication \"guard\" and password\n    | reset options for your application. You may change these defaults\n    | as required, but they're a perfect start for most applications.\n    |\n    */\n\n    'defaults' => [\n        'guard' => 'web',\n        'passwords' => 'users',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Guards\n    |--------------------------------------------------------------------------\n    |\n    | Next, you may define every authentication guard for your application.\n    | Of course, a great default configuration has been defined for you\n    | here which uses session storage and the Eloquent user provider.\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | Supported: \"session\", \"token\"\n    |\n    */\n\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n\n        'api' => [\n            'driver' => 'token',\n            'provider' => 'users',\n            'hash' => false,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | User Providers\n    |--------------------------------------------------------------------------\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | If you have multiple user tables or models you may configure multiple\n    | sources which represent each model / table. These sources may then\n    | be assigned to any extra authentication guards you have defined.\n    |\n    | Supported: \"database\", \"eloquent\"\n    |\n    */\n\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => App\\Models\\User::class,\n        ],\n\n        // 'users' => [\n        //     'driver' => 'database',\n        //     'table' => 'users',\n        // ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Resetting Passwords\n    |--------------------------------------------------------------------------\n    |\n    | You may specify multiple password reset configurations if you have more\n    | than one user table or model in the application and you want to have\n    | separate password reset settings based on the specific user types.\n    |\n    | The expire time is the number of minutes that the reset token should be\n    | considered valid. This security feature keeps tokens short-lived so\n    | they have less time to be guessed. You may change this as needed.\n    |\n    */\n\n    'passwords' => [\n        'users' => [\n            'provider' => 'users',\n            'table' => 'password_resets',\n            'expire' => 60,\n            'throttle' => 60,\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Password Confirmation Timeout\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define the amount of seconds before a password confirmation\n    | times out and the user is prompted to re-enter their password via the\n    | confirmation screen. By default, the timeout lasts for three hours.\n    |\n    */\n\n    'password_timeout' => 10800,\n];\n","module":"base","path":"/config/auth.php"},"/app/Http/Controllers/Controller.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Foundation\\Bus\\DispatchesJobs;\nuse Illuminate\\Routing\\Controller as BaseController;\nuse Illuminate\\Foundation\\Validation\\ValidatesRequests;\nuse Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests;\n\nclass Controller extends BaseController\n{\n    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;\n}\n","module":"base","path":"/app/Http/Controllers/Controller.php"},"/app/Http/Requests/ApplicationStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass ApplicationStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'direct_boss_id' => ['required', 'exists:direct_bosses,id'],\n            'employee_id' => ['required', 'exists:employees,id'],\n            'supervisor_committee_id' => [\n                'required',\n                'exists:supervisor_committees,id',\n            ],\n            'technical_committee_id' => [\n                'required',\n                'exists:technical_committees,id',\n            ],\n            'award_id' => ['required', 'exists:awards,id'],\n            'rank' => ['nullable', 'max:255'],\n            'direct_boss_points' => ['nullable', 'max:255'],\n            'supervisor_committee_points' => ['nullable', 'max:255'],\n            'technical_committee_points' => ['nullable', 'max:255'],\n            'employee_points' => ['nullable', 'max:255'],\n        ];\n    }\n}\n","module":"crud:1","path":"/app/Http/Requests/ApplicationStoreRequest.php"},"/app/Http/Requests/ApplicationUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass ApplicationUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'direct_boss_id' => ['required', 'exists:direct_bosses,id'],\n            'employee_id' => ['required', 'exists:employees,id'],\n            'supervisor_committee_id' => [\n                'required',\n                'exists:supervisor_committees,id',\n            ],\n            'technical_committee_id' => [\n                'required',\n                'exists:technical_committees,id',\n            ],\n            'award_id' => ['required', 'exists:awards,id'],\n            'rank' => ['nullable', 'max:255'],\n            'direct_boss_points' => ['nullable', 'max:255'],\n            'supervisor_committee_points' => ['nullable', 'max:255'],\n            'technical_committee_points' => ['nullable', 'max:255'],\n            'employee_points' => ['nullable', 'max:255'],\n        ];\n    }\n}\n","module":"crud:1","path":"/app/Http/Requests/ApplicationUpdateRequest.php"},"/app/Http/Controllers/ApplicationController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Award;\nuse App\\Models\\Employee;\nuse App\\Models\\DirectBoss;\nuse App\\Models\\Application;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\TechnicalCommittee;\nuse App\\Models\\SupervisorCommittee;\nuse App\\Http\\Requests\\ApplicationStoreRequest;\nuse App\\Http\\Requests\\ApplicationUpdateRequest;\n\nclass ApplicationController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Application::class);\n\n        $search = $request->get('search', '');\n\n        $applications = Application::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view(\n            'app.applications.index',\n            compact('applications', 'search')\n        );\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Application::class);\n\n        $directBosses = DirectBoss::pluck('name', 'id');\n        $employees = Employee::pluck('name', 'id');\n        $supervisorCommittees = SupervisorCommittee::pluck('name', 'id');\n        $technicalCommittees = TechnicalCommittee::pluck('name', 'id');\n        $awards = Award::pluck('type', 'id');\n\n        return view(\n            'app.applications.create',\n            compact(\n                'directBosses',\n                'employees',\n                'supervisorCommittees',\n                'technicalCommittees',\n                'awards'\n            )\n        );\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\ApplicationStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(ApplicationStoreRequest $request)\n    {\n        $this->authorize('create', Application::class);\n\n        $validated = $request->validated();\n\n        $application = Application::create($validated);\n\n        return redirect()\n            ->route('applications.edit', $application)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Application $application\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Application $application)\n    {\n        $this->authorize('view', $application);\n\n        return view('app.applications.show', compact('application'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Application $application\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Application $application)\n    {\n        $this->authorize('update', $application);\n\n        $directBosses = DirectBoss::pluck('name', 'id');\n        $employees = Employee::pluck('name', 'id');\n        $supervisorCommittees = SupervisorCommittee::pluck('name', 'id');\n        $technicalCommittees = TechnicalCommittee::pluck('name', 'id');\n        $awards = Award::pluck('type', 'id');\n\n        return view(\n            'app.applications.edit',\n            compact(\n                'application',\n                'directBosses',\n                'employees',\n                'supervisorCommittees',\n                'technicalCommittees',\n                'awards'\n            )\n        );\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\ApplicationUpdateRequest $request\n     * @param \\App\\Models\\Application $application\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        ApplicationUpdateRequest $request,\n        Application $application\n    ) {\n        $this->authorize('update', $application);\n\n        $validated = $request->validated();\n\n        $application->update($validated);\n\n        return redirect()\n            ->route('applications.edit', $application)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Application $application\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Application $application)\n    {\n        $this->authorize('delete', $application);\n\n        $application->delete();\n\n        return redirect()\n            ->route('applications.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:1","path":"/app/Http/Controllers/ApplicationController.php"},"/tests/Feature/Controllers/ApplicationControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Application;\n\nuse App\\Models\\Award;\nuse App\\Models\\Employee;\nuse App\\Models\\DirectBoss;\nuse App\\Models\\TechnicalCommittee;\nuse App\\Models\\SupervisorCommittee;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass ApplicationControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_applications()\n    {\n        $applications = Application::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('applications.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.applications.index')\n            ->assertViewHas('applications');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_application()\n    {\n        $response = $this->get(route('applications.create'));\n\n        $response->assertOk()->assertViewIs('app.applications.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_application()\n    {\n        $data = Application::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('applications.store'), $data);\n\n        $this->assertDatabaseHas('applications', $data);\n\n        $application = Application::latest('id')->first();\n\n        $response->assertRedirect(route('applications.edit', $application));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_application()\n    {\n        $application = Application::factory()->create();\n\n        $response = $this->get(route('applications.show', $application));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.applications.show')\n            ->assertViewHas('application');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_application()\n    {\n        $application = Application::factory()->create();\n\n        $response = $this->get(route('applications.edit', $application));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.applications.edit')\n            ->assertViewHas('application');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_application()\n    {\n        $application = Application::factory()->create();\n\n        $directBoss = DirectBoss::factory()->create();\n        $employee = Employee::factory()->create();\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n        $award = Award::factory()->create();\n\n        $data = [\n            'rank' => $this->faker->randomNumber,\n            'direct_boss_points' => $this->faker->randomNumber,\n            'supervisor_committee_points' => $this->faker->randomNumber,\n            'technical_committee_points' => $this->faker->randomNumber,\n            'employee_points' => $this->faker->randomNumber,\n            'direct_boss_id' => $directBoss->id,\n            'employee_id' => $employee->id,\n            'supervisor_committee_id' => $supervisorCommittee->id,\n            'technical_committee_id' => $technicalCommittee->id,\n            'award_id' => $award->id,\n        ];\n\n        $response = $this->put(\n            route('applications.update', $application),\n            $data\n        );\n\n        $data['id'] = $application->id;\n\n        $this->assertDatabaseHas('applications', $data);\n\n        $response->assertRedirect(route('applications.edit', $application));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_application()\n    {\n        $application = Application::factory()->create();\n\n        $response = $this->delete(route('applications.destroy', $application));\n\n        $response->assertRedirect(route('applications.index'));\n\n        $this->assertModelMissing($application);\n    }\n}\n","module":"crud:1","path":"/tests/Feature/Controllers/ApplicationControllerTest.php"},"/resources/views/app/applications/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('applications.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.applications.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('applications.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.applications.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('applications.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:1","path":"/resources/views/app/applications/create.blade.php"},"/resources/views/app/applications/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('applications.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.applications.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('applications.update', $application) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.applications.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('applications.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('applications.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:1","path":"/resources/views/app/applications/edit.blade.php"},"/resources/views/app/applications/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($application) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select name=\"direct_boss_id\" label=\"Direct Boss\" required>\n            @php $selected = old('direct_boss_id', ($editing ? $application->direct_boss_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Direct Boss</option>\n            @foreach($directBosses as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select name=\"employee_id\" label=\"Employee\" required>\n            @php $selected = old('employee_id', ($editing ? $application->employee_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Employee</option>\n            @foreach($employees as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select\n            name=\"supervisor_committee_id\"\n            label=\"Supervisor Committee\"\n            required\n        >\n            @php $selected = old('supervisor_committee_id', ($editing ? $application->supervisor_committee_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Supervisor Committee</option>\n            @foreach($supervisorCommittees as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select\n            name=\"technical_committee_id\"\n            label=\"Technical Committee\"\n            required\n        >\n            @php $selected = old('technical_committee_id', ($editing ? $application->technical_committee_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Technical Committee</option>\n            @foreach($technicalCommittees as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select name=\"award_id\" label=\"Award\" required>\n            @php $selected = old('award_id', ($editing ? $application->award_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Award</option>\n            @foreach($awards as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"rank\"\n            label=\"Rank\"\n            :value=\"old('rank', ($editing ? $application->rank : '0'))\"\n            maxlength=\"255\"\n            placeholder=\"Rank\"\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"direct_boss_points\"\n            label=\"Direct Boss Points\"\n            :value=\"old('direct_boss_points', ($editing ? $application->direct_boss_points : '0'))\"\n            maxlength=\"255\"\n            placeholder=\"Direct Boss Points\"\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"supervisor_committee_points\"\n            label=\"Supervisor Committee Points\"\n            :value=\"old('supervisor_committee_points', ($editing ? $application->supervisor_committee_points : '0'))\"\n            maxlength=\"255\"\n            placeholder=\"Supervisor Committee Points\"\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"technical_committee_points\"\n            label=\"Technical Committee Points\"\n            :value=\"old('technical_committee_points', ($editing ? $application->technical_committee_points : '0'))\"\n            maxlength=\"255\"\n            placeholder=\"Technical Committee Points\"\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"employee_points\"\n            label=\"Employee Points\"\n            :value=\"old('employee_points', ($editing ? $application->employee_points : '0'))\"\n            maxlength=\"255\"\n            placeholder=\"Employee Points\"\n        ></x-inputs.text>\n    </x-inputs.group>\n</div>\n","module":"crud:1","path":"/resources/views/app/applications/form-inputs.blade.php"},"/resources/views/app/applications/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('applications.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.applications.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.applications.inputs.direct_boss_id')</h5>\n                    <span\n                        >{{ optional($application->directBoss)->name ?? '-'\n                        }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.applications.inputs.employee_id')</h5>\n                    <span\n                        >{{ optional($application->employee)->name ?? '-'\n                        }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>\n                        @lang('crud.applications.inputs.supervisor_committee_id')\n                    </h5>\n                    <span\n                        >{{ optional($application->supervisorCommittee)->name ??\n                        '-' }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>\n                        @lang('crud.applications.inputs.technical_committee_id')\n                    </h5>\n                    <span\n                        >{{ optional($application->technicalCommittee)->name ??\n                        '-' }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.applications.inputs.award_id')</h5>\n                    <span\n                        >{{ optional($application->award)->type ?? '-' }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.applications.inputs.rank')</h5>\n                    <span>{{ $application->rank ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>\n                        @lang('crud.applications.inputs.direct_boss_points')\n                    </h5>\n                    <span>{{ $application->direct_boss_points ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>\n                        @lang('crud.applications.inputs.supervisor_committee_points')\n                    </h5>\n                    <span\n                        >{{ $application->supervisor_committee_points ?? '-'\n                        }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>\n                        @lang('crud.applications.inputs.technical_committee_points')\n                    </h5>\n                    <span\n                        >{{ $application->technical_committee_points ?? '-'\n                        }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.applications.inputs.employee_points')</h5>\n                    <span>{{ $application->employee_points ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a\n                    href=\"{{ route('applications.index') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Application::class)\n                <a\n                    href=\"{{ route('applications.create') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:1","path":"/resources/views/app/applications/show.blade.php"},"/resources/views/app/applications/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">\n                    @lang('crud.applications.index_title')\n                </h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\Application::class)\n                        <a\n                            href=\"{{ route('applications.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.direct_boss_id')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.employee_id')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.supervisor_committee_id')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.technical_committee_id')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.award_id')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.rank')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.direct_boss_points')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.supervisor_committee_points')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.technical_committee_points')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.applications.inputs.employee_points')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($applications as $application)\n                        <tr>\n                            <td>\n                                {{ optional($application->directBoss)->name ??\n                                '-' }}\n                            </td>\n                            <td>\n                                {{ optional($application->employee)->name ?? '-'\n                                }}\n                            </td>\n                            <td>\n                                {{\n                                optional($application->supervisorCommittee)->name\n                                ?? '-' }}\n                            </td>\n                            <td>\n                                {{\n                                optional($application->technicalCommittee)->name\n                                ?? '-' }}\n                            </td>\n                            <td>\n                                {{ optional($application->award)->type ?? '-' }}\n                            </td>\n                            <td>{{ $application->rank ?? '-' }}</td>\n                            <td>\n                                {{ $application->direct_boss_points ?? '-' }}\n                            </td>\n                            <td>\n                                {{ $application->supervisor_committee_points ??\n                                '-' }}\n                            </td>\n                            <td>\n                                {{ $application->technical_committee_points ??\n                                '-' }}\n                            </td>\n                            <td>{{ $application->employee_points ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $application)\n                                    <a\n                                        href=\"{{ route('applications.edit', $application) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $application)\n                                    <a\n                                        href=\"{{ route('applications.show', $application) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $application)\n                                    <form\n                                        action=\"{{ route('applications.destroy', $application) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"11\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"11\">\n                                {!! $applications->render() !!}\n                            </td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:1","path":"/resources/views/app/applications/index.blade.php"},"/app/Http/Requests/AwardStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass AwardStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'type' => ['required', 'max:255', 'string'],\n            'max_employee_points' => ['nullable', 'max:255'],\n        ];\n    }\n}\n","module":"crud:2","path":"/app/Http/Requests/AwardStoreRequest.php"},"/app/Http/Requests/AwardUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass AwardUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'type' => ['required', 'max:255', 'string'],\n            'max_employee_points' => ['nullable', 'max:255'],\n        ];\n    }\n}\n","module":"crud:2","path":"/app/Http/Requests/AwardUpdateRequest.php"},"/app/Http/Controllers/AwardController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Award;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\AwardStoreRequest;\nuse App\\Http\\Requests\\AwardUpdateRequest;\n\nclass AwardController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Award::class);\n\n        $search = $request->get('search', '');\n\n        $awards = Award::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view('app.awards.index', compact('awards', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Award::class);\n\n        return view('app.awards.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\AwardStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(AwardStoreRequest $request)\n    {\n        $this->authorize('create', Award::class);\n\n        $validated = $request->validated();\n\n        $award = Award::create($validated);\n\n        return redirect()\n            ->route('awards.edit', $award)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Award $award\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Award $award)\n    {\n        $this->authorize('view', $award);\n\n        return view('app.awards.show', compact('award'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Award $award\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Award $award)\n    {\n        $this->authorize('update', $award);\n\n        return view('app.awards.edit', compact('award'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\AwardUpdateRequest $request\n     * @param \\App\\Models\\Award $award\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(AwardUpdateRequest $request, Award $award)\n    {\n        $this->authorize('update', $award);\n\n        $validated = $request->validated();\n\n        $award->update($validated);\n\n        return redirect()\n            ->route('awards.edit', $award)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Award $award\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Award $award)\n    {\n        $this->authorize('delete', $award);\n\n        $award->delete();\n\n        return redirect()\n            ->route('awards.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:2","path":"/app/Http/Controllers/AwardController.php"},"/tests/Feature/Controllers/AwardControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Award;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass AwardControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_awards()\n    {\n        $awards = Award::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('awards.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.awards.index')\n            ->assertViewHas('awards');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_award()\n    {\n        $response = $this->get(route('awards.create'));\n\n        $response->assertOk()->assertViewIs('app.awards.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_award()\n    {\n        $data = Award::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('awards.store'), $data);\n\n        $this->assertDatabaseHas('awards', $data);\n\n        $award = Award::latest('id')->first();\n\n        $response->assertRedirect(route('awards.edit', $award));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_award()\n    {\n        $award = Award::factory()->create();\n\n        $response = $this->get(route('awards.show', $award));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.awards.show')\n            ->assertViewHas('award');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_award()\n    {\n        $award = Award::factory()->create();\n\n        $response = $this->get(route('awards.edit', $award));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.awards.edit')\n            ->assertViewHas('award');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_award()\n    {\n        $award = Award::factory()->create();\n\n        $data = [\n            'type' => $this->faker->word,\n            'max_employee_points' => $this->faker->randomNumber,\n        ];\n\n        $response = $this->put(route('awards.update', $award), $data);\n\n        $data['id'] = $award->id;\n\n        $this->assertDatabaseHas('awards', $data);\n\n        $response->assertRedirect(route('awards.edit', $award));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_award()\n    {\n        $award = Award::factory()->create();\n\n        $response = $this->delete(route('awards.destroy', $award));\n\n        $response->assertRedirect(route('awards.index'));\n\n        $this->assertModelMissing($award);\n    }\n}\n","module":"crud:2","path":"/tests/Feature/Controllers/AwardControllerTest.php"},"/resources/views/app/awards/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('awards.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.awards.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('awards.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.awards.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('awards.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:2","path":"/resources/views/app/awards/create.blade.php"},"/resources/views/app/awards/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('awards.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.awards.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('awards.update', $award) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.awards.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('awards.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('awards.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:2","path":"/resources/views/app/awards/edit.blade.php"},"/resources/views/app/awards/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($award) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"type\"\n            label=\"Type\"\n            :value=\"old('type', ($editing ? $award->type : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Type\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"max_employee_points\"\n            label=\"Max Employee Points\"\n            :value=\"old('max_employee_points', ($editing ? $award->max_employee_points : '0'))\"\n            maxlength=\"255\"\n            placeholder=\"Max Employee Points\"\n        ></x-inputs.text>\n    </x-inputs.group>\n</div>\n","module":"crud:2","path":"/resources/views/app/awards/form-inputs.blade.php"},"/resources/views/app/awards/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('awards.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.awards.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.awards.inputs.type')</h5>\n                    <span>{{ $award->type ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.awards.inputs.max_employee_points')</h5>\n                    <span>{{ $award->max_employee_points ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('awards.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Award::class)\n                <a href=\"{{ route('awards.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:2","path":"/resources/views/app/awards/show.blade.php"},"/resources/views/app/awards/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.awards.index_title')</h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\Award::class)\n                        <a\n                            href=\"{{ route('awards.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.awards.inputs.type')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.awards.inputs.max_employee_points')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($awards as $award)\n                        <tr>\n                            <td>{{ $award->type ?? '-' }}</td>\n                            <td>{{ $award->max_employee_points ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $award)\n                                    <a\n                                        href=\"{{ route('awards.edit', $award) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $award)\n                                    <a\n                                        href=\"{{ route('awards.show', $award) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $award)\n                                    <form\n                                        action=\"{{ route('awards.destroy', $award) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"3\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"3\">{!! $awards->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:2","path":"/resources/views/app/awards/index.blade.php"},"/app/Http/Requests/PositionStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass PositionStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n","module":"crud:5","path":"/app/Http/Requests/PositionStoreRequest.php"},"/app/Http/Requests/PositionUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass PositionUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n        ];\n    }\n}\n","module":"crud:5","path":"/app/Http/Requests/PositionUpdateRequest.php"},"/app/Http/Controllers/PositionController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Position;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\PositionStoreRequest;\nuse App\\Http\\Requests\\PositionUpdateRequest;\n\nclass PositionController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Position::class);\n\n        $search = $request->get('search', '');\n\n        $positions = Position::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view('app.positions.index', compact('positions', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Position::class);\n\n        return view('app.positions.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\PositionStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(PositionStoreRequest $request)\n    {\n        $this->authorize('create', Position::class);\n\n        $validated = $request->validated();\n\n        $position = Position::create($validated);\n\n        return redirect()\n            ->route('positions.edit', $position)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Position $position)\n    {\n        $this->authorize('view', $position);\n\n        return view('app.positions.show', compact('position'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Position $position)\n    {\n        $this->authorize('update', $position);\n\n        return view('app.positions.edit', compact('position'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\PositionUpdateRequest $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(PositionUpdateRequest $request, Position $position)\n    {\n        $this->authorize('update', $position);\n\n        $validated = $request->validated();\n\n        $position->update($validated);\n\n        return redirect()\n            ->route('positions.edit', $position)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Position $position)\n    {\n        $this->authorize('delete', $position);\n\n        $position->delete();\n\n        return redirect()\n            ->route('positions.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:5","path":"/app/Http/Controllers/PositionController.php"},"/tests/Feature/Controllers/PositionControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Position;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass PositionControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_positions()\n    {\n        $positions = Position::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('positions.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.positions.index')\n            ->assertViewHas('positions');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_position()\n    {\n        $response = $this->get(route('positions.create'));\n\n        $response->assertOk()->assertViewIs('app.positions.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_position()\n    {\n        $data = Position::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('positions.store'), $data);\n\n        $this->assertDatabaseHas('positions', $data);\n\n        $position = Position::latest('id')->first();\n\n        $response->assertRedirect(route('positions.edit', $position));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_position()\n    {\n        $position = Position::factory()->create();\n\n        $response = $this->get(route('positions.show', $position));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.positions.show')\n            ->assertViewHas('position');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_position()\n    {\n        $position = Position::factory()->create();\n\n        $response = $this->get(route('positions.edit', $position));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.positions.edit')\n            ->assertViewHas('position');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_position()\n    {\n        $position = Position::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n        ];\n\n        $response = $this->put(route('positions.update', $position), $data);\n\n        $data['id'] = $position->id;\n\n        $this->assertDatabaseHas('positions', $data);\n\n        $response->assertRedirect(route('positions.edit', $position));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_position()\n    {\n        $position = Position::factory()->create();\n\n        $response = $this->delete(route('positions.destroy', $position));\n\n        $response->assertRedirect(route('positions.index'));\n\n        $this->assertModelMissing($position);\n    }\n}\n","module":"crud:5","path":"/tests/Feature/Controllers/PositionControllerTest.php"},"/resources/views/app/positions/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('positions.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.positions.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('positions.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.positions.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('positions.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:5","path":"/resources/views/app/positions/create.blade.php"},"/resources/views/app/positions/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('positions.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.positions.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('positions.update', $position) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.positions.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('positions.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('positions.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:5","path":"/resources/views/app/positions/edit.blade.php"},"/resources/views/app/positions/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($position) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $position->name : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Name\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n</div>\n","module":"crud:5","path":"/resources/views/app/positions/form-inputs.blade.php"},"/resources/views/app/positions/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('positions.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.positions.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.positions.inputs.name')</h5>\n                    <span>{{ $position->name ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('positions.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Position::class)\n                <a href=\"{{ route('positions.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:5","path":"/resources/views/app/positions/show.blade.php"},"/resources/views/app/positions/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.positions.index_title')</h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\Position::class)\n                        <a\n                            href=\"{{ route('positions.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.positions.inputs.name')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($positions as $position)\n                        <tr>\n                            <td>{{ $position->name ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $position)\n                                    <a\n                                        href=\"{{ route('positions.edit', $position) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $position)\n                                    <a\n                                        href=\"{{ route('positions.show', $position) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $position)\n                                    <form\n                                        action=\"{{ route('positions.destroy', $position) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"2\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"2\">{!! $positions->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:5","path":"/resources/views/app/positions/index.blade.php"},"/app/Http/Requests/UserStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UserStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'unique:users,email', 'email'],\n            'password' => ['required'],\n            'roles' => 'array',\n        ];\n    }\n}\n","module":"crud:8","path":"/app/Http/Requests/UserStoreRequest.php"},"/app/Http/Requests/UserUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UserUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => [\n                'required',\n                Rule::unique('users', 'email')->ignore($this->user),\n                'email',\n            ],\n            'password' => ['nullable'],\n            'roles' => 'array',\n        ];\n    }\n}\n","module":"crud:8","path":"/app/Http/Requests/UserUpdateRequest.php"},"/app/Http/Controllers/UserController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Spatie\\Permission\\Models\\Role;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Http\\Requests\\UserStoreRequest;\nuse App\\Http\\Requests\\UserUpdateRequest;\n\nclass UserController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', User::class);\n\n        $search = $request->get('search', '');\n\n        $users = User::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view('app.users.index', compact('users', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', User::class);\n\n        $roles = Role::get();\n\n        return view('app.users.create', compact('roles'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\UserStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(UserStoreRequest $request)\n    {\n        $this->authorize('create', User::class);\n\n        $validated = $request->validated();\n\n        $validated['password'] = Hash::make($validated['password']);\n\n        $user = User::create($validated);\n\n        $user->syncRoles($request->roles);\n\n        return redirect()\n            ->route('users.edit', $user)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, User $user)\n    {\n        $this->authorize('view', $user);\n\n        return view('app.users.show', compact('user'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, User $user)\n    {\n        $this->authorize('update', $user);\n\n        $roles = Role::get();\n\n        return view('app.users.edit', compact('user', 'roles'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\UserUpdateRequest $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(UserUpdateRequest $request, User $user)\n    {\n        $this->authorize('update', $user);\n\n        $validated = $request->validated();\n\n        if (empty($validated['password'])) {\n            unset($validated['password']);\n        } else {\n            $validated['password'] = Hash::make($validated['password']);\n        }\n\n        $user->update($validated);\n\n        $user->syncRoles($request->roles);\n\n        return redirect()\n            ->route('users.edit', $user)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, User $user)\n    {\n        $this->authorize('delete', $user);\n\n        $user->delete();\n\n        return redirect()\n            ->route('users.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:8","path":"/app/Http/Controllers/UserController.php"},"/tests/Feature/Controllers/UserControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass UserControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_users()\n    {\n        $users = User::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('users.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.users.index')\n            ->assertViewHas('users');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_user()\n    {\n        $response = $this->get(route('users.create'));\n\n        $response->assertOk()->assertViewIs('app.users.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_user()\n    {\n        $data = User::factory()\n            ->make()\n            ->toArray();\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->post(route('users.store'), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n        unset($data['two_factor_confirmed_at']);\n        unset($data['current_team_id']);\n        unset($data['profile_photo_path']);\n\n        $this->assertDatabaseHas('users', $data);\n\n        $user = User::latest('id')->first();\n\n        $response->assertRedirect(route('users.edit', $user));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_user()\n    {\n        $user = User::factory()->create();\n\n        $response = $this->get(route('users.show', $user));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.users.show')\n            ->assertViewHas('user');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_user()\n    {\n        $user = User::factory()->create();\n\n        $response = $this->get(route('users.edit', $user));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.users.edit')\n            ->assertViewHas('user');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_user()\n    {\n        $user = User::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n        ];\n\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->put(route('users.update', $user), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n        unset($data['two_factor_confirmed_at']);\n        unset($data['current_team_id']);\n        unset($data['profile_photo_path']);\n\n        $data['id'] = $user->id;\n\n        $this->assertDatabaseHas('users', $data);\n\n        $response->assertRedirect(route('users.edit', $user));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_user()\n    {\n        $user = User::factory()->create();\n\n        $response = $this->delete(route('users.destroy', $user));\n\n        $response->assertRedirect(route('users.index'));\n\n        $this->assertModelMissing($user);\n    }\n}\n","module":"crud:8","path":"/tests/Feature/Controllers/UserControllerTest.php"},"/resources/views/app/users/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('users.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.users.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('users.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.users.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('users.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:8","path":"/resources/views/app/users/create.blade.php"},"/resources/views/app/users/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('users.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.users.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('users.update', $user) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.users.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('users.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a href=\"{{ route('users.create') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:8","path":"/resources/views/app/users/edit.blade.php"},"/resources/views/app/users/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($user) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $user->name : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Name\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.email\n            name=\"email\"\n            label=\"Email\"\n            :value=\"old('email', ($editing ? $user->email : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Email\"\n            required\n        ></x-inputs.email>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.password\n            name=\"password\"\n            label=\"Password\"\n            maxlength=\"255\"\n            placeholder=\"Password\"\n            :required=\"!$editing\"\n        ></x-inputs.password>\n    </x-inputs.group>\n\n    <div class=\"form-group col-sm-12 mt-4\">\n        <h4>Assign @lang('crud.roles.name')</h4>\n\n        @foreach ($roles as $role)\n        <div>\n            <x-inputs.checkbox\n                id=\"role{{ $role->id }}\"\n                name=\"roles[]\"\n                label=\"{{ ucfirst($role->name) }}\"\n                value=\"{{ $role->id }}\"\n                :checked=\"isset($user) ? $user->hasRole($role) : false\"\n                :add-hidden-value=\"false\"\n            ></x-inputs.checkbox>\n        </div>\n        @endforeach\n    </div>\n</div>\n","module":"crud:8","path":"/resources/views/app/users/form-inputs.blade.php"},"/resources/views/app/users/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('users.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.users.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.users.inputs.name')</h5>\n                    <span>{{ $user->name ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.users.inputs.email')</h5>\n                    <span>{{ $user->email ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.roles.name')</h5>\n                    <div>\n                        @forelse ($user->roles as $role)\n                        <div class=\"badge badge-primary\">{{ $role->name }}</div>\n                        <br />\n                        @empty - @endforelse\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('users.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\User::class)\n                <a href=\"{{ route('users.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:8","path":"/resources/views/app/users/show.blade.php"},"/resources/views/app/users/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.users.index_title')</h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\User::class)\n                        <a\n                            href=\"{{ route('users.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.users.inputs.name')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.users.inputs.email')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($users as $user)\n                        <tr>\n                            <td>{{ $user->name ?? '-' }}</td>\n                            <td>{{ $user->email ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $user)\n                                    <a href=\"{{ route('users.edit', $user) }}\">\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $user)\n                                    <a href=\"{{ route('users.show', $user) }}\">\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $user)\n                                    <form\n                                        action=\"{{ route('users.destroy', $user) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"3\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"3\">{!! $users->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:8","path":"/resources/views/app/users/index.blade.php"},"/app/Http/Requests/DirectBossStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass DirectBossStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'unique:direct_bosses,email', 'email'],\n            'employee_number' => [\n                'required',\n                'unique:direct_bosses,employee_number',\n                'max:255',\n            ],\n            'phone' => ['nullable', 'max:255', 'string'],\n            'position_id' => ['required', 'exists:positions,id'],\n        ];\n    }\n}\n","module":"crud:9","path":"/app/Http/Requests/DirectBossStoreRequest.php"},"/app/Http/Requests/DirectBossUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass DirectBossUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => [\n                'required',\n                Rule::unique('direct_bosses', 'email')->ignore(\n                    $this->directBoss\n                ),\n                'email',\n            ],\n            'employee_number' => [\n                'required',\n                Rule::unique('direct_bosses', 'employee_number')->ignore(\n                    $this->directBoss\n                ),\n                'max:255',\n            ],\n            'phone' => ['nullable', 'max:255', 'string'],\n            'position_id' => ['required', 'exists:positions,id'],\n        ];\n    }\n}\n","module":"crud:9","path":"/app/Http/Requests/DirectBossUpdateRequest.php"},"/app/Http/Controllers/DirectBossController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Position;\nuse App\\Models\\DirectBoss;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\DirectBossStoreRequest;\nuse App\\Http\\Requests\\DirectBossUpdateRequest;\n\nclass DirectBossController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', DirectBoss::class);\n\n        $search = $request->get('search', '');\n\n        $directBosses = DirectBoss::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view(\n            'app.direct_bosses.index',\n            compact('directBosses', 'search')\n        );\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', DirectBoss::class);\n\n        $positions = Position::pluck('name', 'id');\n\n        return view('app.direct_bosses.create', compact('positions'));\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\DirectBossStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(DirectBossStoreRequest $request)\n    {\n        $this->authorize('create', DirectBoss::class);\n\n        $validated = $request->validated();\n\n        $directBoss = DirectBoss::create($validated);\n\n        return redirect()\n            ->route('direct-bosses.edit', $directBoss)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, DirectBoss $directBoss)\n    {\n        $this->authorize('view', $directBoss);\n\n        return view('app.direct_bosses.show', compact('directBoss'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, DirectBoss $directBoss)\n    {\n        $this->authorize('update', $directBoss);\n\n        $positions = Position::pluck('name', 'id');\n\n        return view(\n            'app.direct_bosses.edit',\n            compact('directBoss', 'positions')\n        );\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\DirectBossUpdateRequest $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        DirectBossUpdateRequest $request,\n        DirectBoss $directBoss\n    ) {\n        $this->authorize('update', $directBoss);\n\n        $validated = $request->validated();\n\n        $directBoss->update($validated);\n\n        return redirect()\n            ->route('direct-bosses.edit', $directBoss)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, DirectBoss $directBoss)\n    {\n        $this->authorize('delete', $directBoss);\n\n        $directBoss->delete();\n\n        return redirect()\n            ->route('direct-bosses.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:9","path":"/app/Http/Controllers/DirectBossController.php"},"/tests/Feature/Controllers/DirectBossControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\DirectBoss;\n\nuse App\\Models\\Position;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DirectBossControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_direct_bosses()\n    {\n        $directBosses = DirectBoss::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('direct-bosses.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.direct_bosses.index')\n            ->assertViewHas('directBosses');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_direct_boss()\n    {\n        $response = $this->get(route('direct-bosses.create'));\n\n        $response->assertOk()->assertViewIs('app.direct_bosses.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_direct_boss()\n    {\n        $data = DirectBoss::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('direct-bosses.store'), $data);\n\n        $this->assertDatabaseHas('direct_bosses', $data);\n\n        $directBoss = DirectBoss::latest('id')->first();\n\n        $response->assertRedirect(route('direct-bosses.edit', $directBoss));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_direct_boss()\n    {\n        $directBoss = DirectBoss::factory()->create();\n\n        $response = $this->get(route('direct-bosses.show', $directBoss));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.direct_bosses.show')\n            ->assertViewHas('directBoss');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_direct_boss()\n    {\n        $directBoss = DirectBoss::factory()->create();\n\n        $response = $this->get(route('direct-bosses.edit', $directBoss));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.direct_bosses.edit')\n            ->assertViewHas('directBoss');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_direct_boss()\n    {\n        $directBoss = DirectBoss::factory()->create();\n\n        $position = Position::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'phone' => $this->faker->phoneNumber,\n            'position_id' => $position->id,\n        ];\n\n        $response = $this->put(\n            route('direct-bosses.update', $directBoss),\n            $data\n        );\n\n        $data['id'] = $directBoss->id;\n\n        $this->assertDatabaseHas('direct_bosses', $data);\n\n        $response->assertRedirect(route('direct-bosses.edit', $directBoss));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_direct_boss()\n    {\n        $directBoss = DirectBoss::factory()->create();\n\n        $response = $this->delete(route('direct-bosses.destroy', $directBoss));\n\n        $response->assertRedirect(route('direct-bosses.index'));\n\n        $this->assertModelMissing($directBoss);\n    }\n}\n","module":"crud:9","path":"/tests/Feature/Controllers/DirectBossControllerTest.php"},"/resources/views/app/direct_bosses/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('direct-bosses.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.direct_bosses.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('direct-bosses.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.direct_bosses.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('direct-bosses.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:9","path":"/resources/views/app/direct_bosses/create.blade.php"},"/resources/views/app/direct_bosses/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('direct-bosses.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.direct_bosses.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('direct-bosses.update', $directBoss) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.direct_bosses.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('direct-bosses.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('direct-bosses.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:9","path":"/resources/views/app/direct_bosses/edit.blade.php"},"/resources/views/app/direct_bosses/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($directBoss) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $directBoss->name : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Name\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.email\n            name=\"email\"\n            label=\"Email\"\n            :value=\"old('email', ($editing ? $directBoss->email : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Email\"\n            required\n        ></x-inputs.email>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"employee_number\"\n            label=\"Employee Number\"\n            :value=\"old('employee_number', ($editing ? $directBoss->employee_number : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Employee Number\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"phone\"\n            label=\"Phone\"\n            :value=\"old('phone', ($editing ? $directBoss->phone : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Phone\"\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select name=\"position_id\" label=\"Position\" required>\n            @php $selected = old('position_id', ($editing ? $directBoss->position_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Position</option>\n            @foreach($positions as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n</div>\n","module":"crud:9","path":"/resources/views/app/direct_bosses/form-inputs.blade.php"},"/resources/views/app/direct_bosses/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('direct-bosses.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.direct_bosses.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.direct_bosses.inputs.name')</h5>\n                    <span>{{ $directBoss->name ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.direct_bosses.inputs.email')</h5>\n                    <span>{{ $directBoss->email ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.direct_bosses.inputs.employee_number')</h5>\n                    <span>{{ $directBoss->employee_number ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.direct_bosses.inputs.phone')</h5>\n                    <span>{{ $directBoss->phone ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.direct_bosses.inputs.position_id')</h5>\n                    <span\n                        >{{ optional($directBoss->position)->name ?? '-'\n                        }}</span\n                    >\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a\n                    href=\"{{ route('direct-bosses.index') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\DirectBoss::class)\n                <a\n                    href=\"{{ route('direct-bosses.create') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:9","path":"/resources/views/app/direct_bosses/show.blade.php"},"/resources/views/app/direct_bosses/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">\n                    @lang('crud.direct_bosses.index_title')\n                </h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\DirectBoss::class)\n                        <a\n                            href=\"{{ route('direct-bosses.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.direct_bosses.inputs.name')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.direct_bosses.inputs.email')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.direct_bosses.inputs.employee_number')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.direct_bosses.inputs.phone')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.direct_bosses.inputs.position_id')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($directBosses as $directBoss)\n                        <tr>\n                            <td>{{ $directBoss->name ?? '-' }}</td>\n                            <td>{{ $directBoss->email ?? '-' }}</td>\n                            <td>{{ $directBoss->employee_number ?? '-' }}</td>\n                            <td>{{ $directBoss->phone ?? '-' }}</td>\n                            <td>\n                                {{ optional($directBoss->position)->name ?? '-'\n                                }}\n                            </td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $directBoss)\n                                    <a\n                                        href=\"{{ route('direct-bosses.edit', $directBoss) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $directBoss)\n                                    <a\n                                        href=\"{{ route('direct-bosses.show', $directBoss) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $directBoss)\n                                    <form\n                                        action=\"{{ route('direct-bosses.destroy', $directBoss) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"6\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"6\">{!! $directBosses->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:9","path":"/resources/views/app/direct_bosses/index.blade.php"},"/app/Http/Requests/EmployeeStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass EmployeeStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'phone' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'email'],\n            'employee_number' => [\n                'required',\n                'unique:employees,employee_number',\n                'max:255',\n            ],\n            'position_id' => ['required', 'exists:positions,id'],\n            'direct_boss_id' => ['required', 'exists:direct_bosses,id'],\n        ];\n    }\n}\n","module":"crud:10","path":"/app/Http/Requests/EmployeeStoreRequest.php"},"/app/Http/Requests/EmployeeUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass EmployeeUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'phone' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'email'],\n            'employee_number' => [\n                'required',\n                Rule::unique('employees', 'employee_number')->ignore(\n                    $this->employee\n                ),\n                'max:255',\n            ],\n            'position_id' => ['required', 'exists:positions,id'],\n            'direct_boss_id' => ['required', 'exists:direct_bosses,id'],\n        ];\n    }\n}\n","module":"crud:10","path":"/app/Http/Requests/EmployeeUpdateRequest.php"},"/app/Http/Controllers/EmployeeController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Employee;\nuse App\\Models\\Position;\nuse App\\Models\\DirectBoss;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests\\EmployeeStoreRequest;\nuse App\\Http\\Requests\\EmployeeUpdateRequest;\n\nclass EmployeeController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Employee::class);\n\n        $search = $request->get('search', '');\n\n        $employees = Employee::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view('app.employees.index', compact('employees', 'search'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', Employee::class);\n\n        $positions = Position::pluck('name', 'id');\n        $directBosses = DirectBoss::pluck('name', 'id');\n\n        return view(\n            'app.employees.create',\n            compact('positions', 'directBosses')\n        );\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\EmployeeStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(EmployeeStoreRequest $request)\n    {\n        $this->authorize('create', Employee::class);\n\n        $validated = $request->validated();\n\n        $employee = Employee::create($validated);\n\n        return redirect()\n            ->route('employees.edit', $employee)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Employee $employee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Employee $employee)\n    {\n        $this->authorize('view', $employee);\n\n        return view('app.employees.show', compact('employee'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Employee $employee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Request $request, Employee $employee)\n    {\n        $this->authorize('update', $employee);\n\n        $positions = Position::pluck('name', 'id');\n        $directBosses = DirectBoss::pluck('name', 'id');\n\n        return view(\n            'app.employees.edit',\n            compact('employee', 'positions', 'directBosses')\n        );\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\EmployeeUpdateRequest $request\n     * @param \\App\\Models\\Employee $employee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(EmployeeUpdateRequest $request, Employee $employee)\n    {\n        $this->authorize('update', $employee);\n\n        $validated = $request->validated();\n\n        $employee->update($validated);\n\n        return redirect()\n            ->route('employees.edit', $employee)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Employee $employee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Employee $employee)\n    {\n        $this->authorize('delete', $employee);\n\n        $employee->delete();\n\n        return redirect()\n            ->route('employees.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:10","path":"/app/Http/Controllers/EmployeeController.php"},"/tests/Feature/Controllers/EmployeeControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\Employee;\n\nuse App\\Models\\Position;\nuse App\\Models\\DirectBoss;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass EmployeeControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_employees()\n    {\n        $employees = Employee::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('employees.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.employees.index')\n            ->assertViewHas('employees');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_employee()\n    {\n        $response = $this->get(route('employees.create'));\n\n        $response->assertOk()->assertViewIs('app.employees.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_employee()\n    {\n        $data = Employee::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('employees.store'), $data);\n\n        $this->assertDatabaseHas('employees', $data);\n\n        $employee = Employee::latest('id')->first();\n\n        $response->assertRedirect(route('employees.edit', $employee));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_employee()\n    {\n        $employee = Employee::factory()->create();\n\n        $response = $this->get(route('employees.show', $employee));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.employees.show')\n            ->assertViewHas('employee');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_employee()\n    {\n        $employee = Employee::factory()->create();\n\n        $response = $this->get(route('employees.edit', $employee));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.employees.edit')\n            ->assertViewHas('employee');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_employee()\n    {\n        $employee = Employee::factory()->create();\n\n        $position = Position::factory()->create();\n        $directBoss = DirectBoss::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'phone' => $this->faker->phoneNumber,\n            'email' => $this->faker->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'position_id' => $position->id,\n            'direct_boss_id' => $directBoss->id,\n        ];\n\n        $response = $this->put(route('employees.update', $employee), $data);\n\n        $data['id'] = $employee->id;\n\n        $this->assertDatabaseHas('employees', $data);\n\n        $response->assertRedirect(route('employees.edit', $employee));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_employee()\n    {\n        $employee = Employee::factory()->create();\n\n        $response = $this->delete(route('employees.destroy', $employee));\n\n        $response->assertRedirect(route('employees.index'));\n\n        $this->assertModelMissing($employee);\n    }\n}\n","module":"crud:10","path":"/tests/Feature/Controllers/EmployeeControllerTest.php"},"/resources/views/app/employees/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('employees.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.employees.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('employees.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.employees.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('employees.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:10","path":"/resources/views/app/employees/create.blade.php"},"/resources/views/app/employees/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('employees.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.employees.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('employees.update', $employee) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.employees.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('employees.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('employees.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:10","path":"/resources/views/app/employees/edit.blade.php"},"/resources/views/app/employees/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($employee) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $employee->name : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Name\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"phone\"\n            label=\"Phone\"\n            :value=\"old('phone', ($editing ? $employee->phone : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Phone\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.email\n            name=\"email\"\n            label=\"Email\"\n            :value=\"old('email', ($editing ? $employee->email : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Email\"\n            required\n        ></x-inputs.email>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"employee_number\"\n            label=\"Employee Number\"\n            :value=\"old('employee_number', ($editing ? $employee->employee_number : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Employee Number\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select name=\"position_id\" label=\"Position\" required>\n            @php $selected = old('position_id', ($editing ? $employee->position_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Position</option>\n            @foreach($positions as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.select name=\"direct_boss_id\" label=\"Direct Boss\" required>\n            @php $selected = old('direct_boss_id', ($editing ? $employee->direct_boss_id : '')) @endphp\n            <option disabled {{ empty($selected) ? 'selected' : '' }}>Please select the Direct Boss</option>\n            @foreach($directBosses as $value => $label)\n            <option value=\"{{ $value }}\" {{ $selected == $value ? 'selected' : '' }} >{{ $label }}</option>\n            @endforeach\n        </x-inputs.select>\n    </x-inputs.group>\n</div>\n","module":"crud:10","path":"/resources/views/app/employees/form-inputs.blade.php"},"/resources/views/app/employees/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('employees.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.employees.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.employees.inputs.name')</h5>\n                    <span>{{ $employee->name ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.employees.inputs.phone')</h5>\n                    <span>{{ $employee->phone ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.employees.inputs.email')</h5>\n                    <span>{{ $employee->email ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.employees.inputs.employee_number')</h5>\n                    <span>{{ $employee->employee_number ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.employees.inputs.position_id')</h5>\n                    <span\n                        >{{ optional($employee->position)->name ?? '-' }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.employees.inputs.direct_boss_id')</h5>\n                    <span\n                        >{{ optional($employee->directBoss)->name ?? '-'\n                        }}</span\n                    >\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('employees.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Employee::class)\n                <a href=\"{{ route('employees.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:10","path":"/resources/views/app/employees/show.blade.php"},"/resources/views/app/employees/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.employees.index_title')</h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\Employee::class)\n                        <a\n                            href=\"{{ route('employees.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.employees.inputs.name')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.employees.inputs.phone')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.employees.inputs.email')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.employees.inputs.employee_number')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.employees.inputs.position_id')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.employees.inputs.direct_boss_id')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($employees as $employee)\n                        <tr>\n                            <td>{{ $employee->name ?? '-' }}</td>\n                            <td>{{ $employee->phone ?? '-' }}</td>\n                            <td>{{ $employee->email ?? '-' }}</td>\n                            <td>{{ $employee->employee_number ?? '-' }}</td>\n                            <td>\n                                {{ optional($employee->position)->name ?? '-' }}\n                            </td>\n                            <td>\n                                {{ optional($employee->directBoss)->name ?? '-'\n                                }}\n                            </td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $employee)\n                                    <a\n                                        href=\"{{ route('employees.edit', $employee) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $employee)\n                                    <a\n                                        href=\"{{ route('employees.show', $employee) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $employee)\n                                    <form\n                                        action=\"{{ route('employees.destroy', $employee) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"7\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"7\">{!! $employees->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:10","path":"/resources/views/app/employees/index.blade.php"},"/app/Http/Requests/SupervisorCommitteeStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass SupervisorCommitteeStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => [\n                'required',\n                'unique:supervisor_committees,email',\n                'email',\n            ],\n            'employee_number' => [\n                'required',\n                'unique:supervisor_committees,employee_number',\n                'max:255',\n            ],\n            'phone' => ['nullable', 'max:255', 'string'],\n        ];\n    }\n}\n","module":"crud:11","path":"/app/Http/Requests/SupervisorCommitteeStoreRequest.php"},"/app/Http/Requests/SupervisorCommitteeUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass SupervisorCommitteeUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => [\n                'required',\n                Rule::unique('supervisor_committees', 'email')->ignore(\n                    $this->supervisorCommittee\n                ),\n                'email',\n            ],\n            'employee_number' => [\n                'required',\n                Rule::unique(\n                    'supervisor_committees',\n                    'employee_number'\n                )->ignore($this->supervisorCommittee),\n                'max:255',\n            ],\n            'phone' => ['nullable', 'max:255', 'string'],\n        ];\n    }\n}\n","module":"crud:11","path":"/app/Http/Requests/SupervisorCommitteeUpdateRequest.php"},"/app/Http/Controllers/SupervisorCommitteeController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\SupervisorCommittee;\nuse App\\Http\\Requests\\SupervisorCommitteeStoreRequest;\nuse App\\Http\\Requests\\SupervisorCommitteeUpdateRequest;\n\nclass SupervisorCommitteeController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', SupervisorCommittee::class);\n\n        $search = $request->get('search', '');\n\n        $supervisorCommittees = SupervisorCommittee::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view(\n            'app.supervisor_committees.index',\n            compact('supervisorCommittees', 'search')\n        );\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', SupervisorCommittee::class);\n\n        return view('app.supervisor_committees.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\SupervisorCommitteeStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(SupervisorCommitteeStoreRequest $request)\n    {\n        $this->authorize('create', SupervisorCommittee::class);\n\n        $validated = $request->validated();\n\n        $supervisorCommittee = SupervisorCommittee::create($validated);\n\n        return redirect()\n            ->route('supervisor-committees.edit', $supervisorCommittee)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\SupervisorCommittee $supervisorCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(\n        Request $request,\n        SupervisorCommittee $supervisorCommittee\n    ) {\n        $this->authorize('view', $supervisorCommittee);\n\n        return view(\n            'app.supervisor_committees.show',\n            compact('supervisorCommittee')\n        );\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\SupervisorCommittee $supervisorCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(\n        Request $request,\n        SupervisorCommittee $supervisorCommittee\n    ) {\n        $this->authorize('update', $supervisorCommittee);\n\n        return view(\n            'app.supervisor_committees.edit',\n            compact('supervisorCommittee')\n        );\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\SupervisorCommitteeUpdateRequest $request\n     * @param \\App\\Models\\SupervisorCommittee $supervisorCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        SupervisorCommitteeUpdateRequest $request,\n        SupervisorCommittee $supervisorCommittee\n    ) {\n        $this->authorize('update', $supervisorCommittee);\n\n        $validated = $request->validated();\n\n        $supervisorCommittee->update($validated);\n\n        return redirect()\n            ->route('supervisor-committees.edit', $supervisorCommittee)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\SupervisorCommittee $supervisorCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        SupervisorCommittee $supervisorCommittee\n    ) {\n        $this->authorize('delete', $supervisorCommittee);\n\n        $supervisorCommittee->delete();\n\n        return redirect()\n            ->route('supervisor-committees.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:11","path":"/app/Http/Controllers/SupervisorCommitteeController.php"},"/tests/Feature/Controllers/SupervisorCommitteeControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\SupervisorCommittee;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass SupervisorCommitteeControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_supervisor_committees()\n    {\n        $supervisorCommittees = SupervisorCommittee::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('supervisor-committees.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.supervisor_committees.index')\n            ->assertViewHas('supervisorCommittees');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_supervisor_committee()\n    {\n        $response = $this->get(route('supervisor-committees.create'));\n\n        $response->assertOk()->assertViewIs('app.supervisor_committees.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_supervisor_committee()\n    {\n        $data = SupervisorCommittee::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('supervisor-committees.store'), $data);\n\n        $this->assertDatabaseHas('supervisor_committees', $data);\n\n        $supervisorCommittee = SupervisorCommittee::latest('id')->first();\n\n        $response->assertRedirect(\n            route('supervisor-committees.edit', $supervisorCommittee)\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_supervisor_committee()\n    {\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n\n        $response = $this->get(\n            route('supervisor-committees.show', $supervisorCommittee)\n        );\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.supervisor_committees.show')\n            ->assertViewHas('supervisorCommittee');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_supervisor_committee()\n    {\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n\n        $response = $this->get(\n            route('supervisor-committees.edit', $supervisorCommittee)\n        );\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.supervisor_committees.edit')\n            ->assertViewHas('supervisorCommittee');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_supervisor_committee()\n    {\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'phone' => $this->faker->phoneNumber,\n        ];\n\n        $response = $this->put(\n            route('supervisor-committees.update', $supervisorCommittee),\n            $data\n        );\n\n        $data['id'] = $supervisorCommittee->id;\n\n        $this->assertDatabaseHas('supervisor_committees', $data);\n\n        $response->assertRedirect(\n            route('supervisor-committees.edit', $supervisorCommittee)\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_supervisor_committee()\n    {\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n\n        $response = $this->delete(\n            route('supervisor-committees.destroy', $supervisorCommittee)\n        );\n\n        $response->assertRedirect(route('supervisor-committees.index'));\n\n        $this->assertModelMissing($supervisorCommittee);\n    }\n}\n","module":"crud:11","path":"/tests/Feature/Controllers/SupervisorCommitteeControllerTest.php"},"/resources/views/app/supervisor_committees/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a\n                    href=\"{{ route('supervisor-committees.index') }}\"\n                    class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.supervisor_committees.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('supervisor-committees.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.supervisor_committees.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('supervisor-committees.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:11","path":"/resources/views/app/supervisor_committees/create.blade.php"},"/resources/views/app/supervisor_committees/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a\n                    href=\"{{ route('supervisor-committees.index') }}\"\n                    class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.supervisor_committees.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('supervisor-committees.update', $supervisorCommittee) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.supervisor_committees.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('supervisor-committees.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('supervisor-committees.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:11","path":"/resources/views/app/supervisor_committees/edit.blade.php"},"/resources/views/app/supervisor_committees/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($supervisorCommittee) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $supervisorCommittee->name : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Name\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.email\n            name=\"email\"\n            label=\"Email\"\n            :value=\"old('email', ($editing ? $supervisorCommittee->email : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Email\"\n            required\n        ></x-inputs.email>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"employee_number\"\n            label=\"Employee Number\"\n            :value=\"old('employee_number', ($editing ? $supervisorCommittee->employee_number : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Employee Number\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"phone\"\n            label=\"Phone\"\n            :value=\"old('phone', ($editing ? $supervisorCommittee->phone : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Phone\"\n        ></x-inputs.text>\n    </x-inputs.group>\n</div>\n","module":"crud:11","path":"/resources/views/app/supervisor_committees/form-inputs.blade.php"},"/resources/views/app/supervisor_committees/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a\n                    href=\"{{ route('supervisor-committees.index') }}\"\n                    class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.supervisor_committees.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.supervisor_committees.inputs.name')</h5>\n                    <span>{{ $supervisorCommittee->name ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.supervisor_committees.inputs.email')</h5>\n                    <span>{{ $supervisorCommittee->email ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>\n                        @lang('crud.supervisor_committees.inputs.employee_number')\n                    </h5>\n                    <span\n                        >{{ $supervisorCommittee->employee_number ?? '-'\n                        }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.supervisor_committees.inputs.phone')</h5>\n                    <span>{{ $supervisorCommittee->phone ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a\n                    href=\"{{ route('supervisor-committees.index') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\SupervisorCommittee::class)\n                <a\n                    href=\"{{ route('supervisor-committees.create') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:11","path":"/resources/views/app/supervisor_committees/show.blade.php"},"/resources/views/app/supervisor_committees/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">\n                    @lang('crud.supervisor_committees.index_title')\n                </h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\SupervisorCommittee::class)\n                        <a\n                            href=\"{{ route('supervisor-committees.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.supervisor_committees.inputs.name')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.supervisor_committees.inputs.email')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.supervisor_committees.inputs.employee_number')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.supervisor_committees.inputs.phone')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($supervisorCommittees as $supervisorCommittee)\n                        <tr>\n                            <td>{{ $supervisorCommittee->name ?? '-' }}</td>\n                            <td>{{ $supervisorCommittee->email ?? '-' }}</td>\n                            <td>\n                                {{ $supervisorCommittee->employee_number ?? '-'\n                                }}\n                            </td>\n                            <td>{{ $supervisorCommittee->phone ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $supervisorCommittee)\n                                    <a\n                                        href=\"{{ route('supervisor-committees.edit', $supervisorCommittee) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $supervisorCommittee)\n                                    <a\n                                        href=\"{{ route('supervisor-committees.show', $supervisorCommittee) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $supervisorCommittee)\n                                    <form\n                                        action=\"{{ route('supervisor-committees.destroy', $supervisorCommittee) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"5\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"5\">\n                                {!! $supervisorCommittees->render() !!}\n                            </td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:11","path":"/resources/views/app/supervisor_committees/index.blade.php"},"/app/Http/Requests/TechnicalCommitteeStoreRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass TechnicalCommitteeStoreRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => [\n                'required',\n                'unique:technical_committees,email',\n                'email',\n            ],\n            'employee_number' => [\n                'required',\n                'unique:technical_committees,employee_number',\n                'max:255',\n            ],\n            'phone' => ['nullable', 'max:255', 'string'],\n        ];\n    }\n}\n","module":"crud:12","path":"/app/Http/Requests/TechnicalCommitteeStoreRequest.php"},"/app/Http/Requests/TechnicalCommitteeUpdateRequest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass TechnicalCommitteeUpdateRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     *\n     * @return bool\n     */\n    public function authorize()\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array\n     */\n    public function rules()\n    {\n        return [\n            'name' => ['required', 'max:255', 'string'],\n            'email' => [\n                'required',\n                Rule::unique('technical_committees', 'email')->ignore(\n                    $this->technicalCommittee\n                ),\n                'email',\n            ],\n            'employee_number' => [\n                'required',\n                Rule::unique('technical_committees', 'employee_number')->ignore(\n                    $this->technicalCommittee\n                ),\n                'max:255',\n            ],\n            'phone' => ['nullable', 'max:255', 'string'],\n        ];\n    }\n}\n","module":"crud:12","path":"/app/Http/Requests/TechnicalCommitteeUpdateRequest.php"},"/app/Http/Controllers/TechnicalCommitteeController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\TechnicalCommittee;\nuse App\\Http\\Requests\\TechnicalCommitteeStoreRequest;\nuse App\\Http\\Requests\\TechnicalCommitteeUpdateRequest;\n\nclass TechnicalCommitteeController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', TechnicalCommittee::class);\n\n        $search = $request->get('search', '');\n\n        $technicalCommittees = TechnicalCommittee::search($search)\n            ->latest()\n            ->paginate(5)\n            ->withQueryString();\n\n        return view(\n            'app.technical_committees.index',\n            compact('technicalCommittees', 'search')\n        );\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create(Request $request)\n    {\n        $this->authorize('create', TechnicalCommittee::class);\n\n        return view('app.technical_committees.create');\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\TechnicalCommitteeStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(TechnicalCommitteeStoreRequest $request)\n    {\n        $this->authorize('create', TechnicalCommittee::class);\n\n        $validated = $request->validated();\n\n        $technicalCommittee = TechnicalCommittee::create($validated);\n\n        return redirect()\n            ->route('technical-committees.edit', $technicalCommittee)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\TechnicalCommittee $technicalCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(\n        Request $request,\n        TechnicalCommittee $technicalCommittee\n    ) {\n        $this->authorize('view', $technicalCommittee);\n\n        return view(\n            'app.technical_committees.show',\n            compact('technicalCommittee')\n        );\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\TechnicalCommittee $technicalCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(\n        Request $request,\n        TechnicalCommittee $technicalCommittee\n    ) {\n        $this->authorize('update', $technicalCommittee);\n\n        return view(\n            'app.technical_committees.edit',\n            compact('technicalCommittee')\n        );\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\TechnicalCommitteeUpdateRequest $request\n     * @param \\App\\Models\\TechnicalCommittee $technicalCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        TechnicalCommitteeUpdateRequest $request,\n        TechnicalCommittee $technicalCommittee\n    ) {\n        $this->authorize('update', $technicalCommittee);\n\n        $validated = $request->validated();\n\n        $technicalCommittee->update($validated);\n\n        return redirect()\n            ->route('technical-committees.edit', $technicalCommittee)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\TechnicalCommittee $technicalCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        TechnicalCommittee $technicalCommittee\n    ) {\n        $this->authorize('delete', $technicalCommittee);\n\n        $technicalCommittee->delete();\n\n        return redirect()\n            ->route('technical-committees.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"crud:12","path":"/app/Http/Controllers/TechnicalCommitteeController.php"},"/tests/Feature/Controllers/TechnicalCommitteeControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse App\\Models\\TechnicalCommittee;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass TechnicalCommitteeControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(\n            User::factory()->create(['email' => 'admin@admin.com'])\n        );\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_technical_committees()\n    {\n        $technicalCommittees = TechnicalCommittee::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->get(route('technical-committees.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.technical_committees.index')\n            ->assertViewHas('technicalCommittees');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_technical_committee()\n    {\n        $response = $this->get(route('technical-committees.create'));\n\n        $response->assertOk()->assertViewIs('app.technical_committees.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_technical_committee()\n    {\n        $data = TechnicalCommittee::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->post(route('technical-committees.store'), $data);\n\n        $this->assertDatabaseHas('technical_committees', $data);\n\n        $technicalCommittee = TechnicalCommittee::latest('id')->first();\n\n        $response->assertRedirect(\n            route('technical-committees.edit', $technicalCommittee)\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_technical_committee()\n    {\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n\n        $response = $this->get(\n            route('technical-committees.show', $technicalCommittee)\n        );\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.technical_committees.show')\n            ->assertViewHas('technicalCommittee');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_technical_committee()\n    {\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n\n        $response = $this->get(\n            route('technical-committees.edit', $technicalCommittee)\n        );\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.technical_committees.edit')\n            ->assertViewHas('technicalCommittee');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_technical_committee()\n    {\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'phone' => $this->faker->phoneNumber,\n        ];\n\n        $response = $this->put(\n            route('technical-committees.update', $technicalCommittee),\n            $data\n        );\n\n        $data['id'] = $technicalCommittee->id;\n\n        $this->assertDatabaseHas('technical_committees', $data);\n\n        $response->assertRedirect(\n            route('technical-committees.edit', $technicalCommittee)\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_technical_committee()\n    {\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n\n        $response = $this->delete(\n            route('technical-committees.destroy', $technicalCommittee)\n        );\n\n        $response->assertRedirect(route('technical-committees.index'));\n\n        $this->assertModelMissing($technicalCommittee);\n    }\n}\n","module":"crud:12","path":"/tests/Feature/Controllers/TechnicalCommitteeControllerTest.php"},"/resources/views/app/technical_committees/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('technical-committees.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.technical_committees.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('technical-committees.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.technical_committees.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('technical-committees.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:12","path":"/resources/views/app/technical_committees/create.blade.php"},"/resources/views/app/technical_committees/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('technical-committees.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.technical_committees.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('technical-committees.update', $technicalCommittee) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.technical_committees.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('technical-committees.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('technical-committees.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:12","path":"/resources/views/app/technical_committees/edit.blade.php"},"/resources/views/app/technical_committees/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($technicalCommittee) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $technicalCommittee->name : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Name\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.email\n            name=\"email\"\n            label=\"Email\"\n            :value=\"old('email', ($editing ? $technicalCommittee->email : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Email\"\n            required\n        ></x-inputs.email>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"employee_number\"\n            label=\"Employee Number\"\n            :value=\"old('employee_number', ($editing ? $technicalCommittee->employee_number : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Employee Number\"\n            required\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"phone\"\n            label=\"Phone\"\n            :value=\"old('phone', ($editing ? $technicalCommittee->phone : ''))\"\n            maxlength=\"255\"\n            placeholder=\"Phone\"\n        ></x-inputs.text>\n    </x-inputs.group>\n</div>\n","module":"crud:12","path":"/resources/views/app/technical_committees/form-inputs.blade.php"},"/resources/views/app/technical_committees/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('technical-committees.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.technical_committees.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.technical_committees.inputs.name')</h5>\n                    <span>{{ $technicalCommittee->name ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.technical_committees.inputs.email')</h5>\n                    <span>{{ $technicalCommittee->email ?? '-' }}</span>\n                </div>\n                <div class=\"mb-4\">\n                    <h5>\n                        @lang('crud.technical_committees.inputs.employee_number')\n                    </h5>\n                    <span\n                        >{{ $technicalCommittee->employee_number ?? '-' }}</span\n                    >\n                </div>\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.technical_committees.inputs.phone')</h5>\n                    <span>{{ $technicalCommittee->phone ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a\n                    href=\"{{ route('technical-committees.index') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\TechnicalCommittee::class)\n                <a\n                    href=\"{{ route('technical-committees.create') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:12","path":"/resources/views/app/technical_committees/show.blade.php"},"/resources/views/app/technical_committees/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">\n                    @lang('crud.technical_committees.index_title')\n                </h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\TechnicalCommittee::class)\n                        <a\n                            href=\"{{ route('technical-committees.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.technical_committees.inputs.name')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.technical_committees.inputs.email')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.technical_committees.inputs.employee_number')\n                            </th>\n                            <th class=\"text-left\">\n                                @lang('crud.technical_committees.inputs.phone')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($technicalCommittees as $technicalCommittee)\n                        <tr>\n                            <td>{{ $technicalCommittee->name ?? '-' }}</td>\n                            <td>{{ $technicalCommittee->email ?? '-' }}</td>\n                            <td>\n                                {{ $technicalCommittee->employee_number ?? '-'\n                                }}\n                            </td>\n                            <td>{{ $technicalCommittee->phone ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $technicalCommittee)\n                                    <a\n                                        href=\"{{ route('technical-committees.edit', $technicalCommittee) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $technicalCommittee)\n                                    <a\n                                        href=\"{{ route('technical-committees.show', $technicalCommittee) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $technicalCommittee)\n                                    <form\n                                        action=\"{{ route('technical-committees.destroy', $technicalCommittee) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"5\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"5\">\n                                {!! $technicalCommittees->render() !!}\n                            </td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud:12","path":"/resources/views/app/technical_committees/index.blade.php"},"/app/Http/Resources/ApplicationResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass ApplicationResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:7","path":"/app/Http/Resources/ApplicationResource.php"},"/app/Http/Resources/ApplicationCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass ApplicationCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:7","path":"/app/Http/Resources/ApplicationCollection.php"},"/app/Http/Controllers/Api/ApplicationController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Application;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\ApplicationResource;\nuse App\\Http\\Resources\\ApplicationCollection;\nuse App\\Http\\Requests\\ApplicationStoreRequest;\nuse App\\Http\\Requests\\ApplicationUpdateRequest;\n\nclass ApplicationController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Application::class);\n\n        $search = $request->get('search', '');\n\n        $applications = Application::search($search)\n            ->latest()\n            ->paginate();\n\n        return new ApplicationCollection($applications);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\ApplicationStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(ApplicationStoreRequest $request)\n    {\n        $this->authorize('create', Application::class);\n\n        $validated = $request->validated();\n\n        $application = Application::create($validated);\n\n        return new ApplicationResource($application);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Application $application\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Application $application)\n    {\n        $this->authorize('view', $application);\n\n        return new ApplicationResource($application);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\ApplicationUpdateRequest $request\n     * @param \\App\\Models\\Application $application\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        ApplicationUpdateRequest $request,\n        Application $application\n    ) {\n        $this->authorize('update', $application);\n\n        $validated = $request->validated();\n\n        $application->update($validated);\n\n        return new ApplicationResource($application);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Application $application\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Application $application)\n    {\n        $this->authorize('delete', $application);\n\n        $application->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:1","path":"/app/Http/Controllers/Api/ApplicationController.php"},"/tests/Feature/Api/ApplicationTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Application;\n\nuse App\\Models\\Award;\nuse App\\Models\\Employee;\nuse App\\Models\\DirectBoss;\nuse App\\Models\\TechnicalCommittee;\nuse App\\Models\\SupervisorCommittee;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass ApplicationTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_applications_list()\n    {\n        $applications = Application::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.applications.index'));\n\n        $response->assertOk()->assertSee($applications[0]->id);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_application()\n    {\n        $data = Application::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.applications.store'), $data);\n\n        $this->assertDatabaseHas('applications', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_application()\n    {\n        $application = Application::factory()->create();\n\n        $directBoss = DirectBoss::factory()->create();\n        $employee = Employee::factory()->create();\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n        $award = Award::factory()->create();\n\n        $data = [\n            'rank' => $this->faker->randomNumber,\n            'direct_boss_points' => $this->faker->randomNumber,\n            'supervisor_committee_points' => $this->faker->randomNumber,\n            'technical_committee_points' => $this->faker->randomNumber,\n            'employee_points' => $this->faker->randomNumber,\n            'direct_boss_id' => $directBoss->id,\n            'employee_id' => $employee->id,\n            'supervisor_committee_id' => $supervisorCommittee->id,\n            'technical_committee_id' => $technicalCommittee->id,\n            'award_id' => $award->id,\n        ];\n\n        $response = $this->putJson(\n            route('api.applications.update', $application),\n            $data\n        );\n\n        $data['id'] = $application->id;\n\n        $this->assertDatabaseHas('applications', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_application()\n    {\n        $application = Application::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.applications.destroy', $application)\n        );\n\n        $this->assertModelMissing($application);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:1","path":"/tests/Feature/Api/ApplicationTest.php"},"/app/Http/Resources/AwardResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass AwardResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:6","path":"/app/Http/Resources/AwardResource.php"},"/app/Http/Resources/AwardCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass AwardCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:6","path":"/app/Http/Resources/AwardCollection.php"},"/app/Http/Controllers/Api/AwardController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Award;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\AwardResource;\nuse App\\Http\\Resources\\AwardCollection;\nuse App\\Http\\Requests\\AwardStoreRequest;\nuse App\\Http\\Requests\\AwardUpdateRequest;\n\nclass AwardController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Award::class);\n\n        $search = $request->get('search', '');\n\n        $awards = Award::search($search)\n            ->latest()\n            ->paginate();\n\n        return new AwardCollection($awards);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\AwardStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(AwardStoreRequest $request)\n    {\n        $this->authorize('create', Award::class);\n\n        $validated = $request->validated();\n\n        $award = Award::create($validated);\n\n        return new AwardResource($award);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Award $award\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Award $award)\n    {\n        $this->authorize('view', $award);\n\n        return new AwardResource($award);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\AwardUpdateRequest $request\n     * @param \\App\\Models\\Award $award\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(AwardUpdateRequest $request, Award $award)\n    {\n        $this->authorize('update', $award);\n\n        $validated = $request->validated();\n\n        $award->update($validated);\n\n        return new AwardResource($award);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Award $award\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Award $award)\n    {\n        $this->authorize('delete', $award);\n\n        $award->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:2","path":"/app/Http/Controllers/Api/AwardController.php"},"/tests/Feature/Api/AwardTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Award;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass AwardTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_awards_list()\n    {\n        $awards = Award::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.awards.index'));\n\n        $response->assertOk()->assertSee($awards[0]->type);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_award()\n    {\n        $data = Award::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.awards.store'), $data);\n\n        $this->assertDatabaseHas('awards', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_award()\n    {\n        $award = Award::factory()->create();\n\n        $data = [\n            'type' => $this->faker->word,\n            'max_employee_points' => $this->faker->randomNumber,\n        ];\n\n        $response = $this->putJson(route('api.awards.update', $award), $data);\n\n        $data['id'] = $award->id;\n\n        $this->assertDatabaseHas('awards', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_award()\n    {\n        $award = Award::factory()->create();\n\n        $response = $this->deleteJson(route('api.awards.destroy', $award));\n\n        $this->assertModelMissing($award);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:2","path":"/tests/Feature/Api/AwardTest.php"},"/app/Http/Controllers/Api/AwardApplicationsController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Award;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\ApplicationResource;\nuse App\\Http\\Resources\\ApplicationCollection;\n\nclass AwardApplicationsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Award $award\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Award $award)\n    {\n        $this->authorize('view', $award);\n\n        $search = $request->get('search', '');\n\n        $applications = $award\n            ->applications()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new ApplicationCollection($applications);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Award $award\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, Award $award)\n    {\n        $this->authorize('create', Application::class);\n\n        $validated = $request->validate([\n            'direct_boss_id' => ['required', 'exists:direct_bosses,id'],\n            'employee_id' => ['required', 'exists:employees,id'],\n            'supervisor_committee_id' => [\n                'required',\n                'exists:supervisor_committees,id',\n            ],\n            'technical_committee_id' => [\n                'required',\n                'exists:technical_committees,id',\n            ],\n            'rank' => ['nullable', 'max:255'],\n            'direct_boss_points' => ['nullable', 'max:255'],\n            'supervisor_committee_points' => ['nullable', 'max:255'],\n            'technical_committee_points' => ['nullable', 'max:255'],\n            'employee_points' => ['nullable', 'max:255'],\n        ]);\n\n        $application = $award->applications()->create($validated);\n\n        return new ApplicationResource($application);\n    }\n}\n","module":"crud:2","path":"/app/Http/Controllers/Api/AwardApplicationsController.php"},"/tests/Feature/Api/AwardApplicationsTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Award;\nuse App\\Models\\Application;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass AwardApplicationsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_award_applications()\n    {\n        $award = Award::factory()->create();\n        $applications = Application::factory()\n            ->count(2)\n            ->create([\n                'award_id' => $award->id,\n            ]);\n\n        $response = $this->getJson(\n            route('api.awards.applications.index', $award)\n        );\n\n        $response->assertOk()->assertSee($applications[0]->id);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_award_applications()\n    {\n        $award = Award::factory()->create();\n        $data = Application::factory()\n            ->make([\n                'award_id' => $award->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.awards.applications.store', $award),\n            $data\n        );\n\n        $this->assertDatabaseHas('applications', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $application = Application::latest('id')->first();\n\n        $this->assertEquals($award->id, $application->award_id);\n    }\n}\n","module":"crud:2","path":"/tests/Feature/Api/AwardApplicationsTest.php"},"/app/Http/Resources/PositionResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass PositionResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:2","path":"/app/Http/Resources/PositionResource.php"},"/app/Http/Resources/PositionCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass PositionCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:2","path":"/app/Http/Resources/PositionCollection.php"},"/app/Http/Controllers/Api/PositionController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Position;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\PositionResource;\nuse App\\Http\\Resources\\PositionCollection;\nuse App\\Http\\Requests\\PositionStoreRequest;\nuse App\\Http\\Requests\\PositionUpdateRequest;\n\nclass PositionController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Position::class);\n\n        $search = $request->get('search', '');\n\n        $positions = Position::search($search)\n            ->latest()\n            ->paginate();\n\n        return new PositionCollection($positions);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\PositionStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(PositionStoreRequest $request)\n    {\n        $this->authorize('create', Position::class);\n\n        $validated = $request->validated();\n\n        $position = Position::create($validated);\n\n        return new PositionResource($position);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Position $position)\n    {\n        $this->authorize('view', $position);\n\n        return new PositionResource($position);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\PositionUpdateRequest $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(PositionUpdateRequest $request, Position $position)\n    {\n        $this->authorize('update', $position);\n\n        $validated = $request->validated();\n\n        $position->update($validated);\n\n        return new PositionResource($position);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Position $position)\n    {\n        $this->authorize('delete', $position);\n\n        $position->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:5","path":"/app/Http/Controllers/Api/PositionController.php"},"/tests/Feature/Api/PositionTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Position;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass PositionTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_positions_list()\n    {\n        $positions = Position::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.positions.index'));\n\n        $response->assertOk()->assertSee($positions[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_position()\n    {\n        $data = Position::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.positions.store'), $data);\n\n        $this->assertDatabaseHas('positions', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_position()\n    {\n        $position = Position::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n        ];\n\n        $response = $this->putJson(\n            route('api.positions.update', $position),\n            $data\n        );\n\n        $data['id'] = $position->id;\n\n        $this->assertDatabaseHas('positions', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_position()\n    {\n        $position = Position::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.positions.destroy', $position)\n        );\n\n        $this->assertModelMissing($position);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:5","path":"/tests/Feature/Api/PositionTest.php"},"/app/Http/Resources/EmployeeResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass EmployeeResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:5","path":"/app/Http/Resources/EmployeeResource.php"},"/app/Http/Resources/EmployeeCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass EmployeeCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:5","path":"/app/Http/Resources/EmployeeCollection.php"},"/app/Http/Controllers/Api/PositionEmployeesController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Position;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\EmployeeResource;\nuse App\\Http\\Resources\\EmployeeCollection;\n\nclass PositionEmployeesController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Position $position)\n    {\n        $this->authorize('view', $position);\n\n        $search = $request->get('search', '');\n\n        $employees = $position\n            ->employees()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new EmployeeCollection($employees);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, Position $position)\n    {\n        $this->authorize('create', Employee::class);\n\n        $validated = $request->validate([\n            'name' => ['required', 'max:255', 'string'],\n            'phone' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'email'],\n            'employee_number' => [\n                'required',\n                'unique:employees,employee_number',\n                'max:255',\n            ],\n            'direct_boss_id' => ['required', 'exists:direct_bosses,id'],\n        ]);\n\n        $employee = $position->employees()->create($validated);\n\n        return new EmployeeResource($employee);\n    }\n}\n","module":"crud:5","path":"/app/Http/Controllers/Api/PositionEmployeesController.php"},"/tests/Feature/Api/PositionEmployeesTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Position;\nuse App\\Models\\Employee;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass PositionEmployeesTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_position_employees()\n    {\n        $position = Position::factory()->create();\n        $employees = Employee::factory()\n            ->count(2)\n            ->create([\n                'position_id' => $position->id,\n            ]);\n\n        $response = $this->getJson(\n            route('api.positions.employees.index', $position)\n        );\n\n        $response->assertOk()->assertSee($employees[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_position_employees()\n    {\n        $position = Position::factory()->create();\n        $data = Employee::factory()\n            ->make([\n                'position_id' => $position->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.positions.employees.store', $position),\n            $data\n        );\n\n        $this->assertDatabaseHas('employees', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $employee = Employee::latest('id')->first();\n\n        $this->assertEquals($position->id, $employee->position_id);\n    }\n}\n","module":"crud:5","path":"/tests/Feature/Api/PositionEmployeesTest.php"},"/app/Http/Resources/DirectBossResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass DirectBossResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:8","path":"/app/Http/Resources/DirectBossResource.php"},"/app/Http/Resources/DirectBossCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass DirectBossCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:8","path":"/app/Http/Resources/DirectBossCollection.php"},"/app/Http/Controllers/Api/PositionDirectBossesController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Position;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\DirectBossResource;\nuse App\\Http\\Resources\\DirectBossCollection;\n\nclass PositionDirectBossesController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, Position $position)\n    {\n        $this->authorize('view', $position);\n\n        $search = $request->get('search', '');\n\n        $directBosses = $position\n            ->directBosses()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new DirectBossCollection($directBosses);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Position $position\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, Position $position)\n    {\n        $this->authorize('create', DirectBoss::class);\n\n        $validated = $request->validate([\n            'name' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'unique:direct_bosses,email', 'email'],\n            'employee_number' => [\n                'required',\n                'unique:direct_bosses,employee_number',\n                'max:255',\n            ],\n            'phone' => ['nullable', 'max:255', 'string'],\n        ]);\n\n        $directBoss = $position->directBosses()->create($validated);\n\n        return new DirectBossResource($directBoss);\n    }\n}\n","module":"crud:5","path":"/app/Http/Controllers/Api/PositionDirectBossesController.php"},"/tests/Feature/Api/PositionDirectBossesTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Position;\nuse App\\Models\\DirectBoss;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass PositionDirectBossesTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_position_direct_bosses()\n    {\n        $position = Position::factory()->create();\n        $directBosses = DirectBoss::factory()\n            ->count(2)\n            ->create([\n                'position_id' => $position->id,\n            ]);\n\n        $response = $this->getJson(\n            route('api.positions.direct-bosses.index', $position)\n        );\n\n        $response->assertOk()->assertSee($directBosses[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_position_direct_bosses()\n    {\n        $position = Position::factory()->create();\n        $data = DirectBoss::factory()\n            ->make([\n                'position_id' => $position->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.positions.direct-bosses.store', $position),\n            $data\n        );\n\n        $this->assertDatabaseHas('direct_bosses', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $directBoss = DirectBoss::latest('id')->first();\n\n        $this->assertEquals($position->id, $directBoss->position_id);\n    }\n}\n","module":"crud:5","path":"/tests/Feature/Api/PositionDirectBossesTest.php"},"/app/Http/Resources/UserResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:1","path":"/app/Http/Resources/UserResource.php"},"/app/Http/Resources/UserCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:1","path":"/app/Http/Resources/UserCollection.php"},"/app/Http/Controllers/Api/UserController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Resources\\UserResource;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Http\\Resources\\UserCollection;\nuse App\\Http\\Requests\\UserStoreRequest;\nuse App\\Http\\Requests\\UserUpdateRequest;\n\nclass UserController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', User::class);\n\n        $search = $request->get('search', '');\n\n        $users = User::search($search)\n            ->latest()\n            ->paginate();\n\n        return new UserCollection($users);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\UserStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(UserStoreRequest $request)\n    {\n        $this->authorize('create', User::class);\n\n        $validated = $request->validated();\n\n        $validated['password'] = Hash::make($validated['password']);\n\n        $user = User::create($validated);\n\n        $user->syncRoles($request->roles);\n\n        return new UserResource($user);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, User $user)\n    {\n        $this->authorize('view', $user);\n\n        return new UserResource($user);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\UserUpdateRequest $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(UserUpdateRequest $request, User $user)\n    {\n        $this->authorize('update', $user);\n\n        $validated = $request->validated();\n\n        if (empty($validated['password'])) {\n            unset($validated['password']);\n        } else {\n            $validated['password'] = Hash::make($validated['password']);\n        }\n\n        $user->update($validated);\n\n        $user->syncRoles($request->roles);\n\n        return new UserResource($user);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\User $user\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, User $user)\n    {\n        $this->authorize('delete', $user);\n\n        $user->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:8","path":"/app/Http/Controllers/Api/UserController.php"},"/tests/Feature/Api/UserTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass UserTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_users_list()\n    {\n        $users = User::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.users.index'));\n\n        $response->assertOk()->assertSee($users[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_user()\n    {\n        $data = User::factory()\n            ->make()\n            ->toArray();\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->postJson(route('api.users.store'), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n        unset($data['two_factor_confirmed_at']);\n        unset($data['current_team_id']);\n        unset($data['profile_photo_path']);\n\n        $this->assertDatabaseHas('users', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_user()\n    {\n        $user = User::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n        ];\n\n        $data['password'] = \\Str::random('8');\n\n        $response = $this->putJson(route('api.users.update', $user), $data);\n\n        unset($data['password']);\n        unset($data['email_verified_at']);\n        unset($data['two_factor_confirmed_at']);\n        unset($data['current_team_id']);\n        unset($data['profile_photo_path']);\n\n        $data['id'] = $user->id;\n\n        $this->assertDatabaseHas('users', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_user()\n    {\n        $user = User::factory()->create();\n\n        $response = $this->deleteJson(route('api.users.destroy', $user));\n\n        $this->assertModelMissing($user);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:8","path":"/tests/Feature/Api/UserTest.php"},"/app/Http/Controllers/Api/DirectBossController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\DirectBoss;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\DirectBossResource;\nuse App\\Http\\Resources\\DirectBossCollection;\nuse App\\Http\\Requests\\DirectBossStoreRequest;\nuse App\\Http\\Requests\\DirectBossUpdateRequest;\n\nclass DirectBossController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', DirectBoss::class);\n\n        $search = $request->get('search', '');\n\n        $directBosses = DirectBoss::search($search)\n            ->latest()\n            ->paginate();\n\n        return new DirectBossCollection($directBosses);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\DirectBossStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(DirectBossStoreRequest $request)\n    {\n        $this->authorize('create', DirectBoss::class);\n\n        $validated = $request->validated();\n\n        $directBoss = DirectBoss::create($validated);\n\n        return new DirectBossResource($directBoss);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, DirectBoss $directBoss)\n    {\n        $this->authorize('view', $directBoss);\n\n        return new DirectBossResource($directBoss);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\DirectBossUpdateRequest $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        DirectBossUpdateRequest $request,\n        DirectBoss $directBoss\n    ) {\n        $this->authorize('update', $directBoss);\n\n        $validated = $request->validated();\n\n        $directBoss->update($validated);\n\n        return new DirectBossResource($directBoss);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, DirectBoss $directBoss)\n    {\n        $this->authorize('delete', $directBoss);\n\n        $directBoss->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:9","path":"/app/Http/Controllers/Api/DirectBossController.php"},"/tests/Feature/Api/DirectBossTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\DirectBoss;\n\nuse App\\Models\\Position;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DirectBossTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_direct_bosses_list()\n    {\n        $directBosses = DirectBoss::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.direct-bosses.index'));\n\n        $response->assertOk()->assertSee($directBosses[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_direct_boss()\n    {\n        $data = DirectBoss::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.direct-bosses.store'), $data);\n\n        $this->assertDatabaseHas('direct_bosses', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_direct_boss()\n    {\n        $directBoss = DirectBoss::factory()->create();\n\n        $position = Position::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'phone' => $this->faker->phoneNumber,\n            'position_id' => $position->id,\n        ];\n\n        $response = $this->putJson(\n            route('api.direct-bosses.update', $directBoss),\n            $data\n        );\n\n        $data['id'] = $directBoss->id;\n\n        $this->assertDatabaseHas('direct_bosses', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_direct_boss()\n    {\n        $directBoss = DirectBoss::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.direct-bosses.destroy', $directBoss)\n        );\n\n        $this->assertModelMissing($directBoss);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:9","path":"/tests/Feature/Api/DirectBossTest.php"},"/app/Http/Controllers/Api/DirectBossEmployeesController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\DirectBoss;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\EmployeeResource;\nuse App\\Http\\Resources\\EmployeeCollection;\n\nclass DirectBossEmployeesController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, DirectBoss $directBoss)\n    {\n        $this->authorize('view', $directBoss);\n\n        $search = $request->get('search', '');\n\n        $employees = $directBoss\n            ->employees()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new EmployeeCollection($employees);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, DirectBoss $directBoss)\n    {\n        $this->authorize('create', Employee::class);\n\n        $validated = $request->validate([\n            'name' => ['required', 'max:255', 'string'],\n            'phone' => ['required', 'max:255', 'string'],\n            'email' => ['required', 'email'],\n            'employee_number' => [\n                'required',\n                'unique:employees,employee_number',\n                'max:255',\n            ],\n            'position_id' => ['required', 'exists:positions,id'],\n        ]);\n\n        $employee = $directBoss->employees()->create($validated);\n\n        return new EmployeeResource($employee);\n    }\n}\n","module":"crud:9","path":"/app/Http/Controllers/Api/DirectBossEmployeesController.php"},"/tests/Feature/Api/DirectBossEmployeesTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Employee;\nuse App\\Models\\DirectBoss;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DirectBossEmployeesTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_direct_boss_employees()\n    {\n        $directBoss = DirectBoss::factory()->create();\n        $employees = Employee::factory()\n            ->count(2)\n            ->create([\n                'direct_boss_id' => $directBoss->id,\n            ]);\n\n        $response = $this->getJson(\n            route('api.direct-bosses.employees.index', $directBoss)\n        );\n\n        $response->assertOk()->assertSee($employees[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_direct_boss_employees()\n    {\n        $directBoss = DirectBoss::factory()->create();\n        $data = Employee::factory()\n            ->make([\n                'direct_boss_id' => $directBoss->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.direct-bosses.employees.store', $directBoss),\n            $data\n        );\n\n        $this->assertDatabaseHas('employees', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $employee = Employee::latest('id')->first();\n\n        $this->assertEquals($directBoss->id, $employee->direct_boss_id);\n    }\n}\n","module":"crud:9","path":"/tests/Feature/Api/DirectBossEmployeesTest.php"},"/app/Http/Controllers/Api/DirectBossApplicationsController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\DirectBoss;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\ApplicationResource;\nuse App\\Http\\Resources\\ApplicationCollection;\n\nclass DirectBossApplicationsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request, DirectBoss $directBoss)\n    {\n        $this->authorize('view', $directBoss);\n\n        $search = $request->get('search', '');\n\n        $applications = $directBoss\n            ->applications()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new ApplicationCollection($applications);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\DirectBoss $directBoss\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request, DirectBoss $directBoss)\n    {\n        $this->authorize('create', Application::class);\n\n        $validated = $request->validate([\n            'employee_id' => ['required', 'exists:employees,id'],\n            'supervisor_committee_id' => [\n                'required',\n                'exists:supervisor_committees,id',\n            ],\n            'technical_committee_id' => [\n                'required',\n                'exists:technical_committees,id',\n            ],\n            'award_id' => ['required', 'exists:awards,id'],\n            'rank' => ['nullable', 'max:255'],\n            'direct_boss_points' => ['nullable', 'max:255'],\n            'supervisor_committee_points' => ['nullable', 'max:255'],\n            'technical_committee_points' => ['nullable', 'max:255'],\n            'employee_points' => ['nullable', 'max:255'],\n        ]);\n\n        $application = $directBoss->applications()->create($validated);\n\n        return new ApplicationResource($application);\n    }\n}\n","module":"crud:9","path":"/app/Http/Controllers/Api/DirectBossApplicationsController.php"},"/tests/Feature/Api/DirectBossApplicationsTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\DirectBoss;\nuse App\\Models\\Application;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass DirectBossApplicationsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_direct_boss_applications()\n    {\n        $directBoss = DirectBoss::factory()->create();\n        $applications = Application::factory()\n            ->count(2)\n            ->create([\n                'direct_boss_id' => $directBoss->id,\n            ]);\n\n        $response = $this->getJson(\n            route('api.direct-bosses.applications.index', $directBoss)\n        );\n\n        $response->assertOk()->assertSee($applications[0]->id);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_direct_boss_applications()\n    {\n        $directBoss = DirectBoss::factory()->create();\n        $data = Application::factory()\n            ->make([\n                'direct_boss_id' => $directBoss->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.direct-bosses.applications.store', $directBoss),\n            $data\n        );\n\n        $this->assertDatabaseHas('applications', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $application = Application::latest('id')->first();\n\n        $this->assertEquals($directBoss->id, $application->direct_boss_id);\n    }\n}\n","module":"crud:9","path":"/tests/Feature/Api/DirectBossApplicationsTest.php"},"/app/Http/Controllers/Api/EmployeeController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Employee;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\EmployeeResource;\nuse App\\Http\\Resources\\EmployeeCollection;\nuse App\\Http\\Requests\\EmployeeStoreRequest;\nuse App\\Http\\Requests\\EmployeeUpdateRequest;\n\nclass EmployeeController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', Employee::class);\n\n        $search = $request->get('search', '');\n\n        $employees = Employee::search($search)\n            ->latest()\n            ->paginate();\n\n        return new EmployeeCollection($employees);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\EmployeeStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(EmployeeStoreRequest $request)\n    {\n        $this->authorize('create', Employee::class);\n\n        $validated = $request->validated();\n\n        $employee = Employee::create($validated);\n\n        return new EmployeeResource($employee);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Employee $employee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Request $request, Employee $employee)\n    {\n        $this->authorize('view', $employee);\n\n        return new EmployeeResource($employee);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\EmployeeUpdateRequest $request\n     * @param \\App\\Models\\Employee $employee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(EmployeeUpdateRequest $request, Employee $employee)\n    {\n        $this->authorize('update', $employee);\n\n        $validated = $request->validated();\n\n        $employee->update($validated);\n\n        return new EmployeeResource($employee);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\Employee $employee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Request $request, Employee $employee)\n    {\n        $this->authorize('delete', $employee);\n\n        $employee->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:10","path":"/app/Http/Controllers/Api/EmployeeController.php"},"/tests/Feature/Api/EmployeeTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Employee;\n\nuse App\\Models\\Position;\nuse App\\Models\\DirectBoss;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass EmployeeTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_employees_list()\n    {\n        $employees = Employee::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.employees.index'));\n\n        $response->assertOk()->assertSee($employees[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_employee()\n    {\n        $data = Employee::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(route('api.employees.store'), $data);\n\n        $this->assertDatabaseHas('employees', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_employee()\n    {\n        $employee = Employee::factory()->create();\n\n        $position = Position::factory()->create();\n        $directBoss = DirectBoss::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'phone' => $this->faker->phoneNumber,\n            'email' => $this->faker->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'position_id' => $position->id,\n            'direct_boss_id' => $directBoss->id,\n        ];\n\n        $response = $this->putJson(\n            route('api.employees.update', $employee),\n            $data\n        );\n\n        $data['id'] = $employee->id;\n\n        $this->assertDatabaseHas('employees', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_employee()\n    {\n        $employee = Employee::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.employees.destroy', $employee)\n        );\n\n        $this->assertModelMissing($employee);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:10","path":"/tests/Feature/Api/EmployeeTest.php"},"/app/Http/Resources/SupervisorCommitteeResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass SupervisorCommitteeResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:3","path":"/app/Http/Resources/SupervisorCommitteeResource.php"},"/app/Http/Resources/SupervisorCommitteeCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass SupervisorCommitteeCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:3","path":"/app/Http/Resources/SupervisorCommitteeCollection.php"},"/app/Http/Controllers/Api/SupervisorCommitteeController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\SupervisorCommittee;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\SupervisorCommitteeResource;\nuse App\\Http\\Resources\\SupervisorCommitteeCollection;\nuse App\\Http\\Requests\\SupervisorCommitteeStoreRequest;\nuse App\\Http\\Requests\\SupervisorCommitteeUpdateRequest;\n\nclass SupervisorCommitteeController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', SupervisorCommittee::class);\n\n        $search = $request->get('search', '');\n\n        $supervisorCommittees = SupervisorCommittee::search($search)\n            ->latest()\n            ->paginate();\n\n        return new SupervisorCommitteeCollection($supervisorCommittees);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\SupervisorCommitteeStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(SupervisorCommitteeStoreRequest $request)\n    {\n        $this->authorize('create', SupervisorCommittee::class);\n\n        $validated = $request->validated();\n\n        $supervisorCommittee = SupervisorCommittee::create($validated);\n\n        return new SupervisorCommitteeResource($supervisorCommittee);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\SupervisorCommittee $supervisorCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(\n        Request $request,\n        SupervisorCommittee $supervisorCommittee\n    ) {\n        $this->authorize('view', $supervisorCommittee);\n\n        return new SupervisorCommitteeResource($supervisorCommittee);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\SupervisorCommitteeUpdateRequest $request\n     * @param \\App\\Models\\SupervisorCommittee $supervisorCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        SupervisorCommitteeUpdateRequest $request,\n        SupervisorCommittee $supervisorCommittee\n    ) {\n        $this->authorize('update', $supervisorCommittee);\n\n        $validated = $request->validated();\n\n        $supervisorCommittee->update($validated);\n\n        return new SupervisorCommitteeResource($supervisorCommittee);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\SupervisorCommittee $supervisorCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        SupervisorCommittee $supervisorCommittee\n    ) {\n        $this->authorize('delete', $supervisorCommittee);\n\n        $supervisorCommittee->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:11","path":"/app/Http/Controllers/Api/SupervisorCommitteeController.php"},"/tests/Feature/Api/SupervisorCommitteeTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\SupervisorCommittee;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass SupervisorCommitteeTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_supervisor_committees_list()\n    {\n        $supervisorCommittees = SupervisorCommittee::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.supervisor-committees.index'));\n\n        $response->assertOk()->assertSee($supervisorCommittees[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_supervisor_committee()\n    {\n        $data = SupervisorCommittee::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.supervisor-committees.store'),\n            $data\n        );\n\n        $this->assertDatabaseHas('supervisor_committees', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_supervisor_committee()\n    {\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'phone' => $this->faker->phoneNumber,\n        ];\n\n        $response = $this->putJson(\n            route('api.supervisor-committees.update', $supervisorCommittee),\n            $data\n        );\n\n        $data['id'] = $supervisorCommittee->id;\n\n        $this->assertDatabaseHas('supervisor_committees', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_supervisor_committee()\n    {\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.supervisor-committees.destroy', $supervisorCommittee)\n        );\n\n        $this->assertModelMissing($supervisorCommittee);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:11","path":"/tests/Feature/Api/SupervisorCommitteeTest.php"},"/app/Http/Controllers/Api/SupervisorCommitteeApplicationsController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\SupervisorCommittee;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\ApplicationResource;\nuse App\\Http\\Resources\\ApplicationCollection;\n\nclass SupervisorCommitteeApplicationsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\SupervisorCommittee $supervisorCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(\n        Request $request,\n        SupervisorCommittee $supervisorCommittee\n    ) {\n        $this->authorize('view', $supervisorCommittee);\n\n        $search = $request->get('search', '');\n\n        $applications = $supervisorCommittee\n            ->applications()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new ApplicationCollection($applications);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\SupervisorCommittee $supervisorCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        SupervisorCommittee $supervisorCommittee\n    ) {\n        $this->authorize('create', Application::class);\n\n        $validated = $request->validate([\n            'direct_boss_id' => ['required', 'exists:direct_bosses,id'],\n            'employee_id' => ['required', 'exists:employees,id'],\n            'technical_committee_id' => [\n                'required',\n                'exists:technical_committees,id',\n            ],\n            'award_id' => ['required', 'exists:awards,id'],\n            'rank' => ['nullable', 'max:255'],\n            'direct_boss_points' => ['nullable', 'max:255'],\n            'supervisor_committee_points' => ['nullable', 'max:255'],\n            'technical_committee_points' => ['nullable', 'max:255'],\n            'employee_points' => ['nullable', 'max:255'],\n        ]);\n\n        $application = $supervisorCommittee->applications()->create($validated);\n\n        return new ApplicationResource($application);\n    }\n}\n","module":"crud:11","path":"/app/Http/Controllers/Api/SupervisorCommitteeApplicationsController.php"},"/tests/Feature/Api/SupervisorCommitteeApplicationsTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Application;\nuse App\\Models\\SupervisorCommittee;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass SupervisorCommitteeApplicationsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_supervisor_committee_applications()\n    {\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n        $applications = Application::factory()\n            ->count(2)\n            ->create([\n                'supervisor_committee_id' => $supervisorCommittee->id,\n            ]);\n\n        $response = $this->getJson(\n            route(\n                'api.supervisor-committees.applications.index',\n                $supervisorCommittee\n            )\n        );\n\n        $response->assertOk()->assertSee($applications[0]->id);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_supervisor_committee_applications()\n    {\n        $supervisorCommittee = SupervisorCommittee::factory()->create();\n        $data = Application::factory()\n            ->make([\n                'supervisor_committee_id' => $supervisorCommittee->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route(\n                'api.supervisor-committees.applications.store',\n                $supervisorCommittee\n            ),\n            $data\n        );\n\n        $this->assertDatabaseHas('applications', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $application = Application::latest('id')->first();\n\n        $this->assertEquals(\n            $supervisorCommittee->id,\n            $application->supervisor_committee_id\n        );\n    }\n}\n","module":"crud:11","path":"/tests/Feature/Api/SupervisorCommitteeApplicationsTest.php"},"/app/Http/Resources/TechnicalCommitteeResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass TechnicalCommitteeResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:4","path":"/app/Http/Resources/TechnicalCommitteeResource.php"},"/app/Http/Resources/TechnicalCommitteeCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass TechnicalCommitteeCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"entity:4","path":"/app/Http/Resources/TechnicalCommitteeCollection.php"},"/app/Http/Controllers/Api/TechnicalCommitteeController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\TechnicalCommittee;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\TechnicalCommitteeResource;\nuse App\\Http\\Resources\\TechnicalCommitteeCollection;\nuse App\\Http\\Requests\\TechnicalCommitteeStoreRequest;\nuse App\\Http\\Requests\\TechnicalCommitteeUpdateRequest;\n\nclass TechnicalCommitteeController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('viewAny', TechnicalCommittee::class);\n\n        $search = $request->get('search', '');\n\n        $technicalCommittees = TechnicalCommittee::search($search)\n            ->latest()\n            ->paginate();\n\n        return new TechnicalCommitteeCollection($technicalCommittees);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\TechnicalCommitteeStoreRequest $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(TechnicalCommitteeStoreRequest $request)\n    {\n        $this->authorize('create', TechnicalCommittee::class);\n\n        $validated = $request->validated();\n\n        $technicalCommittee = TechnicalCommittee::create($validated);\n\n        return new TechnicalCommitteeResource($technicalCommittee);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\TechnicalCommittee $technicalCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(\n        Request $request,\n        TechnicalCommittee $technicalCommittee\n    ) {\n        $this->authorize('view', $technicalCommittee);\n\n        return new TechnicalCommitteeResource($technicalCommittee);\n    }\n\n    /**\n     * @param \\App\\Http\\Requests\\TechnicalCommitteeUpdateRequest $request\n     * @param \\App\\Models\\TechnicalCommittee $technicalCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(\n        TechnicalCommitteeUpdateRequest $request,\n        TechnicalCommittee $technicalCommittee\n    ) {\n        $this->authorize('update', $technicalCommittee);\n\n        $validated = $request->validated();\n\n        $technicalCommittee->update($validated);\n\n        return new TechnicalCommitteeResource($technicalCommittee);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\TechnicalCommittee $technicalCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(\n        Request $request,\n        TechnicalCommittee $technicalCommittee\n    ) {\n        $this->authorize('delete', $technicalCommittee);\n\n        $technicalCommittee->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"crud:12","path":"/app/Http/Controllers/Api/TechnicalCommitteeController.php"},"/tests/Feature/Api/TechnicalCommitteeTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\TechnicalCommittee;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass TechnicalCommitteeTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_technical_committees_list()\n    {\n        $technicalCommittees = TechnicalCommittee::factory()\n            ->count(5)\n            ->create();\n\n        $response = $this->getJson(route('api.technical-committees.index'));\n\n        $response->assertOk()->assertSee($technicalCommittees[0]->name);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_technical_committee()\n    {\n        $data = TechnicalCommittee::factory()\n            ->make()\n            ->toArray();\n\n        $response = $this->postJson(\n            route('api.technical-committees.store'),\n            $data\n        );\n\n        $this->assertDatabaseHas('technical_committees', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_technical_committee()\n    {\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n\n        $data = [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'phone' => $this->faker->phoneNumber,\n        ];\n\n        $response = $this->putJson(\n            route('api.technical-committees.update', $technicalCommittee),\n            $data\n        );\n\n        $data['id'] = $technicalCommittee->id;\n\n        $this->assertDatabaseHas('technical_committees', $data);\n\n        $response->assertOk()->assertJsonFragment($data);\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_technical_committee()\n    {\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n\n        $response = $this->deleteJson(\n            route('api.technical-committees.destroy', $technicalCommittee)\n        );\n\n        $this->assertModelMissing($technicalCommittee);\n\n        $response->assertNoContent();\n    }\n}\n","module":"crud:12","path":"/tests/Feature/Api/TechnicalCommitteeTest.php"},"/app/Http/Controllers/Api/TechnicalCommitteeApplicationsController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\TechnicalCommittee;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\ApplicationResource;\nuse App\\Http\\Resources\\ApplicationCollection;\n\nclass TechnicalCommitteeApplicationsController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\TechnicalCommittee $technicalCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(\n        Request $request,\n        TechnicalCommittee $technicalCommittee\n    ) {\n        $this->authorize('view', $technicalCommittee);\n\n        $search = $request->get('search', '');\n\n        $applications = $technicalCommittee\n            ->applications()\n            ->search($search)\n            ->latest()\n            ->paginate();\n\n        return new ApplicationCollection($applications);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\App\\Models\\TechnicalCommittee $technicalCommittee\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(\n        Request $request,\n        TechnicalCommittee $technicalCommittee\n    ) {\n        $this->authorize('create', Application::class);\n\n        $validated = $request->validate([\n            'direct_boss_id' => ['required', 'exists:direct_bosses,id'],\n            'employee_id' => ['required', 'exists:employees,id'],\n            'supervisor_committee_id' => [\n                'required',\n                'exists:supervisor_committees,id',\n            ],\n            'award_id' => ['required', 'exists:awards,id'],\n            'rank' => ['nullable', 'max:255'],\n            'direct_boss_points' => ['nullable', 'max:255'],\n            'supervisor_committee_points' => ['nullable', 'max:255'],\n            'technical_committee_points' => ['nullable', 'max:255'],\n            'employee_points' => ['nullable', 'max:255'],\n        ]);\n\n        $application = $technicalCommittee->applications()->create($validated);\n\n        return new ApplicationResource($application);\n    }\n}\n","module":"crud:12","path":"/app/Http/Controllers/Api/TechnicalCommitteeApplicationsController.php"},"/tests/Feature/Api/TechnicalCommitteeApplicationsTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Api;\n\nuse App\\Models\\User;\nuse App\\Models\\Application;\nuse App\\Models\\TechnicalCommittee;\n\nuse Tests\\TestCase;\nuse Laravel\\Sanctum\\Sanctum;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass TechnicalCommitteeApplicationsTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $user = User::factory()->create(['email' => 'admin@admin.com']);\n\n        Sanctum::actingAs($user, [], 'web');\n\n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_gets_technical_committee_applications()\n    {\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n        $applications = Application::factory()\n            ->count(2)\n            ->create([\n                'technical_committee_id' => $technicalCommittee->id,\n            ]);\n\n        $response = $this->getJson(\n            route(\n                'api.technical-committees.applications.index',\n                $technicalCommittee\n            )\n        );\n\n        $response->assertOk()->assertSee($applications[0]->id);\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_technical_committee_applications()\n    {\n        $technicalCommittee = TechnicalCommittee::factory()->create();\n        $data = Application::factory()\n            ->make([\n                'technical_committee_id' => $technicalCommittee->id,\n            ])\n            ->toArray();\n\n        $response = $this->postJson(\n            route(\n                'api.technical-committees.applications.store',\n                $technicalCommittee\n            ),\n            $data\n        );\n\n        $this->assertDatabaseHas('applications', $data);\n\n        $response->assertStatus(201)->assertJsonFragment($data);\n\n        $application = Application::latest('id')->first();\n\n        $this->assertEquals(\n            $technicalCommittee->id,\n            $application->technical_committee_id\n        );\n    }\n}\n","module":"crud:12","path":"/tests/Feature/Api/TechnicalCommitteeApplicationsTest.php"},"/lang/en/crud.php":{"deleteOnGeneration":true,"content":"<?php\n\nreturn [\n    'common' => [\n        'actions' => 'Actions',\n        'create' => 'Create',\n        'edit' => 'Edit',\n        'update' => 'Update',\n        'new' => 'New',\n        'cancel' => 'Cancel',\n        'attach' => 'Attach',\n        'detach' => 'Detach',\n        'save' => 'Save',\n        'delete' => 'Delete',\n        'delete_selected' => 'Delete selected',\n        'search' => 'Search...',\n        'back' => 'Back to Index',\n        'are_you_sure' => 'Are you sure?',\n        'no_items_found' => 'No items found',\n        'created' => 'Successfully created',\n        'saved' => 'Saved successfully',\n        'removed' => 'Successfully removed',\n    ],\n\n    'applications' => [\n        'name' => 'Applications',\n        'index_title' => 'Applications List',\n        'new_title' => 'New Application',\n        'create_title' => 'Create Application',\n        'edit_title' => 'Edit Application',\n        'show_title' => 'Show Application',\n        'inputs' => [\n            'direct_boss_id' => 'Direct Boss',\n            'employee_id' => 'Employee',\n            'supervisor_committee_id' => 'Supervisor Committee',\n            'technical_committee_id' => 'Technical Committee',\n            'award_id' => 'Award',\n            'rank' => 'Rank',\n            'direct_boss_points' => 'Direct Boss Points',\n            'supervisor_committee_points' => 'Supervisor Committee Points',\n            'technical_committee_points' => 'Technical Committee Points',\n            'employee_points' => 'Employee Points',\n        ],\n    ],\n\n    'awards' => [\n        'name' => 'Awards',\n        'index_title' => 'Awards List',\n        'new_title' => 'New Award',\n        'create_title' => 'Create Award',\n        'edit_title' => 'Edit Award',\n        'show_title' => 'Show Award',\n        'inputs' => [\n            'type' => 'Type',\n            'max_employee_points' => 'Max Employee Points',\n        ],\n    ],\n\n    'positions' => [\n        'name' => 'Positions',\n        'index_title' => 'Positions List',\n        'new_title' => 'New Position',\n        'create_title' => 'Create Position',\n        'edit_title' => 'Edit Position',\n        'show_title' => 'Show Position',\n        'inputs' => [\n            'name' => 'Name',\n        ],\n    ],\n\n    'users' => [\n        'name' => 'Users',\n        'index_title' => 'Users List',\n        'new_title' => 'New User',\n        'create_title' => 'Create User',\n        'edit_title' => 'Edit User',\n        'show_title' => 'Show User',\n        'inputs' => [\n            'name' => 'Name',\n            'email' => 'Email',\n            'password' => 'Password',\n        ],\n    ],\n\n    'direct_bosses' => [\n        'name' => 'Direct Bosses',\n        'index_title' => 'DirectBosses List',\n        'new_title' => 'New Direct boss',\n        'create_title' => 'Create DirectBoss',\n        'edit_title' => 'Edit DirectBoss',\n        'show_title' => 'Show DirectBoss',\n        'inputs' => [\n            'name' => 'Name',\n            'email' => 'Email',\n            'employee_number' => 'Employee Number',\n            'phone' => 'Phone',\n            'position_id' => 'Position',\n        ],\n    ],\n\n    'employees' => [\n        'name' => 'Employees',\n        'index_title' => 'Employees List',\n        'new_title' => 'New Employee',\n        'create_title' => 'Create Employee',\n        'edit_title' => 'Edit Employee',\n        'show_title' => 'Show Employee',\n        'inputs' => [\n            'name' => 'Name',\n            'phone' => 'Phone',\n            'email' => 'Email',\n            'employee_number' => 'Employee Number',\n            'position_id' => 'Position',\n            'direct_boss_id' => 'Direct Boss',\n        ],\n    ],\n\n    'supervisor_committees' => [\n        'name' => 'Supervisor Committees',\n        'index_title' => 'SupervisorCommittees List',\n        'new_title' => 'New Supervisor committee',\n        'create_title' => 'Create SupervisorCommittee',\n        'edit_title' => 'Edit SupervisorCommittee',\n        'show_title' => 'Show SupervisorCommittee',\n        'inputs' => [\n            'name' => 'Name',\n            'email' => 'Email',\n            'employee_number' => 'Employee Number',\n            'phone' => 'Phone',\n        ],\n    ],\n\n    'technical_committees' => [\n        'name' => 'Technical Committees',\n        'index_title' => 'TechnicalCommittees List',\n        'new_title' => 'New Technical committee',\n        'create_title' => 'Create TechnicalCommittee',\n        'edit_title' => 'Edit TechnicalCommittee',\n        'show_title' => 'Show TechnicalCommittee',\n        'inputs' => [\n            'name' => 'Name',\n            'email' => 'Email',\n            'employee_number' => 'Employee Number',\n            'phone' => 'Phone',\n        ],\n    ],\n\n    'roles' => [\n        'name' => 'Roles',\n        'index_title' => 'Roles List',\n        'create_title' => 'Create Role',\n        'edit_title' => 'Edit Role',\n        'show_title' => 'Show Role',\n        'inputs' => [\n            'name' => 'Name',\n        ],\n    ],\n\n    'permissions' => [\n        'name' => 'Permissions',\n        'index_title' => 'Permissions List',\n        'create_title' => 'Create Permission',\n        'edit_title' => 'Edit Permission',\n        'show_title' => 'Show Permission',\n        'inputs' => [\n            'name' => 'Name',\n        ],\n    ],\n];\n","module":"base","path":"/lang/en/crud.php"},"/routes/api.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\Api\\UserController;\nuse App\\Http\\Controllers\\Api\\AuthController;\nuse App\\Http\\Controllers\\Api\\RoleController;\nuse App\\Http\\Controllers\\Api\\AwardController;\nuse App\\Http\\Controllers\\Api\\PositionController;\nuse App\\Http\\Controllers\\Api\\EmployeeController;\nuse App\\Http\\Controllers\\Api\\DirectBossController;\nuse App\\Http\\Controllers\\Api\\PermissionController;\nuse App\\Http\\Controllers\\Api\\ApplicationController;\nuse App\\Http\\Controllers\\Api\\AwardApplicationsController;\nuse App\\Http\\Controllers\\Api\\PositionEmployeesController;\nuse App\\Http\\Controllers\\Api\\TechnicalCommitteeController;\nuse App\\Http\\Controllers\\Api\\DirectBossEmployeesController;\nuse App\\Http\\Controllers\\Api\\SupervisorCommitteeController;\nuse App\\Http\\Controllers\\Api\\PositionDirectBossesController;\nuse App\\Http\\Controllers\\Api\\DirectBossApplicationsController;\nuse App\\Http\\Controllers\\Api\\TechnicalCommitteeApplicationsController;\nuse App\\Http\\Controllers\\Api\\SupervisorCommitteeApplicationsController;\n\n/*\n|--------------------------------------------------------------------------\n| API Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register API routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| is assigned the \"api\" middleware group. Enjoy building your API!\n|\n*/\n\nRoute::post('/login', [AuthController::class, 'login'])->name('api.login');\n\nRoute::middleware('auth:sanctum')\n    ->get('/user', function (Request $request) {\n        return $request->user();\n    })\n    ->name('api.user');\n\nRoute::name('api.')\n    ->middleware('auth:sanctum')\n    ->group(function () {\n        Route::apiResource('roles', RoleController::class);\n        Route::apiResource('permissions', PermissionController::class);\n\n        Route::apiResource('applications', ApplicationController::class);\n\n        Route::apiResource('awards', AwardController::class);\n\n        // Award Applications\n        Route::get('/awards/{award}/applications', [\n            AwardApplicationsController::class,\n            'index',\n        ])->name('awards.applications.index');\n        Route::post('/awards/{award}/applications', [\n            AwardApplicationsController::class,\n            'store',\n        ])->name('awards.applications.store');\n\n        Route::apiResource('positions', PositionController::class);\n\n        // Position Employees\n        Route::get('/positions/{position}/employees', [\n            PositionEmployeesController::class,\n            'index',\n        ])->name('positions.employees.index');\n        Route::post('/positions/{position}/employees', [\n            PositionEmployeesController::class,\n            'store',\n        ])->name('positions.employees.store');\n\n        // Position Direct Bosses\n        Route::get('/positions/{position}/direct-bosses', [\n            PositionDirectBossesController::class,\n            'index',\n        ])->name('positions.direct-bosses.index');\n        Route::post('/positions/{position}/direct-bosses', [\n            PositionDirectBossesController::class,\n            'store',\n        ])->name('positions.direct-bosses.store');\n\n        Route::apiResource('users', UserController::class);\n\n        Route::apiResource('direct-bosses', DirectBossController::class);\n\n        // DirectBoss Employees\n        Route::get('/direct-bosses/{directBoss}/employees', [\n            DirectBossEmployeesController::class,\n            'index',\n        ])->name('direct-bosses.employees.index');\n        Route::post('/direct-bosses/{directBoss}/employees', [\n            DirectBossEmployeesController::class,\n            'store',\n        ])->name('direct-bosses.employees.store');\n\n        // DirectBoss Applications\n        Route::get('/direct-bosses/{directBoss}/applications', [\n            DirectBossApplicationsController::class,\n            'index',\n        ])->name('direct-bosses.applications.index');\n        Route::post('/direct-bosses/{directBoss}/applications', [\n            DirectBossApplicationsController::class,\n            'store',\n        ])->name('direct-bosses.applications.store');\n\n        Route::apiResource('employees', EmployeeController::class);\n\n        Route::apiResource(\n            'supervisor-committees',\n            SupervisorCommitteeController::class\n        );\n\n        // SupervisorCommittee Applications\n        Route::get(\n            '/supervisor-committees/{supervisorCommittee}/applications',\n            [SupervisorCommitteeApplicationsController::class, 'index']\n        )->name('supervisor-committees.applications.index');\n        Route::post(\n            '/supervisor-committees/{supervisorCommittee}/applications',\n            [SupervisorCommitteeApplicationsController::class, 'store']\n        )->name('supervisor-committees.applications.store');\n\n        Route::apiResource(\n            'technical-committees',\n            TechnicalCommitteeController::class\n        );\n\n        // TechnicalCommittee Applications\n        Route::get('/technical-committees/{technicalCommittee}/applications', [\n            TechnicalCommitteeApplicationsController::class,\n            'index',\n        ])->name('technical-committees.applications.index');\n        Route::post('/technical-committees/{technicalCommittee}/applications', [\n            TechnicalCommitteeApplicationsController::class,\n            'store',\n        ])->name('technical-committees.applications.store');\n    });\n","module":"base","path":"/routes/api.php"},"/routes/web.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse App\\Http\\Controllers\\HomeController;\nuse App\\Http\\Controllers\\UserController;\nuse App\\Http\\Controllers\\RoleController;\nuse App\\Http\\Controllers\\AwardController;\nuse App\\Http\\Controllers\\PositionController;\nuse App\\Http\\Controllers\\EmployeeController;\nuse App\\Http\\Controllers\\DirectBossController;\nuse App\\Http\\Controllers\\PermissionController;\nuse App\\Http\\Controllers\\ApplicationController;\nuse App\\Http\\Controllers\\TechnicalCommitteeController;\nuse App\\Http\\Controllers\\SupervisorCommitteeController;\n\n/*\n|--------------------------------------------------------------------------\n| Web Routes\n|--------------------------------------------------------------------------\n|\n| Here is where you can register web routes for your application. These\n| routes are loaded by the RouteServiceProvider within a group which\n| contains the \"web\" middleware group. Now create something great!\n|\n*/\n\nRoute::get('/', function () {\n    return view('welcome');\n});\n\nAuth::routes();\n\nRoute::get('/home', [HomeController::class, 'index'])->name('home');\n\nRoute::prefix('/')\n    ->middleware('auth')\n    ->group(function () {\n        Route::resource('roles', RoleController::class);\n        Route::resource('permissions', PermissionController::class);\n\n        Route::resource('applications', ApplicationController::class);\n        Route::resource('awards', AwardController::class);\n        Route::resource('positions', PositionController::class);\n        Route::resource('users', UserController::class);\n        Route::resource('direct-bosses', DirectBossController::class);\n        Route::resource('employees', EmployeeController::class);\n        Route::resource(\n            'supervisor-committees',\n            SupervisorCommitteeController::class\n        );\n        Route::resource(\n            'technical-committees',\n            TechnicalCommitteeController::class\n        );\n    });\n","module":"base","path":"/routes/web.php"},"/resources/views/components/form-button.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'method' => 'POST',\n    'action'\n])\n\n<x-form method=\"{{ $method }}\" action=\"{{ $action }}\">\n    <div>\n        <button type=\"submit\" {{ $attributes }}>\n            {{ $slot }}\n        </button>\n    </div>\n</x-form>","module":"base","path":"/resources/views/components/form-button.blade.php"},"/resources/views/components/form.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'method' => 'POST',\n    'action',\n    'hasFiles' => false,\n    'model'\n])\n\n@php\n    $method = strtoupper($method);\n@endphp\n\n<form method=\"{{ $method !== 'GET' ? 'POST' : $method }}\" action=\"{{ $action }}\" {!! $hasFiles ? 'enctype=\"multipart/form-data\"' : '' !!} {{ $attributes }}>\n    @csrf\n    @if (!in_array($method, ['POST', 'GET']))\n        @method($method)\n    @endif\n    {{ $slot }}\n</form>","module":"base","path":"/resources/views/components/form.blade.php"},"/resources/views/components/inputs/basic.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n    'value',\n    'type' => 'text',\n    'min' => null,\n    'max' => null,\n    'step' => null,\n])\n\n@if($label ?? null)\n    @include('components.inputs.partials.label')\n@endif\n\n<input\n    type=\"{{ $type }}\"\n    id=\"{{ $name }}\"\n    name=\"{{ $name }}\"\n    value=\"{{ old($name, $value ?? '') }}\"\n    {{ ($required ?? false) ? 'required' : '' }}\n    {{ $attributes->merge(['class' => 'form-control']) }}\n    {{ $min ? \"min={$min}\" : '' }}\n    {{ $max ? \"max={$max}\" : '' }}\n    {{ $step ? \"step={$step}\" : '' }}\n    autocomplete=\"off\"\n>\n\n@error($name)\n    @include('components.inputs.partials.error')\n@enderror","module":"base","path":"/resources/views/components/inputs/basic.blade.php"},"/resources/views/components/inputs/checkbox.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'id',\n    'name',\n    'label',\n    'value',\n    'checked' => false,\n    'addHiddenValue' => true,\n    'hiddenValue' => 0,\n])\n\n@php\n    $checked = !! $checked\n@endphp\n\n<div class=\"form-check\">\n\n    {{-- Adds a hidden default value to be send if checked is false --}}\n    @if($addHiddenValue)\n    <input type=\"hidden\" id=\"{{  $id ?? $name }}-hidden\" name=\"{{ $name }}\" value=\"{{ $hiddenValue }}\">\n    @endif\n\n    <input\n        type=\"checkbox\"\n        id=\"{{ $id ?? $name }}\"\n        name=\"{{ $name }}\"\n        value=\"{{ $value ?? 1 }}\"\n        {{ $checked ? 'checked' : '' }}\n        {{ $attributes->merge(['class' => 'form-check-input']) }}\n    >\n\n    @if($label ?? null)\n        <label class=\"form-check-label\" for=\"{{ $id ?? $name }}\">\n            {{ $label }}\n        </label>\n    @endif\n</div>\n\n@error($name)\n    @include('components.inputs.partials.error')\n@enderror","module":"base","path":"/resources/views/components/inputs/checkbox.blade.php"},"/resources/views/components/inputs/date.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"date\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"/resources/views/components/inputs/date.blade.php"},"/resources/views/components/inputs/datetime.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"datetime-local\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"/resources/views/components/inputs/datetime.blade.php"},"/resources/views/components/inputs/email.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"email\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"/resources/views/components/inputs/email.blade.php"},"/resources/views/components/inputs/group.blade.php":{"deleteOnGeneration":true,"content":"<div {{ $attributes->merge(['class' => 'form-group']) }}>\n    {{ $slot }}\n</div>","module":"base","path":"/resources/views/components/inputs/group.blade.php"},"/resources/views/components/inputs/hidden.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'value',\n])\n\n<x-inputs.basic type=\"hidden\" :name=\"$name\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"/resources/views/components/inputs/hidden.blade.php"},"/resources/views/components/inputs/number.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n    'value',\n    'min' => null,\n    'max' => null,\n    'step' => null,\n])\n\n<x-inputs.basic type=\"number\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\" :min=\"$min\" :max=\"$max\" :step=\"$step\"></x-inputs.basic>","module":"base","path":"/resources/views/components/inputs/number.blade.php"},"/resources/views/components/inputs/partials/error.blade.php":{"deleteOnGeneration":true,"content":"<p class=\"text-danger\" role=\"alert\">{{ $message }}</p>","module":"base","path":"/resources/views/components/inputs/partials/error.blade.php"},"/resources/views/components/inputs/partials/label.blade.php":{"deleteOnGeneration":true,"content":"<label class=\"{{ ($required ?? false) ? 'label label-required ' : 'label ' }}\" for=\"{{ $name }}\">\n    {{ $label }}\n</label>","module":"base","path":"/resources/views/components/inputs/partials/label.blade.php"},"/resources/views/components/inputs/password.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n    'value' => '',\n])\n\n<x-inputs.basic type=\"password\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"/resources/views/components/inputs/password.blade.php"},"/resources/views/components/inputs/select.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n    'type' => 'text',\n])\n\n@if($label ?? null)\n    @include('components.inputs.partials.label')\n@endif\n\n<select\n    id=\"{{ $name }}\"\n    name=\"{{ $name }}\"\n    {{ ($required ?? false) ? 'required' : '' }}\n    {{ $attributes->merge(['class' => 'form-control']) }}\n    autocomplete=\"off\"\n>{{ $slot }}</select>\n\n@error($name)\n    @include('components.inputs.partials.error')\n@enderror","module":"base","path":"/resources/views/components/inputs/select.blade.php"},"/resources/views/components/inputs/text.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"text\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"/resources/views/components/inputs/text.blade.php"},"/resources/views/components/inputs/textarea.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n])\n\n@if($label ?? null)\n    @include('components.inputs.partials.label')\n@endif\n\n<textarea \n    id=\"{{ $name }}\"\n    name=\"{{ $name }}\" \n    rows=\"3\"\n    {{ ($required ?? false) ? 'required' : '' }}\n    {{ $attributes->merge(['class' => 'form-control']) }}\n    autocomplete=\"off\"\n>{{$slot}}</textarea>\n\n@error($name)\n    @include('components.inputs.partials.error')\n@enderror","module":"base","path":"/resources/views/components/inputs/textarea.blade.php"},"/resources/views/components/inputs/url.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'name',\n    'label',\n    'value',\n])\n\n<x-inputs.basic type=\"url\" :name=\"$name\" label=\"{{ $label ?? ''}}\" :value=\"$value ?? ''\" :attributes=\"$attributes\"></x-inputs.basic>","module":"base","path":"/resources/views/components/inputs/url.blade.php"},"/resources/views/components/modal.blade.php":{"deleteOnGeneration":true,"content":"{{-- \n    This modal was copied from Jetstrap components,\n    an awesome package for adapting Jetstrem for Bootstrap:\n\n    https://github.com/nascent-africa/jetstrap\n--}}\n\n@props(['id', 'maxWidth', 'modal' => false])\n\n@php\n$id = $id ?? md5($attributes->wire('model'));\nswitch ($maxWidth ?? '') {\n    case 'sm':\n        $maxWidth = ' modal-sm';\n        break;\n    case 'md':\n        $maxWidth = '';\n        break;\n    case 'lg':\n        $maxWidth = ' modal-lg';\n        break;\n    case 'xl':\n        $maxWidth = ' modal-xl';\n        break;\n    case '2xl':\n    default:\n        $maxWidth = '';\n        break;\n}\n@endphp\n\n<!-- Modal -->\n<div \n    x-data=\"{\n        show: @entangle($attributes->wire('model')).defer,\n    }\"\n    x-init=\"() => {\n        let modal = $('#{{ $id }}');\n        $watch('show', value => {\n            if (value) {\n                modal.modal('show')\n            } else {\n                modal.modal('hide')\n            }\n        });\n        modal.on('hide.bs.modal', function () {\n            show = false\n        })\n    }\"\n    wire:ignore.self \n    class=\"modal fade\" \n    tabindex=\"-1\" \n    id=\"{{ $id }}\" \n    aria-labelledby=\"{{ $id }}\" \n    aria-hidden=\"true\"\n    x-ref=\"{{ $id }}\"\n>\n    <div class=\"modal-dialog{{ $maxWidth }}\">\n        {{ $slot }}\n    </div>\n</div>","module":"base","path":"/resources/views/components/modal.blade.php"},"/resources/views/components/partials/thumbnail.blade.php":{"deleteOnGeneration":true,"content":"@props([\n    'src',\n    'size' => 50,\n])\n\n@if($src)\n<img src=\"{{ $src }}\" class=\"border rounded\" style=\"width: {{ $size }}px; height: {{ $size }}px; object-fit: cover;\">\n@else\n<div class=\"border rounded bg-light\" style=\"width: {{ $size }}px; height: {{ $size }}px;\"></div>\n@endif","module":"base","path":"/resources/views/components/partials/thumbnail.blade.php"},"/app/Traits/HasUUID.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Traits;\n\nuse Illuminate\\Support\\Str;\n\ntrait HasUUID\n{\n    protected static function bootHasUUID()\n    {\n        static::creating(function ($model) {\n            if (! $model->getKey()) {\n                $model->{$model->getKeyName()} = (string) Str::uuid();\n            }\n        });\n    }\n\n    /**\n     * Overriding default incrementing settings\n     *\n     * @return void\n     */\n    public function getIncrementing()\n    {\n        return false;\n    }\n\n    /**\n     * Overriding default key type\n     *\n     * @return void\n     */\n    public function getKeyType()\n    {\n        return 'string';\n    }\n}","module":"base","path":"/app/Traits/HasUUID.php"},"/resources/views/layouts/app.blade.php":{"deleteOnGeneration":true,"content":"<!doctype html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        \n        <!-- CSRF Token -->\n        <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n        \n        <title>Ideal employee award [Imported]</title>\n        \n        <!-- Fonts -->\n        <link rel=\"dns-prefetch\" href=\"//fonts.gstatic.com\">\n        <link href=\"https://fonts.googleapis.com/css?family=Nunito\" rel=\"stylesheet\">\n        \n        <!-- Styles -->\n        <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.css\">\n        \n        <!-- Icons -->\n        <link href=\"https://unpkg.com/ionicons@4.5.10-0/dist/css/ionicons.min.css\" rel=\"stylesheet\">\n        \n        <script src=\"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\" defer></script>\n        \n        <!-- Scripts -->\n        @vite(['resources/sass/app.scss', 'resources/js/app.js'])\n\n        \n        <script type=\"module\">\n            import hotwiredTurbo from 'https://cdn.skypack.dev/@hotwired/turbo';\n        </script>\n        \n        @livewireStyles\n    </head>\n    \n    <body>\n        <div id=\"app\">\n            @include('layouts.nav')\n        \n            <main class=\"py-4\">\n                @yield('content')\n            </main>\n        </div>\n\n        @stack('modals')\n        \n        @livewireScripts\n        \n        <script src=\"https://cdn.jsdelivr.net/gh/livewire/turbolinks@v0.1.x/dist/livewire-turbolinks.js\" data-turbolinks-eval=\"false\" data-turbo-eval=\"false\"></script>\n        \n        @stack('scripts')\n        \n        <script src=\"https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js\"></script>\n        \n        @if (session()->has('success')) \n        <script>\n            var notyf = new Notyf({dismissible: true})\n            notyf.success('{{ session('success') }}')\n        </script> \n        @endif\n        \n        <script>\n            /* Simple Alpine Image Viewer */\n            document.addEventListener('alpine:init', () => {\n                Alpine.data('imageViewer', (src = '') => {\n                    return {\n                        imageUrl: src,\n        \n                        refreshUrl() {\n                            this.imageUrl = this.$el.getAttribute(\"image-url\")\n                        },\n        \n                        fileChosen(event) {\n                            this.fileToDataUrl(event, src => this.imageUrl = src)\n                        },\n        \n                        fileToDataUrl(event, callback) {\n                            if (! event.target.files.length) return\n        \n                            let file = event.target.files[0],\n                                reader = new FileReader()\n        \n                            reader.readAsDataURL(file)\n                            reader.onload = e => callback(e.target.result)\n                        },\n                    }\n                })\n            })\n        </script>\n    </body>\n</html>","module":"base","path":"/resources/views/layouts/app.blade.php"},"/resources/views/layouts/nav.blade.php":{"deleteOnGeneration":true,"content":"<nav class=\"navbar navbar-expand-md navbar-light bg-white shadow-sm p-2\">\n    <div class=\"container\">\n        \n        <a class=\"navbar-brand text-primary font-weight-bold text-uppercase\" href=\"{{ url('/') }}\">\n            Ideal employee award [Imported]\n        </a>\n\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"{{ __('Toggle navigation') }}\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <!-- Left Side Of Navbar -->\n            <ul class=\"navbar-nav mr-auto\">\n                @auth\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{{ route('home') }}\">Dashboard</a>\n                    </li>\n                    <li class=\"nav-item dropdown\">\n                        <a id=\"navbarDropdown\" class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" v-pre>\n                            Apps <span class=\"caret\"></span>\n                        </a>\n                        \n                        <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"navbarDropdown\">\n                            @can('viewAny', App\\Models\\Application::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('applications.index') }}\">Applications</a>\n                            @endcan\n                            @can('viewAny', App\\Models\\Award::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('awards.index') }}\">Awards</a>\n                            @endcan\n                            @can('viewAny', App\\Models\\Position::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('positions.index') }}\">Positions</a>\n                            @endcan\n                            @can('viewAny', App\\Models\\User::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('users.index') }}\">Users</a>\n                            @endcan\n                            @can('viewAny', App\\Models\\DirectBoss::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('direct-bosses.index') }}\">Direct Bosses</a>\n                            @endcan\n                            @can('viewAny', App\\Models\\Employee::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('employees.index') }}\">Employees</a>\n                            @endcan\n                            @can('viewAny', App\\Models\\SupervisorCommittee::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('supervisor-committees.index') }}\">Supervisor Committees</a>\n                            @endcan\n                            @can('viewAny', App\\Models\\TechnicalCommittee::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('technical-committees.index') }}\">Technical Committees</a>\n                            @endcan\n                        </div>\n\n                    </li>\n                    @if (Auth::user()->can('viewAny', Spatie\\Permission\\Models\\Role::class) || \n                        Auth::user()->can('viewAny', Spatie\\Permission\\Models\\Permission::class))\n                    <li class=\"nav-item dropdown\">\n                        <a id=\"navbarDropdown\" class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" v-pre>\n                            Access Management <span class=\"caret\"></span>\n                        </a>\n                        \n                        <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"navbarDropdown\">\n                            @can('viewAny', Spatie\\Permission\\Models\\Role::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('roles.index') }}\">Roles</a>\n                            @endcan\n                    \n                            @can('viewAny', Spatie\\Permission\\Models\\Permission::class)\n                            <a class=\"dropdown-item\" href=\"{{ route('permissions.index') }}\">Permissions</a>\n                            @endcan\n                        </div>\n                    </li>\n                    @endif\n                @endauth\n            </ul>\n\n            <!-- Right Side Of Navbar -->\n            <ul class=\"navbar-nav ml-auto\">\n                <!-- Authentication Links -->\n                @guest\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{{ route('login') }}\">{{ __('Login') }}</a>\n                    </li>\n                    @if (Route::has('register'))\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{{ route('register') }}\">{{ __('Register') }}</a>\n                        </li>\n                    @endif\n                @else\n                    <li class=\"nav-item dropdown\">\n                        <a id=\"navbarDropdown\" class=\"nav-link dropdown-toggle\" href=\"#\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" v-pre>\n                            {{ Auth::user()->name }} <span class=\"caret\"></span>\n                        </a>\n\n                        <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"navbarDropdown\">\n                            <a class=\"dropdown-item\" href=\"{{ route('logout') }}\"\n                               onclick=\"event.preventDefault();\n                                             document.getElementById('logout-form').submit();\">\n                                {{ __('Logout') }}\n                            </a>\n\n                            <form id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" style=\"display: none;\">\n                                @csrf\n                            </form>\n                        </div>\n                    </li>\n                @endguest\n            </ul>\n        </div>\n    </div>\n</nav>","module":"base","path":"/resources/views/layouts/nav.blade.php"},"/database/factories/ApplicationFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Application;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass ApplicationFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Application::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'rank' => $this->faker->randomNumber,\n            'direct_boss_points' => $this->faker->randomNumber,\n            'supervisor_committee_points' => $this->faker->randomNumber,\n            'technical_committee_points' => $this->faker->randomNumber,\n            'employee_points' => $this->faker->randomNumber,\n            'direct_boss_id' => \\App\\Models\\DirectBoss::factory(),\n            'employee_id' => \\App\\Models\\Employee::factory(),\n            'supervisor_committee_id' => \\App\\Models\\SupervisorCommittee::factory(),\n            'technical_committee_id' => \\App\\Models\\TechnicalCommittee::factory(),\n            'award_id' => \\App\\Models\\Award::factory(),\n        ];\n    }\n}\n","module":"entity:7","path":"/database/factories/ApplicationFactory.php"},"/database/factories/AwardFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Award;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass AwardFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Award::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'type' => $this->faker->word,\n            'max_employee_points' => $this->faker->randomNumber,\n        ];\n    }\n}\n","module":"entity:6","path":"/database/factories/AwardFactory.php"},"/database/factories/DirectBossFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\DirectBoss;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass DirectBossFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = DirectBoss::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'phone' => $this->faker->phoneNumber,\n            'position_id' => \\App\\Models\\Position::factory(),\n        ];\n    }\n}\n","module":"entity:8","path":"/database/factories/DirectBossFactory.php"},"/database/factories/EmployeeFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Employee;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass EmployeeFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Employee::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'name' => $this->faker->name(),\n            'phone' => $this->faker->phoneNumber,\n            'email' => $this->faker->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'position_id' => \\App\\Models\\Position::factory(),\n            'direct_boss_id' => \\App\\Models\\DirectBoss::factory(),\n        ];\n    }\n}\n","module":"entity:5","path":"/database/factories/EmployeeFactory.php"},"/database/factories/PositionFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\Position;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass PositionFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = Position::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'name' => $this->faker->name(),\n        ];\n    }\n}\n","module":"entity:2","path":"/database/factories/PositionFactory.php"},"/database/factories/SupervisorCommitteeFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse Illuminate\\Support\\Str;\nuse App\\Models\\SupervisorCommittee;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass SupervisorCommitteeFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = SupervisorCommittee::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'phone' => $this->faker->phoneNumber,\n        ];\n    }\n}\n","module":"entity:3","path":"/database/factories/SupervisorCommitteeFactory.php"},"/database/factories/TechnicalCommitteeFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse Illuminate\\Support\\Str;\nuse App\\Models\\TechnicalCommittee;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass TechnicalCommitteeFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = TechnicalCommittee::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'employee_number' => $this->faker->unique->randomNumber,\n            'phone' => $this->faker->phoneNumber,\n        ];\n    }\n}\n","module":"entity:4","path":"/database/factories/TechnicalCommitteeFactory.php"},"/database/factories/UserFactory.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass UserFactory extends Factory\n{\n    /**\n     * The name of the factory's corresponding model.\n     *\n     * @var string\n     */\n    protected $model = User::class;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array\n     */\n    public function definition()\n    {\n        return [\n            'name' => $this->faker->name(),\n            'email' => $this->faker->unique->email,\n            'email_verified_at' => now(),\n            'password' => \\Hash::make('password'),\n            'remember_token' => Str::random(10),\n        ];\n    }\n\n    /**\n     * Indicate that the model's email address should be unverified.\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Factories\\Factory\n     */\n    public function unverified()\n    {\n        return $this->state(function (array $attributes) {\n            return [\n                'email_verified_at' => null,\n            ];\n        });\n    }\n}\n","module":"entity:1","path":"/database/factories/UserFactory.php"},"/database/seeders/ApplicationSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Application;\nuse Illuminate\\Database\\Seeder;\n\nclass ApplicationSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Application::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:7","path":"/database/seeders/ApplicationSeeder.php"},"/database/seeders/AwardSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Award;\nuse Illuminate\\Database\\Seeder;\n\nclass AwardSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Award::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:6","path":"/database/seeders/AwardSeeder.php"},"/database/seeders/DirectBossSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\DirectBoss;\nuse Illuminate\\Database\\Seeder;\n\nclass DirectBossSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        DirectBoss::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:8","path":"/database/seeders/DirectBossSeeder.php"},"/database/seeders/EmployeeSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Employee;\nuse Illuminate\\Database\\Seeder;\n\nclass EmployeeSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Employee::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:5","path":"/database/seeders/EmployeeSeeder.php"},"/database/seeders/PositionSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\Position;\nuse Illuminate\\Database\\Seeder;\n\nclass PositionSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Position::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:2","path":"/database/seeders/PositionSeeder.php"},"/database/seeders/SupervisorCommitteeSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse App\\Models\\SupervisorCommittee;\n\nclass SupervisorCommitteeSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        SupervisorCommittee::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:3","path":"/database/seeders/SupervisorCommitteeSeeder.php"},"/database/seeders/TechnicalCommitteeSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse App\\Models\\TechnicalCommittee;\n\nclass TechnicalCommitteeSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        TechnicalCommittee::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:4","path":"/database/seeders/TechnicalCommitteeSeeder.php"},"/database/seeders/UserSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse App\\Models\\User;\nuse Illuminate\\Database\\Seeder;\n\nclass UserSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        User::factory()\n            ->count(5)\n            ->create();\n    }\n}\n","module":"entity:1","path":"/database/seeders/UserSeeder.php"},"/database/seeders/DatabaseSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\n\nclass DatabaseSeeder extends Seeder\n{\n    /**\n     * Seed the application's database.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        // Adding an admin user\n        $user = \\App\\Models\\User::factory()\n            ->count(1)\n            ->create([\n                'email' => 'admin@admin.com',\n                'password' => \\Hash::make('admin'),\n            ]);\n        $this->call(PermissionsSeeder::class);\n\n        $this->call(ApplicationSeeder::class);\n        $this->call(AwardSeeder::class);\n        $this->call(DirectBossSeeder::class);\n        $this->call(EmployeeSeeder::class);\n        $this->call(PositionSeeder::class);\n        $this->call(SupervisorCommitteeSeeder::class);\n        $this->call(TechnicalCommitteeSeeder::class);\n        $this->call(UserSeeder::class);\n    }\n}\n","module":"base","path":"/database/seeders/DatabaseSeeder.php"},"/app/Policies/ApplicationPolicy.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Application;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass ApplicationPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the application can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return $user->hasPermissionTo('list applications');\n    }\n\n    /**\n     * Determine whether the application can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Application  $model\n     * @return mixed\n     */\n    public function view(User $user, Application $model)\n    {\n        return $user->hasPermissionTo('view applications');\n    }\n\n    /**\n     * Determine whether the application can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasPermissionTo('create applications');\n    }\n\n    /**\n     * Determine whether the application can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Application  $model\n     * @return mixed\n     */\n    public function update(User $user, Application $model)\n    {\n        return $user->hasPermissionTo('update applications');\n    }\n\n    /**\n     * Determine whether the application can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Application  $model\n     * @return mixed\n     */\n    public function delete(User $user, Application $model)\n    {\n        return $user->hasPermissionTo('delete applications');\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Application  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return $user->hasPermissionTo('delete applications');\n    }\n\n    /**\n     * Determine whether the application can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Application  $model\n     * @return mixed\n     */\n    public function restore(User $user, Application $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the application can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Application  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Application $model)\n    {\n        return false;\n    }\n}\n","module":"entity:7","path":"/app/Policies/ApplicationPolicy.php"},"/app/Policies/AwardPolicy.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Award;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass AwardPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the award can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return $user->hasPermissionTo('list awards');\n    }\n\n    /**\n     * Determine whether the award can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Award  $model\n     * @return mixed\n     */\n    public function view(User $user, Award $model)\n    {\n        return $user->hasPermissionTo('view awards');\n    }\n\n    /**\n     * Determine whether the award can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasPermissionTo('create awards');\n    }\n\n    /**\n     * Determine whether the award can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Award  $model\n     * @return mixed\n     */\n    public function update(User $user, Award $model)\n    {\n        return $user->hasPermissionTo('update awards');\n    }\n\n    /**\n     * Determine whether the award can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Award  $model\n     * @return mixed\n     */\n    public function delete(User $user, Award $model)\n    {\n        return $user->hasPermissionTo('delete awards');\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Award  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return $user->hasPermissionTo('delete awards');\n    }\n\n    /**\n     * Determine whether the award can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Award  $model\n     * @return mixed\n     */\n    public function restore(User $user, Award $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the award can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Award  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Award $model)\n    {\n        return false;\n    }\n}\n","module":"entity:6","path":"/app/Policies/AwardPolicy.php"},"/app/Policies/DirectBossPolicy.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\DirectBoss;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass DirectBossPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the directBoss can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return $user->hasPermissionTo('list directbosses');\n    }\n\n    /**\n     * Determine whether the directBoss can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\DirectBoss  $model\n     * @return mixed\n     */\n    public function view(User $user, DirectBoss $model)\n    {\n        return $user->hasPermissionTo('view directbosses');\n    }\n\n    /**\n     * Determine whether the directBoss can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasPermissionTo('create directbosses');\n    }\n\n    /**\n     * Determine whether the directBoss can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\DirectBoss  $model\n     * @return mixed\n     */\n    public function update(User $user, DirectBoss $model)\n    {\n        return $user->hasPermissionTo('update directbosses');\n    }\n\n    /**\n     * Determine whether the directBoss can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\DirectBoss  $model\n     * @return mixed\n     */\n    public function delete(User $user, DirectBoss $model)\n    {\n        return $user->hasPermissionTo('delete directbosses');\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\DirectBoss  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return $user->hasPermissionTo('delete directbosses');\n    }\n\n    /**\n     * Determine whether the directBoss can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\DirectBoss  $model\n     * @return mixed\n     */\n    public function restore(User $user, DirectBoss $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the directBoss can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\DirectBoss  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, DirectBoss $model)\n    {\n        return false;\n    }\n}\n","module":"entity:8","path":"/app/Policies/DirectBossPolicy.php"},"/app/Policies/EmployeePolicy.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Employee;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass EmployeePolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the employee can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return $user->hasPermissionTo('list employees');\n    }\n\n    /**\n     * Determine whether the employee can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Employee  $model\n     * @return mixed\n     */\n    public function view(User $user, Employee $model)\n    {\n        return $user->hasPermissionTo('view employees');\n    }\n\n    /**\n     * Determine whether the employee can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasPermissionTo('create employees');\n    }\n\n    /**\n     * Determine whether the employee can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Employee  $model\n     * @return mixed\n     */\n    public function update(User $user, Employee $model)\n    {\n        return $user->hasPermissionTo('update employees');\n    }\n\n    /**\n     * Determine whether the employee can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Employee  $model\n     * @return mixed\n     */\n    public function delete(User $user, Employee $model)\n    {\n        return $user->hasPermissionTo('delete employees');\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Employee  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return $user->hasPermissionTo('delete employees');\n    }\n\n    /**\n     * Determine whether the employee can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Employee  $model\n     * @return mixed\n     */\n    public function restore(User $user, Employee $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the employee can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Employee  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Employee $model)\n    {\n        return false;\n    }\n}\n","module":"entity:5","path":"/app/Policies/EmployeePolicy.php"},"/app/Policies/PositionPolicy.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\Position;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass PositionPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the position can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return $user->hasPermissionTo('list positions');\n    }\n\n    /**\n     * Determine whether the position can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Position  $model\n     * @return mixed\n     */\n    public function view(User $user, Position $model)\n    {\n        return $user->hasPermissionTo('view positions');\n    }\n\n    /**\n     * Determine whether the position can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasPermissionTo('create positions');\n    }\n\n    /**\n     * Determine whether the position can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Position  $model\n     * @return mixed\n     */\n    public function update(User $user, Position $model)\n    {\n        return $user->hasPermissionTo('update positions');\n    }\n\n    /**\n     * Determine whether the position can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Position  $model\n     * @return mixed\n     */\n    public function delete(User $user, Position $model)\n    {\n        return $user->hasPermissionTo('delete positions');\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Position  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return $user->hasPermissionTo('delete positions');\n    }\n\n    /**\n     * Determine whether the position can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Position  $model\n     * @return mixed\n     */\n    public function restore(User $user, Position $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the position can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\Position  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, Position $model)\n    {\n        return false;\n    }\n}\n","module":"entity:2","path":"/app/Policies/PositionPolicy.php"},"/app/Policies/SupervisorCommitteePolicy.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\SupervisorCommittee;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass SupervisorCommitteePolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the supervisorCommittee can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return $user->hasPermissionTo('list supervisorcommittees');\n    }\n\n    /**\n     * Determine whether the supervisorCommittee can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\SupervisorCommittee  $model\n     * @return mixed\n     */\n    public function view(User $user, SupervisorCommittee $model)\n    {\n        return $user->hasPermissionTo('view supervisorcommittees');\n    }\n\n    /**\n     * Determine whether the supervisorCommittee can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasPermissionTo('create supervisorcommittees');\n    }\n\n    /**\n     * Determine whether the supervisorCommittee can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\SupervisorCommittee  $model\n     * @return mixed\n     */\n    public function update(User $user, SupervisorCommittee $model)\n    {\n        return $user->hasPermissionTo('update supervisorcommittees');\n    }\n\n    /**\n     * Determine whether the supervisorCommittee can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\SupervisorCommittee  $model\n     * @return mixed\n     */\n    public function delete(User $user, SupervisorCommittee $model)\n    {\n        return $user->hasPermissionTo('delete supervisorcommittees');\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\SupervisorCommittee  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return $user->hasPermissionTo('delete supervisorcommittees');\n    }\n\n    /**\n     * Determine whether the supervisorCommittee can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\SupervisorCommittee  $model\n     * @return mixed\n     */\n    public function restore(User $user, SupervisorCommittee $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the supervisorCommittee can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\SupervisorCommittee  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, SupervisorCommittee $model)\n    {\n        return false;\n    }\n}\n","module":"entity:3","path":"/app/Policies/SupervisorCommitteePolicy.php"},"/app/Policies/TechnicalCommitteePolicy.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse App\\Models\\TechnicalCommittee;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass TechnicalCommitteePolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the technicalCommittee can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return $user->hasPermissionTo('list technicalcommittees');\n    }\n\n    /**\n     * Determine whether the technicalCommittee can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\TechnicalCommittee  $model\n     * @return mixed\n     */\n    public function view(User $user, TechnicalCommittee $model)\n    {\n        return $user->hasPermissionTo('view technicalcommittees');\n    }\n\n    /**\n     * Determine whether the technicalCommittee can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasPermissionTo('create technicalcommittees');\n    }\n\n    /**\n     * Determine whether the technicalCommittee can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\TechnicalCommittee  $model\n     * @return mixed\n     */\n    public function update(User $user, TechnicalCommittee $model)\n    {\n        return $user->hasPermissionTo('update technicalcommittees');\n    }\n\n    /**\n     * Determine whether the technicalCommittee can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\TechnicalCommittee  $model\n     * @return mixed\n     */\n    public function delete(User $user, TechnicalCommittee $model)\n    {\n        return $user->hasPermissionTo('delete technicalcommittees');\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\TechnicalCommittee  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return $user->hasPermissionTo('delete technicalcommittees');\n    }\n\n    /**\n     * Determine whether the technicalCommittee can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\TechnicalCommittee  $model\n     * @return mixed\n     */\n    public function restore(User $user, TechnicalCommittee $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the technicalCommittee can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\TechnicalCommittee  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, TechnicalCommittee $model)\n    {\n        return false;\n    }\n}\n","module":"entity:4","path":"/app/Policies/TechnicalCommitteePolicy.php"},"/app/Policies/UserPolicy.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\n\nclass UserPolicy\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the user can view any models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function viewAny(User $user)\n    {\n        return $user->hasPermissionTo('list users');\n    }\n\n    /**\n     * Determine whether the user can view the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function view(User $user, User $model)\n    {\n        return $user->hasPermissionTo('view users');\n    }\n\n    /**\n     * Determine whether the user can create models.\n     *\n     * @param  App\\Models\\User  $user\n     * @return mixed\n     */\n    public function create(User $user)\n    {\n        return $user->hasPermissionTo('create users');\n    }\n\n    /**\n     * Determine whether the user can update the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function update(User $user, User $model)\n    {\n        return $user->hasPermissionTo('update users');\n    }\n\n    /**\n     * Determine whether the user can delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function delete(User $user, User $model)\n    {\n        return $user->hasPermissionTo('delete users');\n    }\n\n    /**\n     * Determine whether the user can delete multiple instances of the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function deleteAny(User $user)\n    {\n        return $user->hasPermissionTo('delete users');\n    }\n\n    /**\n     * Determine whether the user can restore the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function restore(User $user, User $model)\n    {\n        return false;\n    }\n\n    /**\n     * Determine whether the user can permanently delete the model.\n     *\n     * @param  App\\Models\\User  $user\n     * @param  App\\Models\\User  $model\n     * @return mixed\n     */\n    public function forceDelete(User $user, User $model)\n    {\n        return false;\n    }\n}\n","module":"entity:1","path":"/app/Policies/UserPolicy.php"},"/database/migrations/2023_03_11_000008_create_applications_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('applications', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->unsignedBigInteger('direct_boss_id');\n            $table->unsignedBigInteger('employee_id');\n            $table->unsignedBigInteger('supervisor_committee_id');\n            $table->unsignedBigInteger('technical_committee_id');\n            $table->unsignedBigInteger('award_id');\n            $table\n                ->unsignedBigInteger('rank')\n                ->default(0)\n                ->nullable();\n            $table\n                ->unsignedInteger('direct_boss_points')\n                ->default(0)\n                ->nullable();\n            $table\n                ->unsignedInteger('supervisor_committee_points')\n                ->default(0)\n                ->nullable();\n            $table\n                ->unsignedInteger('technical_committee_points')\n                ->default(0)\n                ->nullable();\n            $table\n                ->unsignedBigInteger('employee_points')\n                ->default(0)\n                ->nullable();\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('applications');\n    }\n};\n","module":"entity:7","path":"/database/migrations/2023_03_11_000008_create_applications_table.php"},"/database/migrations/2023_03_11_000009_create_awards_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('awards', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('type');\n            $table\n                ->unsignedBigInteger('max_employee_points')\n                ->default(0)\n                ->nullable();\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('awards');\n    }\n};\n","module":"entity:6","path":"/database/migrations/2023_03_11_000009_create_awards_table.php"},"/database/migrations/2023_03_11_000010_create_direct_bosses_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('direct_bosses', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->unsignedBigInteger('employee_number')->unique();\n            $table->string('phone')->nullable();\n            $table->unsignedBigInteger('position_id');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('direct_bosses');\n    }\n};\n","module":"entity:8","path":"/database/migrations/2023_03_11_000010_create_direct_bosses_table.php"},"/database/migrations/2023_03_11_000011_create_employees_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('employees', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('name');\n            $table->string('phone');\n            $table->string('email');\n            $table->unsignedBigInteger('employee_number')->unique();\n            $table->unsignedBigInteger('position_id');\n            $table->unsignedBigInteger('direct_boss_id');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('employees');\n    }\n};\n","module":"entity:5","path":"/database/migrations/2023_03_11_000011_create_employees_table.php"},"/database/migrations/2023_03_11_000012_create_positions_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('positions', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('name');\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('positions');\n    }\n};\n","module":"entity:2","path":"/database/migrations/2023_03_11_000012_create_positions_table.php"},"/database/migrations/2023_03_11_000013_create_supervisor_committees_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('supervisor_committees', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->unsignedBigInteger('employee_number')->unique();\n            $table->string('phone')->nullable();\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('supervisor_committees');\n    }\n};\n","module":"entity:3","path":"/database/migrations/2023_03_11_000013_create_supervisor_committees_table.php"},"/database/migrations/2023_03_11_000014_create_technical_committees_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('technical_committees', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->unsignedBigInteger('employee_number')->unique();\n            $table->string('phone')->nullable();\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('technical_committees');\n    }\n};\n","module":"entity:4","path":"/database/migrations/2023_03_11_000014_create_technical_committees_table.php"},"/database/migrations/2014_10_12_000000_create_users_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->bigIncrements('id');\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->timestamp('email_verified_at')->nullable();\n            $table->string('password');\n            $table->string('remember_token', 100)->nullable();\n            $table->text('two_factor_secret')->nullable();\n            $table->text('two_factor_recovery_codes')->nullable();\n            $table->timestamp('two_factor_confirmed_at')->nullable();\n            $table->foreignId('current_team_id')->nullable();\n            $table->text('profile_photo_path')->nullable();\n\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n};\n","module":"base","path":"/database/migrations/2014_10_12_000000_create_users_table.php"},"/database/migrations/2023_03_11_009004_add_foreigns_to_applications_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('applications', function (Blueprint $table) {\n            $table\n                ->foreign('direct_boss_id')\n                ->references('id')\n                ->on('direct_bosses')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n\n            $table\n                ->foreign('employee_id')\n                ->references('id')\n                ->on('employees')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n\n            $table\n                ->foreign('supervisor_committee_id')\n                ->references('id')\n                ->on('supervisor_committees')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n\n            $table\n                ->foreign('technical_committee_id')\n                ->references('id')\n                ->on('technical_committees')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n\n            $table\n                ->foreign('award_id')\n                ->references('id')\n                ->on('awards')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('applications', function (Blueprint $table) {\n            $table->dropForeign(['direct_boss_id']);\n            $table->dropForeign(['employee_id']);\n            $table->dropForeign(['supervisor_committee_id']);\n            $table->dropForeign(['technical_committee_id']);\n            $table->dropForeign(['award_id']);\n        });\n    }\n};\n","module":"entity:7|entity:8|entity:5|entity:3|entity:4|entity:6","path":"/database/migrations/2023_03_11_009004_add_foreigns_to_applications_table.php"},"/database/migrations/2023_03_11_009005_add_foreigns_to_direct_bosses_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('direct_bosses', function (Blueprint $table) {\n            $table\n                ->foreign('position_id')\n                ->references('id')\n                ->on('positions')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('direct_bosses', function (Blueprint $table) {\n            $table->dropForeign(['position_id']);\n        });\n    }\n};\n","module":"entity:8|entity:2","path":"/database/migrations/2023_03_11_009005_add_foreigns_to_direct_bosses_table.php"},"/database/migrations/2023_03_11_009006_add_foreigns_to_employees_table.php":{"deleteOnGeneration":true,"content":"<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration {\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('employees', function (Blueprint $table) {\n            $table\n                ->foreign('position_id')\n                ->references('id')\n                ->on('positions')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n\n            $table\n                ->foreign('direct_boss_id')\n                ->references('id')\n                ->on('direct_bosses')\n                ->onUpdate('CASCADE')\n                ->onDelete('CASCADE');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('employees', function (Blueprint $table) {\n            $table->dropForeign(['position_id']);\n            $table->dropForeign(['direct_boss_id']);\n        });\n    }\n};\n","module":"entity:5|entity:2|entity:8","path":"/database/migrations/2023_03_11_009006_add_foreigns_to_employees_table.php"},"/app/Models/Application.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Application extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = [\n        'direct_boss_id',\n        'employee_id',\n        'supervisor_committee_id',\n        'technical_committee_id',\n        'award_id',\n        'rank',\n        'direct_boss_points',\n        'supervisor_committee_points',\n        'technical_committee_points',\n        'employee_points',\n    ];\n\n    protected $searchableFields = ['*'];\n\n    public function directBoss()\n    {\n        return $this->belongsTo(DirectBoss::class);\n    }\n\n    public function employee()\n    {\n        return $this->belongsTo(Employee::class);\n    }\n\n    public function supervisorCommittee()\n    {\n        return $this->belongsTo(SupervisorCommittee::class);\n    }\n\n    public function technicalCommittee()\n    {\n        return $this->belongsTo(TechnicalCommittee::class);\n    }\n\n    public function award()\n    {\n        return $this->belongsTo(Award::class);\n    }\n}\n","module":"entity:7","path":"/app/Models/Application.php"},"/app/Models/Award.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Award extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['type', 'max_employee_points'];\n\n    protected $searchableFields = ['*'];\n\n    public function applications()\n    {\n        return $this->hasMany(Application::class);\n    }\n}\n","module":"entity:6","path":"/app/Models/Award.php"},"/app/Models/DirectBoss.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass DirectBoss extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = [\n        'name',\n        'email',\n        'employee_number',\n        'phone',\n        'position_id',\n    ];\n\n    protected $searchableFields = ['*'];\n\n    protected $table = 'direct_bosses';\n\n    public function position()\n    {\n        return $this->belongsTo(Position::class);\n    }\n\n    public function employees()\n    {\n        return $this->hasMany(Employee::class);\n    }\n\n    public function applications()\n    {\n        return $this->hasMany(Application::class);\n    }\n}\n","module":"entity:8","path":"/app/Models/DirectBoss.php"},"/app/Models/Employee.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Employee extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = [\n        'name',\n        'phone',\n        'email',\n        'employee_number',\n        'position_id',\n        'direct_boss_id',\n    ];\n\n    protected $searchableFields = ['*'];\n\n    public function position()\n    {\n        return $this->belongsTo(Position::class);\n    }\n\n    public function directBoss()\n    {\n        return $this->belongsTo(DirectBoss::class);\n    }\n\n    public function application()\n    {\n        return $this->hasOne(Application::class);\n    }\n}\n","module":"entity:5","path":"/app/Models/Employee.php"},"/app/Models/Position.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Position extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['name'];\n\n    protected $searchableFields = ['*'];\n\n    public function employees()\n    {\n        return $this->hasMany(Employee::class);\n    }\n\n    public function directBosses()\n    {\n        return $this->hasMany(DirectBoss::class);\n    }\n}\n","module":"entity:2","path":"/app/Models/Position.php"},"/app/Models/SupervisorCommittee.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass SupervisorCommittee extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['name', 'email', 'employee_number', 'phone'];\n\n    protected $searchableFields = ['*'];\n\n    protected $table = 'supervisor_committees';\n\n    public function applications()\n    {\n        return $this->hasMany(Application::class);\n    }\n}\n","module":"entity:3","path":"/app/Models/SupervisorCommittee.php"},"/app/Models/TechnicalCommittee.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Scopes\\Searchable;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass TechnicalCommittee extends Model\n{\n    use HasFactory;\n    use Searchable;\n\n    protected $fillable = ['name', 'email', 'employee_number', 'phone'];\n\n    protected $searchableFields = ['*'];\n\n    protected $table = 'technical_committees';\n\n    public function applications()\n    {\n        return $this->hasMany(Application::class);\n    }\n}\n","module":"entity:4","path":"/app/Models/TechnicalCommittee.php"},"/app/Models/User.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models;\n\nuse Laravel\\Sanctum\\HasApiTokens;\nuse App\\Models\\Scopes\\Searchable;\nuse Spatie\\Permission\\Traits\\HasRoles;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Contracts\\Auth\\MustVerifyEmail;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable\n{\n    use HasRoles;\n    use Notifiable;\n    use HasFactory;\n    use Searchable;\n    use HasApiTokens;\n\n    protected $fillable = ['name', 'email', 'password'];\n\n    protected $searchableFields = ['*'];\n\n    protected $hidden = [\n        'password',\n        'remember_token',\n        'two_factor_secret',\n        'two_factor_recovery_codes',\n    ];\n\n    protected $casts = [\n        'email_verified_at' => 'datetime',\n        'two_factor_confirmed_at' => 'datetime',\n    ];\n\n    public function isSuperAdmin()\n    {\n        return $this->hasRole('super-admin');\n    }\n}\n","module":"entity:1","path":"/app/Models/User.php"},"/app/Models/Scopes/Searchable.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Models\\Scopes;\n\ntrait Searchable\n{\n    /**\n     * Search paginated items ordering by ID descending\n     *\n     * @param string $search\n     * @param integer $paginationQuantity\n     * @return void\n     */\n    public function scopeSearchLatestPaginated(\n        $query,\n        string $search,\n        $paginationQuantity = 10\n    ) {\n        return $query\n            ->search($search)\n            ->orderBy('updated_at', 'desc')\n            ->paginate($paginationQuantity);\n    }\n\n    /**\n     * Adds a scope to search the table based on the\n     * $searchableFields array inside the model\n     *\n     * @param [type] $query\n     * @param [type] $search\n     * @return void\n     */\n    public function scopeSearch($query, $search)\n    {\n        $query->where(function ($query) use ($search) {\n            foreach ($this->getSearchableFields() as $field) {\n                $query->orWhere($field, 'like', \"%{$search}%\");\n            }\n        });\n\n        return $query;\n    }\n\n    /**\n     * Returns the searchable fields. If $searchableFields is undefined,\n     * or is an empty array, or its first element is '*', it will search\n     * in all table fields\n     *\n     * @return array\n     */\n    protected function getSearchableFields()\n    {\n        if (isset($this->searchableFields) && count($this->searchableFields)) {\n            return $this->searchableFields[0] === '*'\n                ? $this->getAllModelTableFields()\n                : $this->searchableFields;\n        }\n\n        return $this->getAllModelTableFields();\n    }\n\n    /**\n     * Gets all fields from Model's table\n     *\n     * @return array\n     */\n    protected function getAllModelTableFields()\n    {\n        $tableName = $this->getTable();\n\n        return $this->getConnection()\n            ->getSchemaBuilder()\n            ->getColumnListing($tableName);\n    }\n}\n","module":"base","path":"/app/Models/Scopes/Searchable.php"},"/app/Http/Controllers/Api/AuthController.php":{"deleteOnGeneration":true,"content":"<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Validation\\ValidationException;\n\nclass AuthController extends Controller\n{\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function login(Request $request)\n    {\n        $credentials = $request->validate([\n            'email' => 'required|email',\n            'password' => 'required',\n        ]);\n\n        if (!auth()->attempt($credentials)) {\n            throw ValidationException::withMessages([\n                'email' => [trans('auth.failed')],\n            ]);\n        }\n\n        $user = User::whereEmail($request->email)->firstOrFail();\n\n        $token = $user->createToken('auth-token');\n\n        return response()->json([\n            'token' => $token->plainTextToken,\n        ]);\n    }\n}\n","module":"base","path":"/app/Http/Controllers/Api/AuthController.php"},"/database/seeders/PermissionsSeeder.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\nuse Spatie\\Permission\\PermissionRegistrar;\n\nclass PermissionsSeeder extends Seeder\n{\n    public function run()\n    {\n        // Reset cached roles and permissions\n        app()[PermissionRegistrar::class]->forgetCachedPermissions();\n\n        // Create default permissions\n        Permission::create(['name' => 'list applications']);\n        Permission::create(['name' => 'view applications']);\n        Permission::create(['name' => 'create applications']);\n        Permission::create(['name' => 'update applications']);\n        Permission::create(['name' => 'delete applications']);\n\n        Permission::create(['name' => 'list awards']);\n        Permission::create(['name' => 'view awards']);\n        Permission::create(['name' => 'create awards']);\n        Permission::create(['name' => 'update awards']);\n        Permission::create(['name' => 'delete awards']);\n\n        Permission::create(['name' => 'list directbosses']);\n        Permission::create(['name' => 'view directbosses']);\n        Permission::create(['name' => 'create directbosses']);\n        Permission::create(['name' => 'update directbosses']);\n        Permission::create(['name' => 'delete directbosses']);\n\n        Permission::create(['name' => 'list employees']);\n        Permission::create(['name' => 'view employees']);\n        Permission::create(['name' => 'create employees']);\n        Permission::create(['name' => 'update employees']);\n        Permission::create(['name' => 'delete employees']);\n\n        Permission::create(['name' => 'list positions']);\n        Permission::create(['name' => 'view positions']);\n        Permission::create(['name' => 'create positions']);\n        Permission::create(['name' => 'update positions']);\n        Permission::create(['name' => 'delete positions']);\n\n        Permission::create(['name' => 'list supervisorcommittees']);\n        Permission::create(['name' => 'view supervisorcommittees']);\n        Permission::create(['name' => 'create supervisorcommittees']);\n        Permission::create(['name' => 'update supervisorcommittees']);\n        Permission::create(['name' => 'delete supervisorcommittees']);\n\n        Permission::create(['name' => 'list technicalcommittees']);\n        Permission::create(['name' => 'view technicalcommittees']);\n        Permission::create(['name' => 'create technicalcommittees']);\n        Permission::create(['name' => 'update technicalcommittees']);\n        Permission::create(['name' => 'delete technicalcommittees']);\n\n        // Create user role and assign existing permissions\n        $currentPermissions = Permission::all();\n        $userRole = Role::create(['name' => 'user']);\n        $userRole->givePermissionTo($currentPermissions);\n\n        // Create admin exclusive permissions\n        Permission::create(['name' => 'list roles']);\n        Permission::create(['name' => 'view roles']);\n        Permission::create(['name' => 'create roles']);\n        Permission::create(['name' => 'update roles']);\n        Permission::create(['name' => 'delete roles']);\n\n        Permission::create(['name' => 'list permissions']);\n        Permission::create(['name' => 'view permissions']);\n        Permission::create(['name' => 'create permissions']);\n        Permission::create(['name' => 'update permissions']);\n        Permission::create(['name' => 'delete permissions']);\n\n        Permission::create(['name' => 'list users']);\n        Permission::create(['name' => 'view users']);\n        Permission::create(['name' => 'create users']);\n        Permission::create(['name' => 'update users']);\n        Permission::create(['name' => 'delete users']);\n\n        // Create admin role and assign all permissions\n        $allPermissions = Permission::all();\n        $adminRole = Role::create(['name' => 'super-admin']);\n        $adminRole->givePermissionTo($allPermissions);\n\n        $user = \\App\\Models\\User::whereEmail('admin@admin.com')->first();\n\n        if ($user) {\n            $user->assignRole($adminRole);\n        }\n    }\n}\n","module":"permissions","path":"/database/seeders/PermissionsSeeder.php"},"/app/Http/Controllers/RoleController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n\nclass RoleController extends Controller {\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request) \n    {\n        $this->authorize('list', Role::class);\n\n        $search = $request->get('search', '');\n        $roles = Role::where('name', 'like', \"%{$search}%\")->paginate(10);\n\n        return view('app.roles.index')\n            ->with('roles', $roles)\n            ->with('search', $search);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function create() \n    {\n        $this->authorize('create', Role::class);\n\n        $permissions = Permission::all();\n\n        return view('app.roles.create')->with('permissions', $permissions);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request) \n    {\n\n        $this->authorize('create', Role::class);\n\n        $data = $this->validate($request, [\n            'name' => 'required|unique:roles|max:32',\n            'permissions' => 'array',\n        ]);\n\n        $role = Role::create($data);\n\n        $permissions = Permission::find($request->permissions);\n        $role->syncPermissions($permissions);\n\n        return redirect()\n            ->route('roles.edit', $role->id)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\Spatie\\Permission\\Models\\Role  $role\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Role $role) \n    {\n        $this->authorize('view', Role::class);\n\n        return view('app.roles.show')->with('role', $role);\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\Spatie\\Permission\\Models\\Role  $role\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function edit(Role $role) \n    {\n        $this->authorize('update', $role);\n\n        $permissions = Permission::all();\n\n        return view('app.roles.edit')\n            ->with('role', $role)\n            ->with('permissions', $permissions);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Spatie\\Permission\\Models\\Role  $role\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, Role $role) \n    {\n        $this->authorize('update', $role);\n\n        $data = $this->validate($request, [\n            'name' => 'required|max:32|unique:roles,name,'.$role->id,\n            'permissions' => 'array',\n        ]);\n        \n        $role->update($data);\n\n        $permissions = Permission::find($request->permissions);\n        $role->syncPermissions($permissions);\n\n        return redirect()\n            ->route('roles.edit', $role->id)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\Spatie\\Permission\\Models\\Role  $role\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Role $role)\n    {\n        $this->authorize('delete', $role);\n\n        $role->delete();\n\n        return redirect()\n            ->route('roles.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}","module":"permissions","path":"/app/Http/Controllers/RoleController.php"},"/app/Http/Controllers/PermissionController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n\nclass PermissionController extends Controller\n{\n    /**\n    * Display a listing of the resource.\n    *\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function index(Request $request)\n    {\n        $this->authorize('list', Permission::class);\n\n        $search = $request->get('search', '');\n        $permissions = Permission::where('name', 'like', \"%{$search}%\")->paginate(10);\n\n        return view('app.permissions.index')\n            ->with('permissions', $permissions)\n            ->with('search', $search);\n    }\n\n    /**\n    * Show the form for creating a new resource.\n    *\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function create()\n    {\n        $this->authorize('create', Permission::class);\n\n        $roles = Role::all();\n        return view('app.permissions.create')->with('roles', $roles);\n    }\n\n    /**\n    * Store a newly created resource in storage.\n    *\n    * @param  \\Illuminate\\Http\\Request  $request\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function store(Request $request)\n    {\n\n        $this->authorize('create', Permission::class);\n\n        $data = $this->validate($request, [\n            'name' => 'required|max:64',\n            'roles' => 'array'\n        ]);\n\n        $permission = Permission::create($data);\n        \n        $roles = Role::find($request->roles);\n        $permission->syncRoles($roles);\n\n        return redirect()\n            ->route('permissions.edit', $permission->id)\n            ->withSuccess(__('crud.common.created'));\n    }\n\n    /**\n    * Display the specified resource.\n    *\n    * @param  \\Spatie\\Permission\\Models\\Permission  $permission\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function show(Permission $permission)\n    {\n        $this->authorize('view', Permission::class);\n\n        return view('app.permissions.show')->with('permission', $permission);\n    }\n\n    /**\n    * Show the form for editing the specified resource.\n    *\n    * @param  \\Spatie\\Permission\\Models\\Permission  $permission\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function edit(Permission $permission)\n    {\n        $this->authorize('update', $permission);\n\n        $roles = Role::get();\n\n        return view('app.permissions.edit')\n            ->with('permission', $permission)\n            ->with('roles', $roles);\n    }\n\n    /**\n    * Update the specified resource in storage.\n    *\n    * @param  \\Illuminate\\Http\\Request  $request\n    * @param  \\Spatie\\Permission\\Models\\Permission  $permission\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function update(Request $request, Permission $permission)\n    {\n        $this->authorize('update', $permission);\n\n        $data = $this->validate($request, [\n            'name' => 'required|max:40',\n            'roles' => 'array'\n        ]);\n\n        $permission->update($data);\n        \n        $roles = Role::find($request->roles);\n        $permission->syncRoles($roles);\n\n        return redirect()\n            ->route('permissions.edit', $permission->id)\n            ->withSuccess(__('crud.common.saved'));\n    }\n\n    /**\n    * Remove the specified resource from storage.\n    *\n    * @param  \\Spatie\\Permission\\Models\\Permission  $permission\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function destroy(Permission $permission)\n    {\n        $this->authorize('delete', $permission);\n\n        $permission->delete();\n\n        return redirect()\n            ->route('permissions.index')\n            ->withSuccess(__('crud.common.removed'));\n    }\n}\n","module":"permissions","path":"/app/Http/Controllers/PermissionController.php"},"/tests/Feature/Controllers/RoleControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse Spatie\\Permission\\Models\\Role;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass RoleControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(User::factory()->create(['email' => 'admin@admin.com']));\n        \n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_roles()\n    {\n        $response = $this->get(route('roles.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.roles.index')\n            ->assertViewHas('roles');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_role()\n    {\n        $response = $this->get(route('roles.create'));\n\n        $response->assertOk()->assertViewIs('app.roles.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_role()\n    {\n        $response = $this->post(route('roles.store'), [\n            'name' => 'secretary',\n            'permissions' => []\n        ]);\n\n        $this->assertDatabaseHas('roles', ['name' => 'secretary']);\n\n        $role = Role::latest('id')->first();\n\n        $response->assertRedirect(route('roles.edit', $role));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_role()\n    {\n        $role = Role::first();\n\n        $response = $this->get(route('roles.show', $role));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.roles.show')\n            ->assertViewHas('role');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_role()\n    {\n        $role = Role::first();\n\n        $response = $this->get(route('roles.edit', $role));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.roles.edit')\n            ->assertViewHas('role');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_role()\n    {\n        $role = Role::first();\n\n        $data = [\n            'name' => 'manager',\n            'permissions' => [],\n        ];\n\n        $response = $this->put(route('roles.update', $role), $data);\n\n        $this->assertDatabaseHas('roles', [\n            'id' => $role->id,\n            'name' => 'manager'\n        ]);\n\n        $response->assertRedirect(route('roles.edit', $role));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_role()\n    {\n        $role = Role::first();\n\n        $response = $this->delete(route('roles.destroy', $role));\n\n        $response->assertRedirect(route('roles.index'));\n        \n        $this->assertModelMissing($role);\n    }\n}\n","module":"permissions","path":"/tests/Feature/Controllers/RoleControllerTest.php"},"/tests/Feature/Controllers/PermissionControllerTest.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace Tests\\Feature\\Controllers;\n\nuse App\\Models\\User;\nuse Spatie\\Permission\\Models\\Permission;\n\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nclass PermissionControllerTest extends TestCase\n{\n    use RefreshDatabase, WithFaker;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->actingAs(User::factory()->create(['email' => 'admin@admin.com']));\n        \n        $this->seed(\\Database\\Seeders\\PermissionsSeeder::class);\n\n        $this->withoutExceptionHandling();\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_index_view_with_permissions()\n    {\n        $response = $this->get(route('permissions.index'));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.permissions.index')\n            ->assertViewHas('permissions');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_create_view_for_permission()\n    {\n        $response = $this->get(route('permissions.create'));\n\n        $response->assertOk()->assertViewIs('app.permissions.create');\n    }\n\n    /**\n     * @test\n     */\n    public function it_stores_the_permission()\n    {\n        $response = $this->post(route('permissions.store'), [\n            'name' => 'list secretaries',\n            'roles' => []\n        ]);\n\n        $this->assertDatabaseHas('permissions', ['name' => 'list secretaries']);\n\n        $permission = Permission::latest('id')->first();\n\n        $response->assertRedirect(route('permissions.edit', $permission));\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_show_view_for_permission()\n    {\n        $permission = Permission::first();\n\n        $response = $this->get(route('permissions.show', $permission));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.permissions.show')\n            ->assertViewHas('permission');\n    }\n\n    /**\n     * @test\n     */\n    public function it_displays_edit_view_for_permission()\n    {\n        $permission = Permission::first();\n\n        $response = $this->get(route('permissions.edit', $permission));\n\n        $response\n            ->assertOk()\n            ->assertViewIs('app.permissions.edit')\n            ->assertViewHas('permission');\n    }\n\n    /**\n     * @test\n     */\n    public function it_updates_the_permission()\n    {\n        $permission = Permission::first();\n\n        $data = [\n            'name' => 'list managers',\n            'roles' => [],\n        ];\n\n        $response = $this->put(route('permissions.update', $permission), $data);\n\n        $this->assertDatabaseHas('permissions', [\n            'id' => $permission->id,\n            'name' => 'list managers'\n        ]);\n\n        $response->assertRedirect(route('permissions.edit', $permission));\n    }\n\n    /**\n     * @test\n     */\n    public function it_deletes_the_permission()\n    {\n        $permission = Permission::first();\n\n        $response = $this->delete(route('permissions.destroy', $permission));\n\n        $response->assertRedirect(route('permissions.index'));\n        \n        $this->assertModelMissing($permission);\n    }\n}\n","module":"permissions","path":"/tests/Feature/Controllers/PermissionControllerTest.php"},"/resources/views/app/roles/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('roles.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.roles.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('roles.update', $role) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.roles.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('roles.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a href=\"{{ route('roles.create') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"/resources/views/app/roles/edit.blade.php"},"/resources/views/app/roles/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">@lang('crud.roles.index_title')</h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\Role::class)\n                        <a\n                            href=\"{{ route('roles.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.roles.inputs.name')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($roles as $role)\n                        <tr>\n                            <td>{{ $role->name ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $role)\n                                    <a href=\"{{ route('roles.edit', $role) }}\">\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $role)\n                                    <a href=\"{{ route('roles.show', $role) }}\">\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $role)\n                                    <form\n                                        action=\"{{ route('roles.destroy', $role) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"2\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"2\">{!! $roles->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"/resources/views/app/roles/index.blade.php"},"/resources/views/app/roles/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('roles.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.roles.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('roles.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.roles.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a href=\"{{ route('roles.index') }}\" class=\"btn btn-light\">\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"/resources/views/app/roles/create.blade.php"},"/resources/views/app/roles/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('roles.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.roles.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.roles.inputs.name')</h5>\n                    <span>{{ $role->name ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a href=\"{{ route('roles.index') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Role::class)\n                <a href=\"{{ route('roles.create') }}\" class=\"btn btn-light\">\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"/resources/views/app/roles/show.blade.php"},"/resources/views/app/roles/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($role) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $role->name : ''))\"\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <div class=\"form-group col-sm-12 mt-4\">\n        <h4>Assign @lang('crud.permissions.name')</h4>\n\n        @foreach ($permissions as $permission)\n        <div>\n            <x-inputs.checkbox\n                id=\"permission{{ $permission->id }}\"\n                name=\"permissions[]\"\n                label=\"{{ ucfirst($permission->name) }}\"\n                value=\"{{ $permission->id }}\"\n                :checked=\"isset($role) ? $role->hasPermissionTo($permission) : false\"\n                :add-hidden-value=\"false\"\n            ></x-inputs.checkbox>\n        </div>\n        @endforeach\n    </div>\n</div>\n","module":"crud","path":"/resources/views/app/roles/form-inputs.blade.php"},"/resources/views/app/permissions/edit.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('permissions.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.permissions.edit_title')\n            </h4>\n\n            <x-form\n                method=\"PUT\"\n                action=\"{{ route('permissions.update', $permission) }}\"\n                class=\"mt-4\"\n            >\n                @include('app.permissions.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('permissions.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <a\n                        href=\"{{ route('permissions.create') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-add text-primary\"></i>\n                        @lang('crud.common.create')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.update')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"/resources/views/app/permissions/edit.blade.php"},"/resources/views/app/permissions/index.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <div style=\"display: flex; justify-content: space-between;\">\n                <h4 class=\"card-title\">\n                    @lang('crud.permissions.index_title')\n                </h4>\n            </div>\n\n            <div class=\"searchbar mt-4 mb-5\">\n                <div class=\"row\">\n                    <div class=\"col-md-6\">\n                        <form>\n                            <div class=\"input-group\">\n                                <input\n                                    id=\"indexSearch\"\n                                    type=\"text\"\n                                    name=\"search\"\n                                    placeholder=\"{{ __('crud.common.search') }}\"\n                                    value=\"{{ $search ?? '' }}\"\n                                    class=\"form-control\"\n                                    autocomplete=\"off\"\n                                />\n                                <div class=\"input-group-append\">\n                                    <button\n                                        type=\"submit\"\n                                        class=\"btn btn-primary\"\n                                    >\n                                        <i class=\"icon ion-md-search\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"col-md-6 text-right\">\n                        @can('create', App\\Models\\Permission::class)\n                        <a\n                            href=\"{{ route('permissions.create') }}\"\n                            class=\"btn btn-primary\"\n                        >\n                            <i class=\"icon ion-md-add\"></i>\n                            @lang('crud.common.create')\n                        </a>\n                        @endcan\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"table-responsive\">\n                <table class=\"table table-borderless table-hover\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-left\">\n                                @lang('crud.permissions.inputs.name')\n                            </th>\n                            <th class=\"text-center\">\n                                @lang('crud.common.actions')\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        @forelse($permissions as $permission)\n                        <tr>\n                            <td>{{ $permission->name ?? '-' }}</td>\n                            <td class=\"text-center\" style=\"width: 134px;\">\n                                <div\n                                    role=\"group\"\n                                    aria-label=\"Row Actions\"\n                                    class=\"btn-group\"\n                                >\n                                    @can('update', $permission)\n                                    <a\n                                        href=\"{{ route('permissions.edit', $permission) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-create\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('view', $permission)\n                                    <a\n                                        href=\"{{ route('permissions.show', $permission) }}\"\n                                    >\n                                        <button\n                                            type=\"button\"\n                                            class=\"btn btn-light\"\n                                        >\n                                            <i class=\"icon ion-md-eye\"></i>\n                                        </button>\n                                    </a>\n                                    @endcan @can('delete', $permission)\n                                    <form\n                                        action=\"{{ route('permissions.destroy', $permission) }}\"\n                                        method=\"POST\"\n                                        onsubmit=\"return confirm('{{ __('crud.common.are_you_sure') }}')\"\n                                    >\n                                        @csrf @method('DELETE')\n                                        <button\n                                            type=\"submit\"\n                                            class=\"btn btn-light text-danger\"\n                                        >\n                                            <i class=\"icon ion-md-trash\"></i>\n                                        </button>\n                                    </form>\n                                    @endcan\n                                </div>\n                            </td>\n                        </tr>\n                        @empty\n                        <tr>\n                            <td colspan=\"2\">\n                                @lang('crud.common.no_items_found')\n                            </td>\n                        </tr>\n                        @endforelse\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <td colspan=\"2\">{!! $permissions->render() !!}</td>\n                        </tr>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"/resources/views/app/permissions/index.blade.php"},"/resources/views/app/permissions/create.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('permissions.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.permissions.create_title')\n            </h4>\n\n            <x-form\n                method=\"POST\"\n                action=\"{{ route('permissions.store') }}\"\n                class=\"mt-4\"\n            >\n                @include('app.permissions.form-inputs')\n\n                <div class=\"mt-4\">\n                    <a\n                        href=\"{{ route('permissions.index') }}\"\n                        class=\"btn btn-light\"\n                    >\n                        <i class=\"icon ion-md-return-left text-primary\"></i>\n                        @lang('crud.common.back')\n                    </a>\n\n                    <button type=\"submit\" class=\"btn btn-primary float-right\">\n                        <i class=\"icon ion-md-save\"></i>\n                        @lang('crud.common.create')\n                    </button>\n                </div>\n            </x-form>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"/resources/views/app/permissions/create.blade.php"},"/resources/views/app/permissions/show.blade.php":{"deleteOnGeneration":true,"content":"@extends('layouts.app')\n\n@section('content')\n<div class=\"container\">\n    <div class=\"card\">\n        <div class=\"card-body\">\n            <h4 class=\"card-title\">\n                <a href=\"{{ route('permissions.index') }}\" class=\"mr-4\"\n                    ><i class=\"icon ion-md-arrow-back\"></i\n                ></a>\n                @lang('crud.permissions.show_title')\n            </h4>\n\n            <div class=\"mt-4\">\n                <div class=\"mb-4\">\n                    <h5>@lang('crud.permissions.inputs.name')</h5>\n                    <span>{{ $permission->name ?? '-' }}</span>\n                </div>\n            </div>\n\n            <div class=\"mt-4\">\n                <a\n                    href=\"{{ route('permissions.index') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-return-left\"></i>\n                    @lang('crud.common.back')\n                </a>\n\n                @can('create', App\\Models\\Permission::class)\n                <a\n                    href=\"{{ route('permissions.create') }}\"\n                    class=\"btn btn-light\"\n                >\n                    <i class=\"icon ion-md-add\"></i> @lang('crud.common.create')\n                </a>\n                @endcan\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n","module":"crud","path":"/resources/views/app/permissions/show.blade.php"},"/resources/views/app/permissions/form-inputs.blade.php":{"deleteOnGeneration":true,"content":"@php $editing = isset($permission) @endphp\n\n<div class=\"row\">\n    <x-inputs.group class=\"col-sm-12\">\n        <x-inputs.text\n            name=\"name\"\n            label=\"Name\"\n            :value=\"old('name', ($editing ? $permission->name : ''))\"\n        ></x-inputs.text>\n    </x-inputs.group>\n\n    <div class=\"form-group col-sm-12 mt-4\">\n        <h4>Assign @lang('crud.roles.name')</h4>\n\n        @foreach ($roles as $role)\n        <div>\n            <x-inputs.checkbox\n                id=\"role{{ $role->id }}\"\n                name=\"roles[]\"\n                label=\"{{ ucfirst($role->name) }}\"\n                value=\"{{ $role->id }}\"\n                :checked=\"isset($permission) ? $role->hasPermissionTo($permission) : false\"\n                :add-hidden-value=\"false\"\n            ></x-inputs.checkbox>\n        </div>\n        @endforeach\n    </div>\n</div>\n","module":"crud","path":"/resources/views/app/permissions/form-inputs.blade.php"},"/app/Http/Resources/PermissionCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass PermissionCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"base","path":"/app/Http/Resources/PermissionCollection.php"},"/app/Http/Resources/PermissionResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass PermissionResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"base","path":"/app/Http/Resources/PermissionResource.php"},"/app/Http/Resources/RoleCollection.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass RoleCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"base","path":"/app/Http/Resources/RoleCollection.php"},"/app/Http/Resources/RoleResource.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass RoleResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return parent::toArray($request);\n    }\n}\n","module":"base","path":"/app/Http/Resources/RoleResource.php"},"/app/Http/Controllers/Api/PermissionController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Illuminate\\Http\\Request;\nuse Spatie\\Permission\\Models\\Role;\nuse App\\Http\\Controllers\\Controller;\nuse Spatie\\Permission\\Models\\Permission;\nuse App\\Http\\Resources\\PermissionResource;\nuse App\\Http\\Resources\\PermissionCollection;\n\nclass PermissionController extends Controller\n{\n    /**\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function index(Request $request)\n    {\n        $this->authorize('list', Permission::class);\n\n        $search = $request->get('search', '');\n        $permissions = Permission::where('name', 'like', \"%{$search}%\")->paginate();\n\n        return new PermissionCollection($permissions);\n    }\n\n    /**\n    * @param  \\Illuminate\\Http\\Request  $request\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function store(Request $request)\n    {\n        $this->authorize('create', Permission::class);\n\n        $validated = $this->validate($request, [\n            'name' => 'required|max:64',\n            'roles' => 'array'\n        ]);\n\n        $permission = Permission::create($validated);\n        \n        $roles = Role::find($request->roles);\n        $permission->syncRoles($roles);\n\n        return new PermissionResource($permission);\n    }\n\n    /**\n    * @param  \\Spatie\\Permission\\Models\\Permission  $permission\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function show(Permission $permission)\n    {\n        $this->authorize('view', Permission::class);\n\n        return new PermissionResource($permission);\n    }\n\n    /**\n    * @param  \\Illuminate\\Http\\Request  $request\n    * @param  \\Spatie\\Permission\\Models\\Permission  $permission\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function update(Request $request, Permission $permission)\n    {\n        $this->authorize('update', $permission);\n\n        $validated = $this->validate($request, [\n            'name' => 'required|max:40',\n            'roles' => 'array'\n        ]);\n\n        $permission->update($validated);\n        \n        $roles = Role::find($request->roles);\n        $permission->syncRoles($roles);\n\n        return new PermissionResource($permission);\n    }\n\n    /**\n    * @param  \\Spatie\\Permission\\Models\\Permission  $permission\n    * @return \\Illuminate\\Http\\Response\n    */\n    public function destroy(Permission $permission)\n    {\n        $this->authorize('delete', $permission);\n\n        $permission->delete();\n\n        return response()->noContent();\n    }\n}\n","module":"base","path":"/app/Http/Controllers/Api/PermissionController.php"},"/app/Http/Controllers/Api/RoleController.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse Illuminate\\Http\\Request;\nuse Spatie\\Permission\\Models\\Role;\nuse App\\Http\\Resources\\RoleResource;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\RoleCollection;\nuse Spatie\\Permission\\Models\\Permission;\n\nclass RoleController extends Controller {\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function index(Request $request) \n    {\n        $this->authorize('list', Role::class);\n\n        $search = $request->get('search', '');\n        $roles = Role::where('name', 'like', \"%{$search}%\")->paginate();\n\n        return new RoleCollection($roles);\n    }\n\n    /**\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function store(Request $request) \n    {\n        $this->authorize('create', Role::class);\n\n        $validated = $this->validate($request, [\n            'name' => 'required|unique:roles|max:32',\n            'permissions' => 'array',\n        ]);\n\n        $role = Role::create($validated);\n\n        $permissions = Permission::find($request->permissions);\n        $role->syncPermissions($permissions);\n\n        return new RoleResource($role);\n    }\n\n    /**\n     * @param  \\Spatie\\Permission\\Models\\Role  $role\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function show(Role $role) \n    {\n        $this->authorize('view', Role::class);\n\n        return new RoleResource($role);\n    }\n\n    /**\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Spatie\\Permission\\Models\\Role  $role\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function update(Request $request, Role $role) \n    {\n        $this->authorize('update', $role);\n\n        $validated = $this->validate($request, [\n            'name'=>'required|max:32|unique:roles,name,'.$role->id,\n            'permissions' =>'array',\n        ]);\n        \n        $role->update($validated);\n\n        $permissions = Permission::find($request->permissions);\n        $role->syncPermissions($permissions);\n\n        return new RoleResource($role);\n    }\n\n    /**\n     * @param  \\Spatie\\Permission\\Models\\Role  $role\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(Role $role)\n    {\n        $this->authorize('delete', $role);\n\n        $role->delete();\n\n        return response()->noContent();\n    }\n}","module":"base","path":"/app/Http/Controllers/Api/RoleController.php"},"/vite.config.js":{"deleteOnGeneration":true,"content":"import { defineConfig } from 'vite';\nimport laravel from 'laravel-vite-plugin';\n\nexport default defineConfig({\n    plugins: [\n        laravel([\n            'resources/sass/app.scss',\n            'resources/js/app.js',\n        ]),\n    ],\n});","module":"base","path":"/vite.config.js"},"/resources/js/bootstrap.js":{"deleteOnGeneration":true,"content":"import _ from 'lodash';\nwindow._ = _;\n\n/**\n * We'll load jQuery and the Bootstrap jQuery plugin which provides support\n * for JavaScript based Bootstrap features such as modals and tabs. This\n * code may be modified to fit the specific needs of your application.\n */\n\nimport popper from 'popper.js';\nimport jquery from 'jquery';\nimport bootstrap from 'bootstrap';\n\ntry {\n\n    window.Popper = popper;\n    window.$ = window.jQuery = jquery;\n    \n} catch (e) {}\n\n/**\n * We'll load the axios HTTP library which allows us to easily issue requests\n * to our Laravel back-end. This library automatically handles sending the\n * CSRF token as a header based on the value of the \"XSRF\" token cookie.\n */\n\n import axios from 'axios';\n window.axios = axios;\n \n window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n\n// import Echo from 'laravel-echo';\n\n// window.Pusher = require('pusher-js');\n\n// window.Echo = new Echo({\n//     broadcaster: 'pusher',\n//     key: process.env.MIX_PUSHER_APP_KEY,\n//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n//     forceTLS: true\n// });\n","module":"base","path":"/resources/js/bootstrap.js"},"/resources/sass/app.scss":{"deleteOnGeneration":true,"content":"// Fonts\n@import url('https://fonts.googleapis.com/css?family=Nunito');\n\n// Variables\n@import 'variables';\n\n// Bootstrap\n@import 'node_modules/bootstrap/scss/bootstrap';","module":"base","path":"/resources/sass/app.scss"},"app/Nova/Application.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Nova;\n\nuse Laravel\\Nova\\Fields\\ID;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Nova\\Fields\\Text;\nuse Laravel\\Nova\\Fields\\Select;\nuse Laravel\\Nova\\Fields\\BelongsTo;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\n\nclass Application extends Resource\n{\n    /**\n     * The model the resource corresponds to.\n     *\n     * @var string\n     */\n    public static $model = \\App\\Models\\Application::class;\n\n    /**\n     * The single value that should be used to represent the resource when being displayed.\n     *\n     * @var string\n     */\n    public static $title = 'id';\n\n    /**\n     * The columns that should be searched.\n     *\n     * @var array\n     */\n    public static $search = ['id'];\n\n    /**\n     * Get the fields displayed by the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function fields(Request $request)\n    {\n        return [\n            ID::make('id')->sortable(),\n\n            Text::make('Rank')\n                ->rules('nullable', 'max:255')\n                ->placeholder('Rank')\n                ->default('0'),\n\n            Text::make('Direct Boss Points')\n                ->rules('nullable', 'max:255')\n                ->placeholder('Direct Boss Points')\n                ->default('0'),\n\n            Text::make('Supervisor Committee Points')\n                ->rules('nullable', 'max:255')\n                ->placeholder('Supervisor Committee Points')\n                ->default('0'),\n\n            Text::make('Technical Committee Points')\n                ->rules('nullable', 'max:255')\n                ->placeholder('Technical Committee Points')\n                ->default('0'),\n\n            Text::make('Employee Points')\n                ->rules('nullable', 'max:255')\n                ->placeholder('Employee Points')\n                ->default('0'),\n\n            BelongsTo::make('DirectBoss', 'directBoss'),\n\n            BelongsTo::make('Employee', 'employee'),\n\n            BelongsTo::make('SupervisorCommittee', 'supervisorCommittee'),\n\n            BelongsTo::make('TechnicalCommittee', 'technicalCommittee'),\n\n            BelongsTo::make('Award', 'award'),\n        ];\n    }\n\n    /**\n     * Get the cards available for the request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function cards(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the filters available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function filters(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the lenses available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function lenses(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the actions available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function actions(Request $request)\n    {\n        return [];\n    }\n}\n","module":"plugin:app.vemto.nova-resources|crud:1|crud-settings:1","path":"app/Nova/Application.php"},"app/Nova/Award.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Nova;\n\nuse Laravel\\Nova\\Fields\\ID;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Nova\\Fields\\Text;\nuse Laravel\\Nova\\Fields\\HasMany;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\n\nclass Award extends Resource\n{\n    /**\n     * The model the resource corresponds to.\n     *\n     * @var string\n     */\n    public static $model = \\App\\Models\\Award::class;\n\n    /**\n     * The single value that should be used to represent the resource when being displayed.\n     *\n     * @var string\n     */\n    public static $title = 'type';\n\n    /**\n     * The columns that should be searched.\n     *\n     * @var array\n     */\n    public static $search = ['type'];\n\n    /**\n     * Get the fields displayed by the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function fields(Request $request)\n    {\n        return [\n            ID::make('id')->sortable(),\n\n            Text::make('Type')\n                ->rules('required', 'max:255', 'string')\n                ->placeholder('Type'),\n\n            Text::make('Max Employee Points')\n                ->rules('nullable', 'max:255')\n                ->placeholder('Max Employee Points')\n                ->default('0'),\n\n            HasMany::make('Applications', 'applications'),\n        ];\n    }\n\n    /**\n     * Get the cards available for the request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function cards(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the filters available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function filters(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the lenses available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function lenses(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the actions available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function actions(Request $request)\n    {\n        return [];\n    }\n}\n","module":"plugin:app.vemto.nova-resources|crud:2|crud-settings:2","path":"app/Nova/Award.php"},"app/Nova/Position.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Nova;\n\nuse Laravel\\Nova\\Fields\\ID;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Nova\\Fields\\Text;\nuse Laravel\\Nova\\Fields\\HasMany;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\n\nclass Position extends Resource\n{\n    /**\n     * The model the resource corresponds to.\n     *\n     * @var string\n     */\n    public static $model = \\App\\Models\\Position::class;\n\n    /**\n     * The single value that should be used to represent the resource when being displayed.\n     *\n     * @var string\n     */\n    public static $title = 'name';\n\n    /**\n     * The columns that should be searched.\n     *\n     * @var array\n     */\n    public static $search = ['name'];\n\n    /**\n     * Get the fields displayed by the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function fields(Request $request)\n    {\n        return [\n            ID::make('id')->sortable(),\n\n            Text::make('Name')\n                ->rules('required', 'max:255', 'string')\n                ->placeholder('Name'),\n\n            HasMany::make('Employees', 'employees'),\n\n            HasMany::make('DirectBosses', 'directBosses'),\n        ];\n    }\n\n    /**\n     * Get the cards available for the request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function cards(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the filters available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function filters(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the lenses available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function lenses(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the actions available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function actions(Request $request)\n    {\n        return [];\n    }\n}\n","module":"plugin:app.vemto.nova-resources|crud:5|crud-settings:5","path":"app/Nova/Position.php"},"app/Nova/User.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Nova;\n\nuse Laravel\\Nova\\Fields\\ID;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Nova\\Fields\\Text;\nuse Laravel\\Nova\\Fields\\Password;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\n\nclass User extends Resource\n{\n    /**\n     * The model the resource corresponds to.\n     *\n     * @var string\n     */\n    public static $model = \\App\\Models\\User::class;\n\n    /**\n     * The single value that should be used to represent the resource when being displayed.\n     *\n     * @var string\n     */\n    public static $title = 'name';\n\n    /**\n     * The columns that should be searched.\n     *\n     * @var array\n     */\n    public static $search = ['name'];\n\n    /**\n     * Get the fields displayed by the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function fields(Request $request)\n    {\n        return [\n            ID::make('id')->sortable(),\n\n            Text::make('Name')\n                ->rules('required', 'max:255', 'string')\n                ->placeholder('Name'),\n\n            Text::make('Email')\n                ->creationRules('required', 'unique:users,email', 'email')\n                ->updateRules(\n                    'required',\n                    'unique:users,email,{{resourceId}}',\n                    'email'\n                )\n                ->placeholder('Email'),\n\n            Password::make('Password')\n                ->creationRules('required')\n                ->updateRules('nullable')\n                ->placeholder('Password')\n                ->hideFromIndex()\n                ->hideFromDetail(),\n        ];\n    }\n\n    /**\n     * Get the cards available for the request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function cards(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the filters available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function filters(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the lenses available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function lenses(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the actions available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function actions(Request $request)\n    {\n        return [];\n    }\n}\n","module":"plugin:app.vemto.nova-resources|crud:8|crud-settings:8","path":"app/Nova/User.php"},"app/Nova/DirectBoss.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Nova;\n\nuse Laravel\\Nova\\Fields\\ID;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Nova\\Fields\\Text;\nuse Laravel\\Nova\\Fields\\Select;\nuse Laravel\\Nova\\Fields\\HasMany;\nuse Laravel\\Nova\\Fields\\BelongsTo;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\n\nclass DirectBoss extends Resource\n{\n    /**\n     * The model the resource corresponds to.\n     *\n     * @var string\n     */\n    public static $model = \\App\\Models\\DirectBoss::class;\n\n    /**\n     * The single value that should be used to represent the resource when being displayed.\n     *\n     * @var string\n     */\n    public static $title = 'name';\n\n    /**\n     * The columns that should be searched.\n     *\n     * @var array\n     */\n    public static $search = ['name'];\n\n    /**\n     * Get the fields displayed by the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function fields(Request $request)\n    {\n        return [\n            ID::make('id')->sortable(),\n\n            Text::make('Name')\n                ->rules('required', 'max:255', 'string')\n                ->placeholder('Name'),\n\n            Text::make('Email')\n                ->creationRules(\n                    'required',\n                    'unique:direct_bosses,email',\n                    'email'\n                )\n                ->updateRules(\n                    'required',\n                    'unique:direct_bosses,email,{{resourceId}}',\n                    'email'\n                )\n                ->placeholder('Email'),\n\n            Text::make('Employee Number')\n                ->creationRules(\n                    'required',\n                    'unique:direct_bosses,employee_number',\n                    'max:255'\n                )\n                ->updateRules(\n                    'required',\n                    'unique:direct_bosses,employee_number,{{resourceId}}',\n                    'max:255'\n                )\n                ->placeholder('Employee Number'),\n\n            Text::make('Phone')\n                ->rules('nullable', 'max:255', 'string')\n                ->placeholder('Phone'),\n\n            BelongsTo::make('Position', 'position'),\n\n            HasMany::make('Employees', 'employees'),\n\n            HasMany::make('Applications', 'applications'),\n        ];\n    }\n\n    /**\n     * Get the cards available for the request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function cards(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the filters available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function filters(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the lenses available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function lenses(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the actions available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function actions(Request $request)\n    {\n        return [];\n    }\n}\n","module":"plugin:app.vemto.nova-resources|crud:9|crud-settings:9","path":"app/Nova/DirectBoss.php"},"app/Nova/Employee.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Nova;\n\nuse Laravel\\Nova\\Fields\\ID;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Nova\\Fields\\Text;\nuse Laravel\\Nova\\Fields\\Select;\nuse Laravel\\Nova\\Fields\\HasOne;\nuse Laravel\\Nova\\Fields\\BelongsTo;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\n\nclass Employee extends Resource\n{\n    /**\n     * The model the resource corresponds to.\n     *\n     * @var string\n     */\n    public static $model = \\App\\Models\\Employee::class;\n\n    /**\n     * The single value that should be used to represent the resource when being displayed.\n     *\n     * @var string\n     */\n    public static $title = 'name';\n\n    /**\n     * The columns that should be searched.\n     *\n     * @var array\n     */\n    public static $search = ['name'];\n\n    /**\n     * Get the fields displayed by the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function fields(Request $request)\n    {\n        return [\n            ID::make('id')->sortable(),\n\n            Text::make('Name')\n                ->rules('required', 'max:255', 'string')\n                ->placeholder('Name'),\n\n            Text::make('Phone')\n                ->rules('required', 'max:255', 'string')\n                ->placeholder('Phone'),\n\n            Text::make('Email')\n                ->rules('required', 'email')\n                ->placeholder('Email'),\n\n            Text::make('Employee Number')\n                ->creationRules(\n                    'required',\n                    'unique:employees,employee_number',\n                    'max:255'\n                )\n                ->updateRules(\n                    'required',\n                    'unique:employees,employee_number,{{resourceId}}',\n                    'max:255'\n                )\n                ->placeholder('Employee Number'),\n\n            BelongsTo::make('Position', 'position'),\n\n            BelongsTo::make('DirectBoss', 'directBoss'),\n\n            HasOne::make('Application', 'application'),\n        ];\n    }\n\n    /**\n     * Get the cards available for the request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function cards(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the filters available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function filters(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the lenses available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function lenses(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the actions available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function actions(Request $request)\n    {\n        return [];\n    }\n}\n","module":"plugin:app.vemto.nova-resources|crud:10|crud-settings:10","path":"app/Nova/Employee.php"},"app/Nova/SupervisorCommittee.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Nova;\n\nuse Laravel\\Nova\\Fields\\ID;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Nova\\Fields\\Text;\nuse Laravel\\Nova\\Fields\\HasMany;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\n\nclass SupervisorCommittee extends Resource\n{\n    /**\n     * The model the resource corresponds to.\n     *\n     * @var string\n     */\n    public static $model = \\App\\Models\\SupervisorCommittee::class;\n\n    /**\n     * The single value that should be used to represent the resource when being displayed.\n     *\n     * @var string\n     */\n    public static $title = 'name';\n\n    /**\n     * The columns that should be searched.\n     *\n     * @var array\n     */\n    public static $search = ['name'];\n\n    /**\n     * Get the fields displayed by the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function fields(Request $request)\n    {\n        return [\n            ID::make('id')->sortable(),\n\n            Text::make('Name')\n                ->rules('required', 'max:255', 'string')\n                ->placeholder('Name'),\n\n            Text::make('Email')\n                ->creationRules(\n                    'required',\n                    'unique:supervisor_committees,email',\n                    'email'\n                )\n                ->updateRules(\n                    'required',\n                    'unique:supervisor_committees,email,{{resourceId}}',\n                    'email'\n                )\n                ->placeholder('Email'),\n\n            Text::make('Employee Number')\n                ->creationRules(\n                    'required',\n                    'unique:supervisor_committees,employee_number',\n                    'max:255'\n                )\n                ->updateRules(\n                    'required',\n                    'unique:supervisor_committees,employee_number,{{resourceId}}',\n                    'max:255'\n                )\n                ->placeholder('Employee Number'),\n\n            Text::make('Phone')\n                ->rules('nullable', 'max:255', 'string')\n                ->placeholder('Phone'),\n\n            HasMany::make('Applications', 'applications'),\n        ];\n    }\n\n    /**\n     * Get the cards available for the request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function cards(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the filters available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function filters(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the lenses available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function lenses(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the actions available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function actions(Request $request)\n    {\n        return [];\n    }\n}\n","module":"plugin:app.vemto.nova-resources|crud:11|crud-settings:11","path":"app/Nova/SupervisorCommittee.php"},"app/Nova/TechnicalCommittee.php":{"deleteOnGeneration":true,"content":"<?php\n\nnamespace App\\Nova;\n\nuse Laravel\\Nova\\Fields\\ID;\nuse Illuminate\\Http\\Request;\nuse Laravel\\Nova\\Fields\\Text;\nuse Laravel\\Nova\\Fields\\HasMany;\nuse Laravel\\Nova\\Http\\Requests\\NovaRequest;\n\nclass TechnicalCommittee extends Resource\n{\n    /**\n     * The model the resource corresponds to.\n     *\n     * @var string\n     */\n    public static $model = \\App\\Models\\TechnicalCommittee::class;\n\n    /**\n     * The single value that should be used to represent the resource when being displayed.\n     *\n     * @var string\n     */\n    public static $title = 'name';\n\n    /**\n     * The columns that should be searched.\n     *\n     * @var array\n     */\n    public static $search = ['name'];\n\n    /**\n     * Get the fields displayed by the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function fields(Request $request)\n    {\n        return [\n            ID::make('id')->sortable(),\n\n            Text::make('Name')\n                ->rules('required', 'max:255', 'string')\n                ->placeholder('Name'),\n\n            Text::make('Email')\n                ->creationRules(\n                    'required',\n                    'unique:technical_committees,email',\n                    'email'\n                )\n                ->updateRules(\n                    'required',\n                    'unique:technical_committees,email,{{resourceId}}',\n                    'email'\n                )\n                ->placeholder('Email'),\n\n            Text::make('Employee Number')\n                ->creationRules(\n                    'required',\n                    'unique:technical_committees,employee_number',\n                    'max:255'\n                )\n                ->updateRules(\n                    'required',\n                    'unique:technical_committees,employee_number,{{resourceId}}',\n                    'max:255'\n                )\n                ->placeholder('Employee Number'),\n\n            Text::make('Phone')\n                ->rules('nullable', 'max:255', 'string')\n                ->placeholder('Phone'),\n\n            HasMany::make('Applications', 'applications'),\n        ];\n    }\n\n    /**\n     * Get the cards available for the request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function cards(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the filters available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function filters(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the lenses available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function lenses(Request $request)\n    {\n        return [];\n    }\n\n    /**\n     * Get the actions available for the resource.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function actions(Request $request)\n    {\n        return [];\n    }\n}\n","module":"plugin:app.vemto.nova-resources|crud:12|crud-settings:12","path":"app/Nova/TechnicalCommittee.php"}},"skippedFiles":{},"migrationsDate":"2023_03_11","lastForeignAlias":0,"cascadeDeleteAsDefault":true,"cascadeUpdateAsDefault":true,"hasFixedForeignCallbacks":true,"hasFixedMigrations":true,"hasFixedHasManyDetailOnPageFields":true,"hasFixedLongForeignIndexName":true,"hasFixedEntityMigrationsGeneration":true,"pluginsData":{"app.vemto.nova-resources":{"cruds":[null,{"selected":true,"id":1,"inputs":true,"relationships":[null,null,null,null,null,null,{"selected":true},{"selected":true},null,null,{"selected":true},null,null,{"selected":true},null,{"selected":true}]},{"selected":true,"id":2,"inputs":true,"relationships":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,{"selected":true}]},{"selected":true,"id":3,"inputs":true,"relationships":[null,null,null,{"selected":true},null,null,null,null,null,null,null,null,{"selected":true},null,null,null,{"selected":true}]},{"selected":true,"id":4,"inputs":true,"relationships":[null,{"selected":true},null,null,null,null,null,null,null,{"selected":true},null,{"selected":true}]},{"selected":true,"id":5,"inputs":true,"relationships":[null,null,{"selected":true},null,{"selected":true}]},{"selected":true,"id":6,"inputs":true,"relationships":[null,null,null,null,null,{"selected":true}]},{"selected":true,"id":7,"inputs":true,"relationships":[null,null,null,null,null,null,null,null,{"selected":true}]},{"selected":true,"id":8,"inputs":true,"relationships":[]},{"selected":true,"id":9,"inputs":true,"relationships":[null,null,null,{"selected":true},null,null,null,null,null,null,null,null,{"selected":true},null,null,null,{"selected":true}]},{"selected":true,"id":10,"inputs":true,"relationships":[null,{"selected":true},null,null,null,null,null,null,null,{"selected":true},null,{"selected":true}]},{"selected":true,"id":11,"inputs":true,"relationships":[null,null,null,null,null,{"selected":true}]},{"selected":true,"id":12,"inputs":true,"relationships":[null,null,null,null,null,null,null,null,{"selected":true}]}],"allSelected":true}},"templatesData":{},"usesVite":true,"id":1,"createdAt":"2023-03-11 01:44:29","updatedAt":"2023-03-11 04:26:00"}},"manytomanycomponents":{},"hasmanydetails":{},"manytomanydetails":{},"dependentselects":{},"manytomanyrelationships":{},"morphrelationships":{},"hasmanythroughrelatioships":{},"comments":{}},"exportedItems":["projects:1"],"exportedRelationships":["Project:1:cruds","Crud:1:inputs","Crud:1:manyToManyComponents","Crud:1:hasManyDetails","Crud:1:manyToManyDetails","Crud:1:dependentSelects","Crud:2:inputs","Crud:2:manyToManyComponents","Crud:2:hasManyDetails","Crud:2:manyToManyDetails","Crud:2:dependentSelects","Crud:5:inputs","Crud:5:manyToManyComponents","Crud:5:hasManyDetails","Crud:5:manyToManyDetails","Crud:5:dependentSelects","Crud:8:inputs","Crud:8:manyToManyComponents","Crud:8:hasManyDetails","Crud:8:manyToManyDetails","Crud:8:dependentSelects","Crud:9:inputs","Crud:9:manyToManyComponents","Crud:9:hasManyDetails","Crud:9:manyToManyDetails","Crud:9:dependentSelects","Crud:10:inputs","Crud:10:manyToManyComponents","Crud:10:hasManyDetails","Crud:10:manyToManyDetails","Crud:10:dependentSelects","Crud:11:inputs","Crud:11:manyToManyComponents","Crud:11:hasManyDetails","Crud:11:manyToManyDetails","Crud:11:dependentSelects","Crud:12:inputs","Crud:12:manyToManyComponents","Crud:12:hasManyDetails","Crud:12:manyToManyDetails","Crud:12:dependentSelects","Project:1:entities","Entity:7:authProject","Entity:7:cruds","Entity:7:fields","Field:26:inputs","Field:26:foreign","Field:26:relatedForeigns","Field:26:basicParentRelationships","Field:26:basicForeignRelationships","Field:26:manyToManyModelRelationships","Field:26:manyToManylocalModelRelationships","Field:26:typedMorphRelationships","Field:26:identifiedMorphRelationships","Field:27:inputs","Field:27:foreign","Foreign:8:inputs","Field:27:relatedForeigns","Field:27:basicParentRelationships","Field:27:basicForeignRelationships","BasicRelationship:15:inputs","BasicRelationship:15:contrary","BasicRelationship:16:inputs","BasicRelationship:16:contrary","BasicRelationship:15:hasManyDetails","BasicRelationship:16:hasManyDetails","Field:27:manyToManyModelRelationships","Field:27:manyToManylocalModelRelationships","Field:27:typedMorphRelationships","Field:27:identifiedMorphRelationships","Field:28:inputs","Field:28:foreign","Foreign:5:inputs","Field:28:relatedForeigns","Field:28:basicParentRelationships","Field:28:basicForeignRelationships","BasicRelationship:9:inputs","BasicRelationship:9:contrary","BasicRelationship:10:inputs","BasicRelationship:10:contrary","BasicRelationship:9:hasManyDetails","BasicRelationship:10:hasManyDetails","Field:28:manyToManyModelRelationships","Field:28:manyToManylocalModelRelationships","Field:28:typedMorphRelationships","Field:28:identifiedMorphRelationships","Field:29:inputs","Field:29:foreign","Foreign:3:inputs","Field:29:relatedForeigns","Field:29:basicParentRelationships","Field:29:basicForeignRelationships","BasicRelationship:5:inputs","BasicRelationship:5:contrary","BasicRelationship:6:inputs","BasicRelationship:6:contrary","BasicRelationship:5:hasManyDetails","BasicRelationship:6:hasManyDetails","Field:29:manyToManyModelRelationships","Field:29:manyToManylocalModelRelationships","Field:29:typedMorphRelationships","Field:29:identifiedMorphRelationships","Field:30:inputs","Field:30:foreign","Foreign:4:inputs","Field:30:relatedForeigns","Field:30:basicParentRelationships","Field:30:basicForeignRelationships","BasicRelationship:7:inputs","BasicRelationship:7:contrary","BasicRelationship:8:inputs","BasicRelationship:8:contrary","BasicRelationship:7:hasManyDetails","BasicRelationship:8:hasManyDetails","Field:30:manyToManyModelRelationships","Field:30:manyToManylocalModelRelationships","Field:30:typedMorphRelationships","Field:30:identifiedMorphRelationships","Field:31:inputs","Field:31:foreign","Foreign:7:inputs","Field:31:relatedForeigns","Field:31:basicParentRelationships","Field:31:basicForeignRelationships","BasicRelationship:13:inputs","BasicRelationship:13:contrary","BasicRelationship:14:inputs","BasicRelationship:14:contrary","BasicRelationship:13:hasManyDetails","BasicRelationship:14:hasManyDetails","Field:31:manyToManyModelRelationships","Field:31:manyToManylocalModelRelationships","Field:31:typedMorphRelationships","Field:31:identifiedMorphRelationships","Field:32:inputs","Field:32:foreign","Field:32:relatedForeigns","Field:32:basicParentRelationships","Field:32:basicForeignRelationships","Field:32:manyToManyModelRelationships","Field:32:manyToManylocalModelRelationships","Field:32:typedMorphRelationships","Field:32:identifiedMorphRelationships","Field:33:inputs","Field:33:foreign","Field:33:relatedForeigns","Field:33:basicParentRelationships","Field:33:basicForeignRelationships","Field:33:manyToManyModelRelationships","Field:33:manyToManylocalModelRelationships","Field:33:typedMorphRelationships","Field:33:identifiedMorphRelationships","Field:34:inputs","Field:34:foreign","Field:34:relatedForeigns","Field:34:basicParentRelationships","Field:34:basicForeignRelationships","Field:34:manyToManyModelRelationships","Field:34:manyToManylocalModelRelationships","Field:34:typedMorphRelationships","Field:34:identifiedMorphRelationships","Field:35:inputs","Field:35:foreign","Field:35:relatedForeigns","Field:35:basicParentRelationships","Field:35:basicForeignRelationships","Field:35:manyToManyModelRelationships","Field:35:manyToManylocalModelRelationships","Field:35:typedMorphRelationships","Field:35:identifiedMorphRelationships","Field:36:inputs","Field:36:foreign","Field:36:relatedForeigns","Field:36:basicParentRelationships","Field:36:basicForeignRelationships","Field:36:manyToManyModelRelationships","Field:36:manyToManylocalModelRelationships","Field:36:typedMorphRelationships","Field:36:identifiedMorphRelationships","Entity:7:foreigns","Entity:7:pivotRelationships","Entity:7:pivotMorphRelationships","Entity:7:basicRelationships","Entity:7:hasManyThroughRelationships","Entity:7:basicRelatedRelationships","Entity:7:manyToManyRelationships","Entity:7:manyToManyRelatedRelationships","Entity:7:morphRelationships","Entity:7:morphRelatedRelationships","Entity:6:authProject","Entity:6:cruds","Entity:6:fields","Field:23:inputs","Field:23:foreign","Field:23:relatedForeigns","Field:23:basicParentRelationships","Field:23:basicForeignRelationships","Field:23:manyToManyModelRelationships","Field:23:manyToManylocalModelRelationships","Field:23:typedMorphRelationships","Field:23:identifiedMorphRelationships","Field:24:inputs","Field:24:foreign","Field:24:relatedForeigns","Field:24:basicParentRelationships","Field:24:basicForeignRelationships","Field:24:manyToManyModelRelationships","Field:24:manyToManylocalModelRelationships","Field:24:typedMorphRelationships","Field:24:identifiedMorphRelationships","Field:25:inputs","Field:25:foreign","Field:25:relatedForeigns","Field:25:basicParentRelationships","Field:25:basicForeignRelationships","Field:25:manyToManyModelRelationships","Field:25:manyToManylocalModelRelationships","Field:25:typedMorphRelationships","Field:25:identifiedMorphRelationships","Entity:6:foreigns","Entity:6:pivotRelationships","Entity:6:pivotMorphRelationships","Entity:6:basicRelationships","Entity:6:hasManyThroughRelationships","Entity:6:basicRelatedRelationships","Entity:6:manyToManyRelationships","Entity:6:manyToManyRelatedRelationships","Entity:6:morphRelationships","Entity:6:morphRelatedRelationships","Entity:8:authProject","Entity:8:cruds","Entity:8:fields","Field:37:inputs","Field:37:foreign","Field:37:relatedForeigns","Foreign:6:inputs","Field:37:basicParentRelationships","BasicRelationship:11:inputs","BasicRelationship:11:contrary","BasicRelationship:12:inputs","BasicRelationship:12:contrary","BasicRelationship:11:hasManyDetails","BasicRelationship:12:hasManyDetails","Field:37:basicForeignRelationships","Field:37:manyToManyModelRelationships","Field:37:manyToManylocalModelRelationships","Field:37:typedMorphRelationships","Field:37:identifiedMorphRelationships","Field:38:inputs","Field:38:foreign","Field:38:relatedForeigns","Field:38:basicParentRelationships","Field:38:basicForeignRelationships","Field:38:manyToManyModelRelationships","Field:38:manyToManylocalModelRelationships","Field:38:typedMorphRelationships","Field:38:identifiedMorphRelationships","Field:39:inputs","Field:39:foreign","Field:39:relatedForeigns","Field:39:basicParentRelationships","Field:39:basicForeignRelationships","Field:39:manyToManyModelRelationships","Field:39:manyToManylocalModelRelationships","Field:39:typedMorphRelationships","Field:39:identifiedMorphRelationships","Field:40:inputs","Field:40:foreign","Field:40:relatedForeigns","Field:40:basicParentRelationships","Field:40:basicForeignRelationships","Field:40:manyToManyModelRelationships","Field:40:manyToManylocalModelRelationships","Field:40:typedMorphRelationships","Field:40:identifiedMorphRelationships","Field:47:inputs","Field:47:foreign","Field:47:relatedForeigns","Field:47:basicParentRelationships","Field:47:basicForeignRelationships","Field:47:manyToManyModelRelationships","Field:47:manyToManylocalModelRelationships","Field:47:typedMorphRelationships","Field:47:identifiedMorphRelationships","Field:41:inputs","Field:41:foreign","Foreign:2:inputs","Field:41:relatedForeigns","Field:41:basicParentRelationships","Field:41:basicForeignRelationships","BasicRelationship:3:inputs","BasicRelationship:3:contrary","BasicRelationship:4:inputs","BasicRelationship:4:contrary","BasicRelationship:3:hasManyDetails","BasicRelationship:4:hasManyDetails","Field:41:manyToManyModelRelationships","Field:41:manyToManylocalModelRelationships","Field:41:typedMorphRelationships","Field:41:identifiedMorphRelationships","Entity:8:foreigns","Entity:8:pivotRelationships","Entity:8:pivotMorphRelationships","Entity:8:basicRelationships","Entity:8:hasManyThroughRelationships","Entity:8:basicRelatedRelationships","Entity:8:manyToManyRelationships","Entity:8:manyToManyRelatedRelationships","Entity:8:morphRelationships","Entity:8:morphRelatedRelationships","Entity:5:authProject","Entity:5:cruds","Entity:5:fields","Field:16:inputs","Field:16:foreign","Field:16:relatedForeigns","Field:16:basicParentRelationships","Field:16:basicForeignRelationships","Field:16:manyToManyModelRelationships","Field:16:manyToManylocalModelRelationships","Field:16:typedMorphRelationships","Field:16:identifiedMorphRelationships","Field:17:inputs","Field:17:foreign","Field:17:relatedForeigns","Field:17:basicParentRelationships","Field:17:basicForeignRelationships","Field:17:manyToManyModelRelationships","Field:17:manyToManylocalModelRelationships","Field:17:typedMorphRelationships","Field:17:identifiedMorphRelationships","Field:18:inputs","Field:18:foreign","Field:18:relatedForeigns","Field:18:basicParentRelationships","Field:18:basicForeignRelationships","Field:18:manyToManyModelRelationships","Field:18:manyToManylocalModelRelationships","Field:18:typedMorphRelationships","Field:18:identifiedMorphRelationships","Field:19:inputs","Field:19:foreign","Field:19:relatedForeigns","Field:19:basicParentRelationships","Field:19:basicForeignRelationships","Field:19:manyToManyModelRelationships","Field:19:manyToManylocalModelRelationships","Field:19:typedMorphRelationships","Field:19:identifiedMorphRelationships","Field:20:inputs","Field:20:foreign","Field:20:relatedForeigns","Field:20:basicParentRelationships","Field:20:basicForeignRelationships","Field:20:manyToManyModelRelationships","Field:20:manyToManylocalModelRelationships","Field:20:typedMorphRelationships","Field:20:identifiedMorphRelationships","Field:21:inputs","Field:21:foreign","Foreign:1:inputs","Field:21:relatedForeigns","Field:21:basicParentRelationships","Field:21:basicForeignRelationships","BasicRelationship:1:inputs","BasicRelationship:1:contrary","BasicRelationship:2:inputs","BasicRelationship:2:contrary","BasicRelationship:1:hasManyDetails","BasicRelationship:2:hasManyDetails","Field:21:manyToManyModelRelationships","Field:21:manyToManylocalModelRelationships","Field:21:typedMorphRelationships","Field:21:identifiedMorphRelationships","Field:22:inputs","Field:22:foreign","Field:22:relatedForeigns","Field:22:basicParentRelationships","Field:22:basicForeignRelationships","Field:22:manyToManyModelRelationships","Field:22:manyToManylocalModelRelationships","Field:22:typedMorphRelationships","Field:22:identifiedMorphRelationships","Entity:5:foreigns","Entity:5:pivotRelationships","Entity:5:pivotMorphRelationships","Entity:5:basicRelationships","Entity:5:hasManyThroughRelationships","Entity:5:basicRelatedRelationships","Entity:5:manyToManyRelationships","Entity:5:manyToManyRelatedRelationships","Entity:5:morphRelationships","Entity:5:morphRelatedRelationships","Entity:2:authProject","Entity:2:cruds","Entity:2:fields","Field:12:inputs","Field:12:foreign","Field:12:relatedForeigns","Field:12:basicParentRelationships","Field:12:basicForeignRelationships","Field:12:manyToManyModelRelationships","Field:12:manyToManylocalModelRelationships","Field:12:typedMorphRelationships","Field:12:identifiedMorphRelationships","Field:13:inputs","Field:13:foreign","Field:13:relatedForeigns","Field:13:basicParentRelationships","Field:13:basicForeignRelationships","Field:13:manyToManyModelRelationships","Field:13:manyToManylocalModelRelationships","Field:13:typedMorphRelationships","Field:13:identifiedMorphRelationships","Entity:2:foreigns","Entity:2:pivotRelationships","Entity:2:pivotMorphRelationships","Entity:2:basicRelationships","Entity:2:hasManyThroughRelationships","Entity:2:basicRelatedRelationships","Entity:2:manyToManyRelationships","Entity:2:manyToManyRelatedRelationships","Entity:2:morphRelationships","Entity:2:morphRelatedRelationships","Entity:3:authProject","Entity:3:cruds","Entity:3:fields","Field:14:inputs","Field:14:foreign","Field:14:relatedForeigns","Field:14:basicParentRelationships","Field:14:basicForeignRelationships","Field:14:manyToManyModelRelationships","Field:14:manyToManylocalModelRelationships","Field:14:typedMorphRelationships","Field:14:identifiedMorphRelationships","Field:42:inputs","Field:42:foreign","Field:42:relatedForeigns","Field:42:basicParentRelationships","Field:42:basicForeignRelationships","Field:42:manyToManyModelRelationships","Field:42:manyToManylocalModelRelationships","Field:42:typedMorphRelationships","Field:42:identifiedMorphRelationships","Field:43:inputs","Field:43:foreign","Field:43:relatedForeigns","Field:43:basicParentRelationships","Field:43:basicForeignRelationships","Field:43:manyToManyModelRelationships","Field:43:manyToManylocalModelRelationships","Field:43:typedMorphRelationships","Field:43:identifiedMorphRelationships","Field:45:inputs","Field:45:foreign","Field:45:relatedForeigns","Field:45:basicParentRelationships","Field:45:basicForeignRelationships","Field:45:manyToManyModelRelationships","Field:45:manyToManylocalModelRelationships","Field:45:typedMorphRelationships","Field:45:identifiedMorphRelationships","Field:46:inputs","Field:46:foreign","Field:46:relatedForeigns","Field:46:basicParentRelationships","Field:46:basicForeignRelationships","Field:46:manyToManyModelRelationships","Field:46:manyToManylocalModelRelationships","Field:46:typedMorphRelationships","Field:46:identifiedMorphRelationships","Entity:3:foreigns","Entity:3:pivotRelationships","Entity:3:pivotMorphRelationships","Entity:3:basicRelationships","Entity:3:hasManyThroughRelationships","Entity:3:basicRelatedRelationships","Entity:3:manyToManyRelationships","Entity:3:manyToManyRelatedRelationships","Entity:3:morphRelationships","Entity:3:morphRelatedRelationships","Entity:4:authProject","Entity:4:cruds","Entity:4:fields","Field:15:inputs","Field:15:foreign","Field:15:relatedForeigns","Field:15:basicParentRelationships","Field:15:basicForeignRelationships","Field:15:manyToManyModelRelationships","Field:15:manyToManylocalModelRelationships","Field:15:typedMorphRelationships","Field:15:identifiedMorphRelationships","Field:48:inputs","Field:48:foreign","Field:48:relatedForeigns","Field:48:basicParentRelationships","Field:48:basicForeignRelationships","Field:48:manyToManyModelRelationships","Field:48:manyToManylocalModelRelationships","Field:48:typedMorphRelationships","Field:48:identifiedMorphRelationships","Field:49:inputs","Field:49:foreign","Field:49:relatedForeigns","Field:49:basicParentRelationships","Field:49:basicForeignRelationships","Field:49:manyToManyModelRelationships","Field:49:manyToManylocalModelRelationships","Field:49:typedMorphRelationships","Field:49:identifiedMorphRelationships","Field:50:inputs","Field:50:foreign","Field:50:relatedForeigns","Field:50:basicParentRelationships","Field:50:basicForeignRelationships","Field:50:manyToManyModelRelationships","Field:50:manyToManylocalModelRelationships","Field:50:typedMorphRelationships","Field:50:identifiedMorphRelationships","Field:51:inputs","Field:51:foreign","Field:51:relatedForeigns","Field:51:basicParentRelationships","Field:51:basicForeignRelationships","Field:51:manyToManyModelRelationships","Field:51:manyToManylocalModelRelationships","Field:51:typedMorphRelationships","Field:51:identifiedMorphRelationships","Entity:4:foreigns","Entity:4:pivotRelationships","Entity:4:pivotMorphRelationships","Entity:4:basicRelationships","Entity:4:hasManyThroughRelationships","Entity:4:basicRelatedRelationships","Entity:4:manyToManyRelationships","Entity:4:manyToManyRelatedRelationships","Entity:4:morphRelationships","Entity:4:morphRelatedRelationships","Entity:1:authProject","Project:1:comments","Entity:1:cruds","Entity:1:fields","Field:1:inputs","Field:1:foreign","Field:1:relatedForeigns","Field:1:basicParentRelationships","Field:1:basicForeignRelationships","Field:1:manyToManyModelRelationships","Field:1:manyToManylocalModelRelationships","Field:1:typedMorphRelationships","Field:1:identifiedMorphRelationships","Field:2:inputs","Field:2:foreign","Field:2:relatedForeigns","Field:2:basicParentRelationships","Field:2:basicForeignRelationships","Field:2:manyToManyModelRelationships","Field:2:manyToManylocalModelRelationships","Field:2:typedMorphRelationships","Field:2:identifiedMorphRelationships","Field:3:inputs","Field:3:foreign","Field:3:relatedForeigns","Field:3:basicParentRelationships","Field:3:basicForeignRelationships","Field:3:manyToManyModelRelationships","Field:3:manyToManylocalModelRelationships","Field:3:typedMorphRelationships","Field:3:identifiedMorphRelationships","Field:4:inputs","Field:4:foreign","Field:4:relatedForeigns","Field:4:basicParentRelationships","Field:4:basicForeignRelationships","Field:4:manyToManyModelRelationships","Field:4:manyToManylocalModelRelationships","Field:4:typedMorphRelationships","Field:4:identifiedMorphRelationships","Field:5:inputs","Field:5:foreign","Field:5:relatedForeigns","Field:5:basicParentRelationships","Field:5:basicForeignRelationships","Field:5:manyToManyModelRelationships","Field:5:manyToManylocalModelRelationships","Field:5:typedMorphRelationships","Field:5:identifiedMorphRelationships","Field:6:inputs","Field:6:foreign","Field:6:relatedForeigns","Field:6:basicParentRelationships","Field:6:basicForeignRelationships","Field:6:manyToManyModelRelationships","Field:6:manyToManylocalModelRelationships","Field:6:typedMorphRelationships","Field:6:identifiedMorphRelationships","Field:7:inputs","Field:7:foreign","Field:7:relatedForeigns","Field:7:basicParentRelationships","Field:7:basicForeignRelationships","Field:7:manyToManyModelRelationships","Field:7:manyToManylocalModelRelationships","Field:7:typedMorphRelationships","Field:7:identifiedMorphRelationships","Field:8:inputs","Field:8:foreign","Field:8:relatedForeigns","Field:8:basicParentRelationships","Field:8:basicForeignRelationships","Field:8:manyToManyModelRelationships","Field:8:manyToManylocalModelRelationships","Field:8:typedMorphRelationships","Field:8:identifiedMorphRelationships","Field:9:inputs","Field:9:foreign","Field:9:relatedForeigns","Field:9:basicParentRelationships","Field:9:basicForeignRelationships","Field:9:manyToManyModelRelationships","Field:9:manyToManylocalModelRelationships","Field:9:typedMorphRelationships","Field:9:identifiedMorphRelationships","Field:10:inputs","Field:10:foreign","Field:10:relatedForeigns","Field:10:basicParentRelationships","Field:10:basicForeignRelationships","Field:10:manyToManyModelRelationships","Field:10:manyToManylocalModelRelationships","Field:10:typedMorphRelationships","Field:10:identifiedMorphRelationships","Field:11:inputs","Field:11:foreign","Field:11:relatedForeigns","Field:11:basicParentRelationships","Field:11:basicForeignRelationships","Field:11:manyToManyModelRelationships","Field:11:manyToManylocalModelRelationships","Field:11:typedMorphRelationships","Field:11:identifiedMorphRelationships","Entity:1:foreigns","Entity:1:pivotRelationships","Entity:1:pivotMorphRelationships","Entity:1:basicRelationships","Entity:1:hasManyThroughRelationships","Entity:1:basicRelatedRelationships","Entity:1:manyToManyRelationships","Entity:1:manyToManyRelatedRelationships","Entity:1:morphRelationships","Entity:1:morphRelatedRelationships"]}
